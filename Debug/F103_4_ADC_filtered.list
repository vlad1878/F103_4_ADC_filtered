
F103_4_ADC_filtered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080073c0  080073c0  000173c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007814  08007814  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007814  08007814  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007814  08007814  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007814  08007814  00017814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800781c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001e0  080079fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  080079fc  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010025  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002650  00000000  00000000  0003022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a92  00000000  00000000  00034a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134c1  00000000  00000000  0004e4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933e8  00000000  00000000  00061983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f4d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a68  00000000  00000000  000f4dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080073a8 	.word	0x080073a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080073a8 	.word	0x080073a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <SMA_FILTER_Get_Value>:
 *  @param  *SMA_Filter_buffer - Массив, где будут лежать сырые значения
 *  @param  *RAW_Data - Сырые данные
 *  @retval  SMA_Filter_Result - Значение, полученное после SMA фильтра.
 ******************************************************************************
 */
uint16_t SMA_FILTER_Get_Value(uint16_t *SMA_Filter_buffer, uint16_t *RAW_Data) {
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]

	/* Создадим переменную для суммы сырых значений */
	uint32_t SMA_Filter_Result = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]

	/* Начнем заполнять массив сырыми значениями с конца */
	SMA_Filter_buffer[SMA_FILTER_ORDER - 1] = *RAW_Data;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	333e      	adds	r3, #62	; 0x3e
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	8812      	ldrh	r2, [r2, #0]
 8000a9e:	801a      	strh	r2, [r3, #0]

	/* Просуммируем все элементы массива */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	72fb      	strb	r3, [r7, #11]
 8000aa4:	e00b      	b.n	8000abe <SMA_FILTER_Get_Value+0x36>
		SMA_Filter_Result += SMA_Filter_buffer[i];
 8000aa6:	7afb      	ldrb	r3, [r7, #11]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000ab8:	7afb      	ldrb	r3, [r7, #11]
 8000aba:	3301      	adds	r3, #1
 8000abc:	72fb      	strb	r3, [r7, #11]
 8000abe:	7afb      	ldrb	r3, [r7, #11]
 8000ac0:	2b1f      	cmp	r3, #31
 8000ac2:	d9f0      	bls.n	8000aa6 <SMA_FILTER_Get_Value+0x1e>
	 * 32 = 2*2*2*2*2;
	 * Тогда SMA_Filter_Result = SMA_Filter_Result/32 будет равен, как SMA_Filter_Result = SMA_Filter_Result >> 5u;
	 *
	 */
	//SMA_Filter_Result = SMA_Filter_Result / SMA_FILTER_ORDER;
	SMA_Filter_Result = SMA_Filter_Result >> 5u; //32 = 2^5;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	60fb      	str	r3, [r7, #12]

	/* Сдвинем все элементы массива влево на 1 */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	72bb      	strb	r3, [r7, #10]
 8000ace:	e00d      	b.n	8000aec <SMA_FILTER_Get_Value+0x64>
		SMA_Filter_buffer[i] = SMA_Filter_buffer[i + 1];
 8000ad0:	7abb      	ldrb	r3, [r7, #10]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	7abb      	ldrb	r3, [r7, #10]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	8812      	ldrh	r2, [r2, #0]
 8000ae4:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000ae6:	7abb      	ldrb	r3, [r7, #10]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	72bb      	strb	r3, [r7, #10]
 8000aec:	7abb      	ldrb	r3, [r7, #10]
 8000aee:	2b1f      	cmp	r3, #31
 8000af0:	d9ee      	bls.n	8000ad0 <SMA_FILTER_Get_Value+0x48>
	}

	return (uint16_t)SMA_Filter_Result; //Вернем среднее арифметическое значение
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	b29b      	uxth	r3, r3
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <lcd1602_Send_data>:
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
}

/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000b08:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <lcd1602_Send_data+0x74>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d007      	beq.n	8000b20 <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	e006      	b.n	8000b2e <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f023 0308 	bic.w	r3, r3, #8
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	f043 0304 	orr.w	r3, r3, #4
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2301      	movs	r3, #1
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	214e      	movs	r1, #78	; 0x4e
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <lcd1602_Send_data+0x78>)
 8000b48:	f002 f86e 	bl	8002c28 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f023 0304 	bic.w	r3, r3, #4
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	214e      	movs	r1, #78	; 0x4e
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <lcd1602_Send_data+0x78>)
 8000b66:	f002 f85f 	bl	8002c28 <HAL_I2C_Master_Transmit>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000298 	.word	0x20000298

08000b7c <lcd1602_Print_symbol>:
	/*========Инициализация завершена. Включить дисплей========*/
}

/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	f023 030f 	bic.w	r3, r3, #15
 8000b8e:	b25b      	sxtb	r3, r3
 8000b90:	f043 0309 	orr.w	r3, r3, #9
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000b9a:	f107 030f 	add.w	r3, r7, #15
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ffae 	bl	8000b00 <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	011b      	lsls	r3, r3, #4
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	f043 0309 	orr.w	r3, r3, #9
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8000bb4:	f107 030f 	add.w	r3, r7, #15
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ffa1 	bl	8000b00 <lcd1602_Send_data>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <lcd1602_Print_text>:

/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	e009      	b.n	8000be8 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffcd 	bl	8000b7c <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff fab1 	bl	8000150 <strlen>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d8ee      	bhi.n	8000bd4 <lcd1602_Print_text+0xe>
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	460a      	mov	r2, r1
 8000c0a:	71fb      	strb	r3, [r7, #7]
 8000c0c:	4613      	mov	r3, r2
 8000c0e:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 8000c10:	79bb      	ldrb	r3, [r7, #6]
 8000c12:	2b03      	cmp	r3, #3
 8000c14:	d901      	bls.n	8000c1a <lcd1602_SetCursor+0x1a>
		y = 3;
 8000c16:	2303      	movs	r3, #3
 8000c18:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	2b27      	cmp	r3, #39	; 0x27
 8000c1e:	d901      	bls.n	8000c24 <lcd1602_SetCursor+0x24>
		x = 39;
 8000c20:	2327      	movs	r3, #39	; 0x27
 8000c22:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d101      	bne.n	8000c2e <lcd1602_SetCursor+0x2e>
		adr = x;
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d102      	bne.n	8000c3a <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	3340      	adds	r3, #64	; 0x40
 8000c38:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d102      	bne.n	8000c46 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	3314      	adds	r3, #20
 8000c44:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d102      	bne.n	8000c52 <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	3354      	adds	r3, #84	; 0x54
 8000c50:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000c66:	f107 030e 	add.w	r3, r7, #14
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ff48 	bl	8000b00 <lcd1602_Send_data>

	command = (adr << 4);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8000c78:	f107 030e 	add.w	r3, r7, #14
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff3f 	bl	8000b00 <lcd1602_Send_data>

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c90:	f000 fd7a 	bl	8001788 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f852 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f000 f9ea 	bl	8001070 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c9c:	f000 f9ca 	bl	8001034 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ca0:	f000 f99e 	bl	8000fe0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ca4:	f000 f8a4 	bl	8000df0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ca8:	f000 f91e 	bl	8000ee8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000cac:	f000 f94a 	bl	8000f44 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f000 fdcb 	bl	800184c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 8000cb6:	481b      	ldr	r0, [pc, #108]	; (8000d24 <main+0x98>)
 8000cb8:	f002 ffdc 	bl	8003c74 <HAL_TIM_Base_Start_IT>
  while(!lcd_init_flag){
 8000cbc:	e028      	b.n	8000d10 <main+0x84>
	  lcd1602_SetCursor(1, 0);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff ff9d 	bl	8000c00 <lcd1602_SetCursor>
	  sprintf(tx_buffer_lcd, "Initialization..");
 8000cc6:	4918      	ldr	r1, [pc, #96]	; (8000d28 <main+0x9c>)
 8000cc8:	4818      	ldr	r0, [pc, #96]	; (8000d2c <main+0xa0>)
 8000cca:	f004 f8f5 	bl	8004eb8 <siprintf>
	  lcd1602_Print_text(tx_buffer_lcd);
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <main+0xa0>)
 8000cd0:	f7ff ff79 	bl	8000bc6 <lcd1602_Print_text>
	  lcd1602_SetCursor(2, 0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f7ff ff92 	bl	8000c00 <lcd1602_SetCursor>
	  sprintf(tx_buffer_lcd, "    %d    ", procent_init_lcd);
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <main+0xa4>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4914      	ldr	r1, [pc, #80]	; (8000d34 <main+0xa8>)
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <main+0xa0>)
 8000ce6:	f004 f8e7 	bl	8004eb8 <siprintf>
	  lcd1602_Print_text(tx_buffer_lcd);
 8000cea:	4810      	ldr	r0, [pc, #64]	; (8000d2c <main+0xa0>)
 8000cec:	f7ff ff6b 	bl	8000bc6 <lcd1602_Print_text>
	  procent_init_lcd += 2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <main+0xa4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <main+0xa4>)
 8000cfa:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(20);
 8000cfc:	2014      	movs	r0, #20
 8000cfe:	f000 fda5 	bl	800184c <HAL_Delay>
	  if(procent_init_lcd >= 100){
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <main+0xa4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b63      	cmp	r3, #99	; 0x63
 8000d08:	d902      	bls.n	8000d10 <main+0x84>
		  lcd_init_flag = 1;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <main+0xac>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
  while(!lcd_init_flag){
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <main+0xac>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	f083 0301 	eor.w	r3, r3, #1
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d1cf      	bne.n	8000cbe <main+0x32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  print_adc();
 8000d1e:	f000 fa15 	bl	800114c <print_adc>
 8000d22:	e7fc      	b.n	8000d1e <main+0x92>
 8000d24:	200002ec 	.word	0x200002ec
 8000d28:	080073c0 	.word	0x080073c0
 8000d2c:	200001fc 	.word	0x200001fc
 8000d30:	20000378 	.word	0x20000378
 8000d34:	080073d4 	.word	0x080073d4
 8000d38:	20000379 	.word	0x20000379

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fc4c 	bl	80045e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d90:	4618      	mov	r0, r3
 8000d92:	f002 fa4f 	bl	8003234 <HAL_RCC_OscConfig>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d9c:	f000 fa28 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da0:	230f      	movs	r3, #15
 8000da2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000db0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fcbb 	bl	8003738 <HAL_RCC_ClockConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dc8:	f000 fa12 	bl	80011f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f002 fe46 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000de2:	f000 fa05 	bl	80011f0 <Error_Handler>
  }
}
 8000de6:	bf00      	nop
 8000de8:	3750      	adds	r7, #80	; 0x50
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e00:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e02:	4a38      	ldr	r2, [pc, #224]	; (8000ee4 <MX_ADC1_Init+0xf4>)
 8000e04:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e06:	4b36      	ldr	r3, [pc, #216]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e0e:	4b34      	ldr	r3, [pc, #208]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e1c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e22:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8000e28:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e2a:	2205      	movs	r2, #5
 8000e2c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e2e:	482c      	ldr	r0, [pc, #176]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e30:	f000 fd30 	bl	8001894 <HAL_ADC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000e3a:	f000 f9d9 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e46:	2307      	movs	r3, #7
 8000e48:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4824      	ldr	r0, [pc, #144]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e50:	f000 fef2 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 f9c9 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	481d      	ldr	r0, [pc, #116]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e6c:	f000 fee4 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000e76:	f000 f9bb 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000e8c:	f000 fed4 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e96:	f000 f9ab 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000eac:	f000 fec4 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000eb6:	f000 f99b 	bl	80011f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eba:	2311      	movs	r3, #17
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_ADC1_Init+0xf0>)
 8000ec8:	f000 feb6 	bl	8001c38 <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000ed2:	f000 f98d 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000224 	.word	0x20000224
 8000ee4:	40012400 	.word	0x40012400

08000ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000eee:	4a13      	ldr	r2, [pc, #76]	; (8000f3c <MX_I2C1_Init+0x54>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <MX_I2C1_Init+0x58>)
 8000ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_I2C1_Init+0x50>)
 8000f26:	f001 fd3b 	bl	80029a0 <HAL_I2C_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f30:	f000 f95e 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000298 	.word	0x20000298
 8000f3c:	40005400 	.word	0x40005400
 8000f40:	000186a0 	.word	0x000186a0

08000f44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <MX_TIM3_Init+0x98>)
 8000f64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000f68:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000f6c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f86:	4814      	ldr	r0, [pc, #80]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000f88:	f002 fe24 	bl	8003bd4 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f92:	f000 f92d 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000fa4:	f002 ffc0 	bl	8003f28 <HAL_TIM_ConfigClockSource>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f000 f91f 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <MX_TIM3_Init+0x94>)
 8000fc0:	f003 f99c 	bl	80042fc <HAL_TIMEx_MasterConfigSynchronization>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fca:	f000 f911 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200002ec 	.word	0x200002ec
 8000fdc:	40000400 	.word	0x40000400

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_USART2_UART_Init+0x50>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001018:	f003 f9e0 	bl	80043dc <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001022:	f000 f8e5 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000334 	.word	0x20000334
 8001030:	40004400 	.word	0x40004400

08001034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_DMA_Init+0x38>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <MX_DMA_Init+0x38>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6153      	str	r3, [r2, #20]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_DMA_Init+0x38>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200b      	movs	r0, #11
 8001058:	f001 f8bf 	bl	80021da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800105c:	200b      	movs	r0, #11
 800105e:	f001 f8d8 	bl	8002212 <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <MX_GPIO_Init+0xcc>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a2c      	ldr	r2, [pc, #176]	; (800113c <MX_GPIO_Init+0xcc>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <MX_GPIO_Init+0xcc>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <MX_GPIO_Init+0xcc>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a26      	ldr	r2, [pc, #152]	; (800113c <MX_GPIO_Init+0xcc>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <MX_GPIO_Init+0xcc>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <MX_GPIO_Init+0xcc>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a20      	ldr	r2, [pc, #128]	; (800113c <MX_GPIO_Init+0xcc>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <MX_GPIO_Init+0xcc>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b1b      	ldr	r3, [pc, #108]	; (800113c <MX_GPIO_Init+0xcc>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a1a      	ldr	r2, [pc, #104]	; (800113c <MX_GPIO_Init+0xcc>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <MX_GPIO_Init+0xcc>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2120      	movs	r1, #32
 80010e8:	4815      	ldr	r0, [pc, #84]	; (8001140 <MX_GPIO_Init+0xd0>)
 80010ea:	f001 fc1f 	bl	800292c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80010ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_GPIO_Init+0xd4>)
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4619      	mov	r1, r3
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_GPIO_Init+0xd8>)
 8001104:	f001 fa8e 	bl	8002624 <HAL_GPIO_Init>

  /*Configure GPIO pin : user_led_Pin */
  GPIO_InitStruct.Pin = user_led_Pin;
 8001108:	2320      	movs	r3, #32
 800110a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2302      	movs	r3, #2
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <MX_GPIO_Init+0xd0>)
 8001120:	f001 fa80 	bl	8002624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2028      	movs	r0, #40	; 0x28
 800112a:	f001 f856 	bl	80021da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f001 f86f 	bl	8002212 <HAL_NVIC_EnableIRQ>

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	40010800 	.word	0x40010800
 8001144:	10110000 	.word	0x10110000
 8001148:	40011000 	.word	0x40011000

0800114c <print_adc>:

/* USER CODE BEGIN 4 */
void print_adc(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	if(adc_flag){
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <print_adc+0x88>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03a      	beq.n	80011ce <print_adc+0x82>
		lcd1602_SetCursor(0, 0);
 8001158:	2100      	movs	r1, #0
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fd50 	bl	8000c00 <lcd1602_SetCursor>
		sprintf(tx_buffer_lcd, "ADC_CH_1 %d", ADC_SMA_Data[0]);
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <print_adc+0x8c>)
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	491d      	ldr	r1, [pc, #116]	; (80011dc <print_adc+0x90>)
 8001168:	481d      	ldr	r0, [pc, #116]	; (80011e0 <print_adc+0x94>)
 800116a:	f003 fea5 	bl	8004eb8 <siprintf>
		lcd1602_Print_text(tx_buffer_lcd);
 800116e:	481c      	ldr	r0, [pc, #112]	; (80011e0 <print_adc+0x94>)
 8001170:	f7ff fd29 	bl	8000bc6 <lcd1602_Print_text>
		lcd1602_SetCursor(1, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff fd42 	bl	8000c00 <lcd1602_SetCursor>
		sprintf(tx_buffer_lcd, "ADC_CH_2 %d", ADC_SMA_Data[1]);
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <print_adc+0x8c>)
 800117e:	885b      	ldrh	r3, [r3, #2]
 8001180:	461a      	mov	r2, r3
 8001182:	4918      	ldr	r1, [pc, #96]	; (80011e4 <print_adc+0x98>)
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <print_adc+0x94>)
 8001186:	f003 fe97 	bl	8004eb8 <siprintf>
		lcd1602_Print_text(tx_buffer_lcd);
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <print_adc+0x94>)
 800118c:	f7ff fd1b 	bl	8000bc6 <lcd1602_Print_text>
		lcd1602_SetCursor(2, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff fd34 	bl	8000c00 <lcd1602_SetCursor>
		sprintf(tx_buffer_lcd, "ADC_CH_3 %d", ADC_SMA_Data[2]);
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <print_adc+0x8c>)
 800119a:	889b      	ldrh	r3, [r3, #4]
 800119c:	461a      	mov	r2, r3
 800119e:	4912      	ldr	r1, [pc, #72]	; (80011e8 <print_adc+0x9c>)
 80011a0:	480f      	ldr	r0, [pc, #60]	; (80011e0 <print_adc+0x94>)
 80011a2:	f003 fe89 	bl	8004eb8 <siprintf>
		lcd1602_Print_text(tx_buffer_lcd);
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <print_adc+0x94>)
 80011a8:	f7ff fd0d 	bl	8000bc6 <lcd1602_Print_text>
		lcd1602_SetCursor(3, 0);
 80011ac:	2100      	movs	r1, #0
 80011ae:	2003      	movs	r0, #3
 80011b0:	f7ff fd26 	bl	8000c00 <lcd1602_SetCursor>
		sprintf(tx_buffer_lcd, "ADC_CH_4 %d", ADC_SMA_Data[3]);
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <print_adc+0x8c>)
 80011b6:	88db      	ldrh	r3, [r3, #6]
 80011b8:	461a      	mov	r2, r3
 80011ba:	490c      	ldr	r1, [pc, #48]	; (80011ec <print_adc+0xa0>)
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <print_adc+0x94>)
 80011be:	f003 fe7b 	bl	8004eb8 <siprintf>
		lcd1602_Print_text(tx_buffer_lcd);
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <print_adc+0x94>)
 80011c4:	f7ff fcff 	bl	8000bc6 <lcd1602_Print_text>
		adc_flag = 0;
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <print_adc+0x88>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200004d4 	.word	0x200004d4
 80011d8:	200004c8 	.word	0x200004c8
 80011dc:	080073e0 	.word	0x080073e0
 80011e0:	200001fc 	.word	0x200001fc
 80011e4:	080073ec 	.word	0x080073ec
 80011e8:	080073f8 	.word	0x080073f8
 80011ec:	08007404 	.word	0x08007404

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_MspInit+0x5c>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a14      	ldr	r2, [pc, #80]	; (8001258 <HAL_MspInit+0x5c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_MspInit+0x5c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_MspInit+0x5c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_MspInit+0x60>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_MspInit+0x60>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000

08001260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a28      	ldr	r2, [pc, #160]	; (800131c <HAL_ADC_MspInit+0xbc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d149      	bne.n	8001314 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001280:	4b27      	ldr	r3, [pc, #156]	; (8001320 <HAL_ADC_MspInit+0xc0>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a26      	ldr	r2, [pc, #152]	; (8001320 <HAL_ADC_MspInit+0xc0>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <HAL_ADC_MspInit+0xc0>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_ADC_MspInit+0xc0>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <HAL_ADC_MspInit+0xc0>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <HAL_ADC_MspInit+0xc0>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 80012b0:	2353      	movs	r3, #83	; 0x53
 80012b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b4:	2303      	movs	r3, #3
 80012b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4819      	ldr	r0, [pc, #100]	; (8001324 <HAL_ADC_MspInit+0xc4>)
 80012c0:	f001 f9b0 	bl	8002624 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_ADC_MspInit+0xcc>)
 80012c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d0:	4b15      	ldr	r3, [pc, #84]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012e4:	4b10      	ldr	r3, [pc, #64]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012ee:	2220      	movs	r2, #32
 80012f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 80012fa:	f000 ffa5 	bl	8002248 <HAL_DMA_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001304:	f7ff ff74 	bl	80011f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 800130c:	621a      	str	r2, [r3, #32]
 800130e:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_ADC_MspInit+0xc8>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40012400 	.word	0x40012400
 8001320:	40021000 	.word	0x40021000
 8001324:	40010800 	.word	0x40010800
 8001328:	20000254 	.word	0x20000254
 800132c:	40020008 	.word	0x40020008

08001330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0310 	add.w	r3, r7, #16
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <HAL_I2C_MspInit+0x70>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d123      	bne.n	8001398 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_I2C_MspInit+0x74>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <HAL_I2C_MspInit+0x74>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6193      	str	r3, [r2, #24]
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_I2C_MspInit+0x74>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	f003 0308 	and.w	r3, r3, #8
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001368:	23c0      	movs	r3, #192	; 0xc0
 800136a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136c:	2312      	movs	r3, #18
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4619      	mov	r1, r3
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_I2C_MspInit+0x78>)
 800137c:	f001 f952 	bl	8002624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_I2C_MspInit+0x74>)
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_I2C_MspInit+0x74>)
 8001386:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138a:	61d3      	str	r3, [r2, #28]
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_I2C_MspInit+0x74>)
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010c00 	.word	0x40010c00

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_TIM_Base_MspInit+0x44>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d113      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013be:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <HAL_TIM_Base_MspInit+0x48>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a0c      	ldr	r2, [pc, #48]	; (80013f4 <HAL_TIM_Base_MspInit+0x48>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_TIM_Base_MspInit+0x48>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201d      	movs	r0, #29
 80013dc:	f000 fefd 	bl	80021da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013e0:	201d      	movs	r0, #29
 80013e2:	f000 ff16 	bl	8002212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40000400 	.word	0x40000400
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_UART_MspInit+0x70>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d123      	bne.n	8001460 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_UART_MspInit+0x74>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <HAL_UART_MspInit+0x74>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001422:	61d3      	str	r3, [r2, #28]
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_UART_MspInit+0x74>)
 8001426:	69db      	ldr	r3, [r3, #28]
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_UART_MspInit+0x74>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_UART_MspInit+0x74>)
 8001436:	f043 0304 	orr.w	r3, r3, #4
 800143a:	6193      	str	r3, [r2, #24]
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_UART_MspInit+0x74>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001448:	230c      	movs	r3, #12
 800144a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001450:	2302      	movs	r3, #2
 8001452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	4805      	ldr	r0, [pc, #20]	; (8001470 <HAL_UART_MspInit+0x78>)
 800145c:	f001 f8e2 	bl	8002624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	3720      	adds	r7, #32
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40004400 	.word	0x40004400
 800146c:	40021000 	.word	0x40021000
 8001470:	40010800 	.word	0x40010800

08001474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <NMI_Handler+0x4>

0800147a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147e:	e7fe      	b.n	800147e <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	e7fe      	b.n	8001484 <MemManage_Handler+0x4>

08001486 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <UsageFault_Handler+0x4>

08001492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ba:	f000 f9ab 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014c8:	481e      	ldr	r0, [pc, #120]	; (8001544 <DMA1_Channel1_IRQHandler+0x80>)
 80014ca:	f000 ff77 	bl	80023bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  Counter_DMA_IT++;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <DMA1_Channel1_IRQHandler+0x84>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <DMA1_Channel1_IRQHandler+0x84>)
 80014d8:	801a      	strh	r2, [r3, #0]
  if (Counter_DMA_IT == 1200) {
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <DMA1_Channel1_IRQHandler+0x84>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80014e2:	d12d      	bne.n	8001540 <DMA1_Channel1_IRQHandler+0x7c>
  		Counter_DMA_IT = 0;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <DMA1_Channel1_IRQHandler+0x84>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	801a      	strh	r2, [r3, #0]
  		ADC_SMA_Data[0] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_1, &ADC_RAW_Data[0]);
 80014ea:	4918      	ldr	r1, [pc, #96]	; (800154c <DMA1_Channel1_IRQHandler+0x88>)
 80014ec:	4818      	ldr	r0, [pc, #96]	; (8001550 <DMA1_Channel1_IRQHandler+0x8c>)
 80014ee:	f7ff facb 	bl	8000a88 <SMA_FILTER_Get_Value>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <DMA1_Channel1_IRQHandler+0x90>)
 80014f8:	801a      	strh	r2, [r3, #0]
  		ADC_SMA_Data[1] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_2, &ADC_RAW_Data[1]);
 80014fa:	4917      	ldr	r1, [pc, #92]	; (8001558 <DMA1_Channel1_IRQHandler+0x94>)
 80014fc:	4817      	ldr	r0, [pc, #92]	; (800155c <DMA1_Channel1_IRQHandler+0x98>)
 80014fe:	f7ff fac3 	bl	8000a88 <SMA_FILTER_Get_Value>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <DMA1_Channel1_IRQHandler+0x90>)
 8001508:	805a      	strh	r2, [r3, #2]
  		ADC_SMA_Data[2] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_3, &ADC_RAW_Data[2]);
 800150a:	4915      	ldr	r1, [pc, #84]	; (8001560 <DMA1_Channel1_IRQHandler+0x9c>)
 800150c:	4815      	ldr	r0, [pc, #84]	; (8001564 <DMA1_Channel1_IRQHandler+0xa0>)
 800150e:	f7ff fabb 	bl	8000a88 <SMA_FILTER_Get_Value>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <DMA1_Channel1_IRQHandler+0x90>)
 8001518:	809a      	strh	r2, [r3, #4]
  		ADC_SMA_Data[3] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_4, &ADC_RAW_Data[3]);
 800151a:	4913      	ldr	r1, [pc, #76]	; (8001568 <DMA1_Channel1_IRQHandler+0xa4>)
 800151c:	4813      	ldr	r0, [pc, #76]	; (800156c <DMA1_Channel1_IRQHandler+0xa8>)
 800151e:	f7ff fab3 	bl	8000a88 <SMA_FILTER_Get_Value>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <DMA1_Channel1_IRQHandler+0x90>)
 8001528:	80da      	strh	r2, [r3, #6]
  		ADC_SMA_Data[4] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_5, &ADC_RAW_Data[4]);
 800152a:	4911      	ldr	r1, [pc, #68]	; (8001570 <DMA1_Channel1_IRQHandler+0xac>)
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <DMA1_Channel1_IRQHandler+0xb0>)
 800152e:	f7ff faab 	bl	8000a88 <SMA_FILTER_Get_Value>
 8001532:	4603      	mov	r3, r0
 8001534:	461a      	mov	r2, r3
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <DMA1_Channel1_IRQHandler+0x90>)
 8001538:	811a      	strh	r2, [r3, #8]
  		adc_flag = 1;
 800153a:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <DMA1_Channel1_IRQHandler+0xb4>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000254 	.word	0x20000254
 8001548:	200004d2 	.word	0x200004d2
 800154c:	200004bc 	.word	0x200004bc
 8001550:	2000037c 	.word	0x2000037c
 8001554:	200004c8 	.word	0x200004c8
 8001558:	200004be 	.word	0x200004be
 800155c:	200003bc 	.word	0x200003bc
 8001560:	200004c0 	.word	0x200004c0
 8001564:	200003fc 	.word	0x200003fc
 8001568:	200004c2 	.word	0x200004c2
 800156c:	2000043c 	.word	0x2000043c
 8001570:	200004c4 	.word	0x200004c4
 8001574:	2000047c 	.word	0x2000047c
 8001578:	200004d4 	.word	0x200004d4

0800157c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <TIM3_IRQHandler+0x18>)
 8001582:	f002 fbc9 	bl	8003d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RAW_Data, 5);
 8001586:	2205      	movs	r2, #5
 8001588:	4903      	ldr	r1, [pc, #12]	; (8001598 <TIM3_IRQHandler+0x1c>)
 800158a:	4804      	ldr	r0, [pc, #16]	; (800159c <TIM3_IRQHandler+0x20>)
 800158c:	f000 fa5a 	bl	8001a44 <HAL_ADC_Start_DMA>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200002ec 	.word	0x200002ec
 8001598:	200004bc 	.word	0x200004bc
 800159c:	20000224 	.word	0x20000224

080015a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_button_Pin);
 80015a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015a8:	f001 f9d8 	bl	800295c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <_kill>:

int _kill(int pid, int sig)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015c8:	f002 ffe4 	bl	8004594 <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2216      	movs	r2, #22
 80015d0:	601a      	str	r2, [r3, #0]
	return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_exit>:

void _exit (int status)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015e6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffe7 	bl	80015be <_kill>
	while (1) {}		/* Make sure we hang here */
 80015f0:	e7fe      	b.n	80015f0 <_exit+0x12>

080015f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e00a      	b.n	800161a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001604:	f3af 8000 	nop.w
 8001608:	4601      	mov	r1, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	60ba      	str	r2, [r7, #8]
 8001610:	b2ca      	uxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf0      	blt.n	8001604 <_read+0x12>
	}

return len;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e009      	b.n	8001652 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf1      	blt.n	800163e <_write+0x12>
	}
	return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_close>:

int _close(int file)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	605a      	str	r2, [r3, #4]
	return 0;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <_isatty>:

int _isatty(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f002 ff4e 	bl	8004594 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20005000 	.word	0x20005000
 8001724:	00000400 	.word	0x00000400
 8001728:	200004d8 	.word	0x200004d8
 800172c:	200004f0 	.word	0x200004f0

08001730 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	; (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	; (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	; (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001762:	f7ff ffe5 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f002 ff1b 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176a:	f7ff fa8f 	bl	8000c8c <main>
  bx lr
 800176e:	4770      	bx	lr
  ldr r0, =_sdata
 8001770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001774:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001778:	0800781c 	.word	0x0800781c
  ldr r2, =_sbss
 800177c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001780:	200004f0 	.word	0x200004f0

08001784 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC1_2_IRQHandler>
	...

08001788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x28>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 fd13 	bl	80021c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fd2a 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fd2b 	bl	800222e <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 fcf3 	bl	80021da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000004 	.word	0x20000004
 800180c:	2000000c 	.word	0x2000000c
 8001810:	20000008 	.word	0x20000008

08001814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <HAL_IncTick+0x1c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_IncTick+0x20>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_IncTick+0x20>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	2000000c 	.word	0x2000000c
 8001834:	200004dc 	.word	0x200004dc

08001838 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_GetTick+0x10>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	200004dc 	.word	0x200004dc

0800184c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001854:	f7ff fff0 	bl	8001838 <HAL_GetTick>
 8001858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001864:	d005      	beq.n	8001872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001866:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <HAL_Delay+0x44>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001872:	bf00      	nop
 8001874:	f7ff ffe0 	bl	8001838 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	429a      	cmp	r2, r3
 8001882:	d8f7      	bhi.n	8001874 <HAL_Delay+0x28>
  {
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000000c 	.word	0x2000000c

08001894 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800189c:	2300      	movs	r3, #0
 800189e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0be      	b.n	8001a34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fcc4 	bl	8001260 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 faff 	bl	8001edc <ADC_ConversionStop_Disable>
 80018de:	4603      	mov	r3, r0
 80018e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 8099 	bne.w	8001a22 <HAL_ADC_Init+0x18e>
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 8095 	bne.w	8001a22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001900:	f023 0302 	bic.w	r3, r3, #2
 8001904:	f043 0202 	orr.w	r2, r3, #2
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001914:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	7b1b      	ldrb	r3, [r3, #12]
 800191a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800191c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4313      	orrs	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800192c:	d003      	beq.n	8001936 <HAL_ADC_Init+0xa2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d102      	bne.n	800193c <HAL_ADC_Init+0xa8>
 8001936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193a:	e000      	b.n	800193e <HAL_ADC_Init+0xaa>
 800193c:	2300      	movs	r3, #0
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7d1b      	ldrb	r3, [r3, #20]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d119      	bne.n	8001980 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7b1b      	ldrb	r3, [r3, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	3b01      	subs	r3, #1
 800195a:	035a      	lsls	r2, r3, #13
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	e00b      	b.n	8001980 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	f043 0220 	orr.w	r2, r3, #32
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	f043 0201 	orr.w	r2, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_ADC_Init+0x1a8>)
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	68b9      	ldr	r1, [r7, #8]
 80019a4:	430b      	orrs	r3, r1
 80019a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b0:	d003      	beq.n	80019ba <HAL_ADC_Init+0x126>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d104      	bne.n	80019c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	3b01      	subs	r3, #1
 80019c0:	051b      	lsls	r3, r3, #20
 80019c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_ADC_Init+0x1ac>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d10b      	bne.n	8001a00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019fe:	e018      	b.n	8001a32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f023 0312 	bic.w	r3, r3, #18
 8001a08:	f043 0210 	orr.w	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a20:	e007      	b.n	8001a32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	f043 0210 	orr.w	r2, r3, #16
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a40:	ff1f0efe 	.word	0xff1f0efe

08001a44 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a64      	ldr	r2, [pc, #400]	; (8001bec <HAL_ADC_Start_DMA+0x1a8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d004      	beq.n	8001a68 <HAL_ADC_Start_DMA+0x24>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a63      	ldr	r2, [pc, #396]	; (8001bf0 <HAL_ADC_Start_DMA+0x1ac>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d106      	bne.n	8001a76 <HAL_ADC_Start_DMA+0x32>
 8001a68:	4b60      	ldr	r3, [pc, #384]	; (8001bec <HAL_ADC_Start_DMA+0x1a8>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f040 80b3 	bne.w	8001bdc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_Start_DMA+0x40>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0ae      	b.n	8001be2 <HAL_ADC_Start_DMA+0x19e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f9cb 	bl	8001e28 <ADC_Enable>
 8001a92:	4603      	mov	r3, r0
 8001a94:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 809a 	bne.w	8001bd2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <HAL_ADC_Start_DMA+0x1ac>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d105      	bne.n	8001ac8 <HAL_ADC_Start_DMA+0x84>
 8001abc:	4b4b      	ldr	r3, [pc, #300]	; (8001bec <HAL_ADC_Start_DMA+0x1a8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d115      	bne.n	8001af4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d026      	beq.n	8001b30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af2:	e01d      	b.n	8001b30 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a39      	ldr	r2, [pc, #228]	; (8001bec <HAL_ADC_Start_DMA+0x1a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_ADC_Start_DMA+0xd0>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a38      	ldr	r2, [pc, #224]	; (8001bf0 <HAL_ADC_Start_DMA+0x1ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d10d      	bne.n	8001b30 <HAL_ADC_Start_DMA+0xec>
 8001b14:	4b35      	ldr	r3, [pc, #212]	; (8001bec <HAL_ADC_Start_DMA+0x1a8>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	f023 0206 	bic.w	r2, r3, #6
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b48:	e002      	b.n	8001b50 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_ADC_Start_DMA+0x1b0>)
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_ADC_Start_DMA+0x1b4>)
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_ADC_Start_DMA+0x1b8>)
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0202 	mvn.w	r2, #2
 8001b78:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b88:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a18      	ldr	r0, [r3, #32]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	334c      	adds	r3, #76	; 0x4c
 8001b94:	4619      	mov	r1, r3
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f000 fbaf 	bl	80022fc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ba8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bac:	d108      	bne.n	8001bc0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001bbc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bbe:	e00f      	b.n	8001be0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bce:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001bd0:	e006      	b.n	8001be0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001bda:	e001      	b.n	8001be0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40012400 	.word	0x40012400
 8001bf0:	40012800 	.word	0x40012800
 8001bf4:	08001f5f 	.word	0x08001f5f
 8001bf8:	08001fdb 	.word	0x08001fdb
 8001bfc:	08001ff7 	.word	0x08001ff7

08001c00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x20>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e0dc      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x1da>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d81c      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b05      	subs	r3, #5
 8001c7a:	221f      	movs	r2, #31
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4019      	ands	r1, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	3b05      	subs	r3, #5
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca0:	e03c      	b.n	8001d1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d81c      	bhi.n	8001ce4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b23      	subs	r3, #35	; 0x23
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	4019      	ands	r1, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b23      	subs	r3, #35	; 0x23
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce2:	e01b      	b.n	8001d1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b41      	subs	r3, #65	; 0x41
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	4019      	ands	r1, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b41      	subs	r3, #65	; 0x41
 8001d10:	fa00 f203 	lsl.w	r2, r0, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b09      	cmp	r3, #9
 8001d22:	d91c      	bls.n	8001d5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68d9      	ldr	r1, [r3, #12]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	3b1e      	subs	r3, #30
 8001d36:	2207      	movs	r2, #7
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	4019      	ands	r1, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6898      	ldr	r0, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3b1e      	subs	r3, #30
 8001d50:	fa00 f203 	lsl.w	r2, r0, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	e019      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6919      	ldr	r1, [r3, #16]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2207      	movs	r2, #7
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4019      	ands	r1, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	6898      	ldr	r0, [r3, #8]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d003      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d9e:	2b11      	cmp	r3, #17
 8001da0:	d132      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_ADC_ConfigChannel+0x1e4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d125      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d126      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dc8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d11a      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <HAL_ADC_ConfigChannel+0x1ec>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	0c9a      	lsrs	r2, r3, #18
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001de8:	e002      	b.n	8001df0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f9      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x1b2>
 8001df6:	e007      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	f043 0220 	orr.w	r2, r3, #32
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	40012400 	.word	0x40012400
 8001e20:	20000004 	.word	0x20000004
 8001e24:	431bde83 	.word	0x431bde83

08001e28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d040      	beq.n	8001ec8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e56:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <ADC_Enable+0xac>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1f      	ldr	r2, [pc, #124]	; (8001ed8 <ADC_Enable+0xb0>)
 8001e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e60:	0c9b      	lsrs	r3, r3, #18
 8001e62:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e64:	e002      	b.n	8001e6c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f9      	bne.n	8001e66 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e72:	f7ff fce1 	bl	8001838 <HAL_GetTick>
 8001e76:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e78:	e01f      	b.n	8001eba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e7a:	f7ff fcdd 	bl	8001838 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d918      	bls.n	8001eba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d011      	beq.n	8001eba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e007      	b.n	8001eca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d1d8      	bne.n	8001e7a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	431bde83 	.word	0x431bde83

08001edc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d12e      	bne.n	8001f54 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f06:	f7ff fc97 	bl	8001838 <HAL_GetTick>
 8001f0a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f0c:	e01b      	b.n	8001f46 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f0e:	f7ff fc93 	bl	8001838 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d914      	bls.n	8001f46 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10d      	bne.n	8001f46 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e007      	b.n	8001f56 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d0dc      	beq.n	8001f0e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d127      	bne.n	8001fc8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f8e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f92:	d115      	bne.n	8001fc0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d111      	bne.n	8001fc0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fc0:	68f8      	ldr	r0, [r7, #12]
 8001fc2:	f7ff fe1d 	bl	8001c00 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001fc6:	e004      	b.n	8001fd2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
}
 8001fd2:	bf00      	nop
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b084      	sub	sp, #16
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fe12 	bl	8001c12 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7ff fe01 	bl	8001c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4906      	ldr	r1, [pc, #24]	; (80020c4 <__NVIC_EnableIRQ+0x34>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	; (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	; (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002190:	d301      	bcc.n	8002196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2301      	movs	r3, #1
 8002194:	e00f      	b.n	80021b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002196:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <SysTick_Config+0x40>)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3b01      	subs	r3, #1
 800219c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219e:	210f      	movs	r1, #15
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f7ff ff90 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <SysTick_Config+0x40>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ae:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <SysTick_Config+0x40>)
 80021b0:	2207      	movs	r2, #7
 80021b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	e000e010 	.word	0xe000e010

080021c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff ff2d 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021d2:	bf00      	nop
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
 80021e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ec:	f7ff ff42 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	6978      	ldr	r0, [r7, #20]
 80021f8:	f7ff ff90 	bl	800211c <NVIC_EncodePriority>
 80021fc:	4602      	mov	r2, r0
 80021fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002202:	4611      	mov	r1, r2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff5f 	bl	80020c8 <__NVIC_SetPriority>
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff35 	bl	8002090 <__NVIC_EnableIRQ>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffa2 	bl	8002180 <SysTick_Config>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e043      	b.n	80022e6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_DMA_Init+0xa8>)
 8002266:	4413      	add	r3, r2
 8002268:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_DMA_Init+0xac>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	009a      	lsls	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1f      	ldr	r2, [pc, #124]	; (80022f8 <HAL_DMA_Init+0xb0>)
 800227a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002292:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002296:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	bffdfff8 	.word	0xbffdfff8
 80022f4:	cccccccd 	.word	0xcccccccd
 80022f8:	40020000 	.word	0x40020000

080022fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_DMA_Start_IT+0x20>
 8002318:	2302      	movs	r3, #2
 800231a:	e04a      	b.n	80023b2 <HAL_DMA_Start_IT+0xb6>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800232a:	2b01      	cmp	r3, #1
 800232c:	d13a      	bne.n	80023a4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f938 	bl	80025c8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 020e 	orr.w	r2, r2, #14
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e00f      	b.n	8002392 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0204 	bic.w	r2, r2, #4
 8002380:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 020a 	orr.w	r2, r2, #10
 8002390:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e005      	b.n	80023b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023ac:	2302      	movs	r3, #2
 80023ae:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2204      	movs	r2, #4
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d04f      	beq.n	8002484 <HAL_DMA_IRQHandler+0xc8>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d04a      	beq.n	8002484 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0204 	bic.w	r2, r2, #4
 800240a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a66      	ldr	r2, [pc, #408]	; (80025ac <HAL_DMA_IRQHandler+0x1f0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d029      	beq.n	800246a <HAL_DMA_IRQHandler+0xae>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a65      	ldr	r2, [pc, #404]	; (80025b0 <HAL_DMA_IRQHandler+0x1f4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d022      	beq.n	8002466 <HAL_DMA_IRQHandler+0xaa>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_DMA_IRQHandler+0x1f8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d01a      	beq.n	8002460 <HAL_DMA_IRQHandler+0xa4>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a62      	ldr	r2, [pc, #392]	; (80025b8 <HAL_DMA_IRQHandler+0x1fc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d012      	beq.n	800245a <HAL_DMA_IRQHandler+0x9e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a60      	ldr	r2, [pc, #384]	; (80025bc <HAL_DMA_IRQHandler+0x200>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00a      	beq.n	8002454 <HAL_DMA_IRQHandler+0x98>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5f      	ldr	r2, [pc, #380]	; (80025c0 <HAL_DMA_IRQHandler+0x204>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d102      	bne.n	800244e <HAL_DMA_IRQHandler+0x92>
 8002448:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800244c:	e00e      	b.n	800246c <HAL_DMA_IRQHandler+0xb0>
 800244e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002452:	e00b      	b.n	800246c <HAL_DMA_IRQHandler+0xb0>
 8002454:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002458:	e008      	b.n	800246c <HAL_DMA_IRQHandler+0xb0>
 800245a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800245e:	e005      	b.n	800246c <HAL_DMA_IRQHandler+0xb0>
 8002460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002464:	e002      	b.n	800246c <HAL_DMA_IRQHandler+0xb0>
 8002466:	2340      	movs	r3, #64	; 0x40
 8002468:	e000      	b.n	800246c <HAL_DMA_IRQHandler+0xb0>
 800246a:	2304      	movs	r3, #4
 800246c:	4a55      	ldr	r2, [pc, #340]	; (80025c4 <HAL_DMA_IRQHandler+0x208>)
 800246e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 8094 	beq.w	80025a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002482:	e08e      	b.n	80025a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	2202      	movs	r2, #2
 800248a:	409a      	lsls	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d056      	beq.n	8002542 <HAL_DMA_IRQHandler+0x186>
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d051      	beq.n	8002542 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 020a 	bic.w	r2, r2, #10
 80024ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a38      	ldr	r2, [pc, #224]	; (80025ac <HAL_DMA_IRQHandler+0x1f0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d029      	beq.n	8002522 <HAL_DMA_IRQHandler+0x166>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a37      	ldr	r2, [pc, #220]	; (80025b0 <HAL_DMA_IRQHandler+0x1f4>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <HAL_DMA_IRQHandler+0x162>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a35      	ldr	r2, [pc, #212]	; (80025b4 <HAL_DMA_IRQHandler+0x1f8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01a      	beq.n	8002518 <HAL_DMA_IRQHandler+0x15c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a34      	ldr	r2, [pc, #208]	; (80025b8 <HAL_DMA_IRQHandler+0x1fc>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d012      	beq.n	8002512 <HAL_DMA_IRQHandler+0x156>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a32      	ldr	r2, [pc, #200]	; (80025bc <HAL_DMA_IRQHandler+0x200>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00a      	beq.n	800250c <HAL_DMA_IRQHandler+0x150>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a31      	ldr	r2, [pc, #196]	; (80025c0 <HAL_DMA_IRQHandler+0x204>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d102      	bne.n	8002506 <HAL_DMA_IRQHandler+0x14a>
 8002500:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002504:	e00e      	b.n	8002524 <HAL_DMA_IRQHandler+0x168>
 8002506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250a:	e00b      	b.n	8002524 <HAL_DMA_IRQHandler+0x168>
 800250c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002510:	e008      	b.n	8002524 <HAL_DMA_IRQHandler+0x168>
 8002512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002516:	e005      	b.n	8002524 <HAL_DMA_IRQHandler+0x168>
 8002518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251c:	e002      	b.n	8002524 <HAL_DMA_IRQHandler+0x168>
 800251e:	2320      	movs	r3, #32
 8002520:	e000      	b.n	8002524 <HAL_DMA_IRQHandler+0x168>
 8002522:	2302      	movs	r3, #2
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_DMA_IRQHandler+0x208>)
 8002526:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d034      	beq.n	80025a2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002540:	e02f      	b.n	80025a2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2208      	movs	r2, #8
 8002548:	409a      	lsls	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d028      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x1e8>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d023      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 020e 	bic.w	r2, r2, #14
 800256a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f202 	lsl.w	r2, r1, r2
 800257a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
    }
  }
  return;
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
}
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40020008 	.word	0x40020008
 80025b0:	4002001c 	.word	0x4002001c
 80025b4:	40020030 	.word	0x40020030
 80025b8:	40020044 	.word	0x40020044
 80025bc:	40020058 	.word	0x40020058
 80025c0:	4002006c 	.word	0x4002006c
 80025c4:	40020000 	.word	0x40020000

080025c8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d108      	bne.n	8002608 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002606:	e007      	b.n	8002618 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
	...

08002624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002624:	b480      	push	{r7}
 8002626:	b08b      	sub	sp, #44	; 0x2c
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800262e:	2300      	movs	r3, #0
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002632:	2300      	movs	r3, #0
 8002634:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002636:	e169      	b.n	800290c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002638:	2201      	movs	r2, #1
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 8158 	bne.w	8002906 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a9a      	ldr	r2, [pc, #616]	; (80028c4 <HAL_GPIO_Init+0x2a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d05e      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002660:	4a98      	ldr	r2, [pc, #608]	; (80028c4 <HAL_GPIO_Init+0x2a0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d875      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 8002666:	4a98      	ldr	r2, [pc, #608]	; (80028c8 <HAL_GPIO_Init+0x2a4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d058      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 800266c:	4a96      	ldr	r2, [pc, #600]	; (80028c8 <HAL_GPIO_Init+0x2a4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d86f      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 8002672:	4a96      	ldr	r2, [pc, #600]	; (80028cc <HAL_GPIO_Init+0x2a8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d052      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002678:	4a94      	ldr	r2, [pc, #592]	; (80028cc <HAL_GPIO_Init+0x2a8>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d869      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 800267e:	4a94      	ldr	r2, [pc, #592]	; (80028d0 <HAL_GPIO_Init+0x2ac>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d04c      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002684:	4a92      	ldr	r2, [pc, #584]	; (80028d0 <HAL_GPIO_Init+0x2ac>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d863      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 800268a:	4a92      	ldr	r2, [pc, #584]	; (80028d4 <HAL_GPIO_Init+0x2b0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d046      	beq.n	800271e <HAL_GPIO_Init+0xfa>
 8002690:	4a90      	ldr	r2, [pc, #576]	; (80028d4 <HAL_GPIO_Init+0x2b0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d85d      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 8002696:	2b12      	cmp	r3, #18
 8002698:	d82a      	bhi.n	80026f0 <HAL_GPIO_Init+0xcc>
 800269a:	2b12      	cmp	r3, #18
 800269c:	d859      	bhi.n	8002752 <HAL_GPIO_Init+0x12e>
 800269e:	a201      	add	r2, pc, #4	; (adr r2, 80026a4 <HAL_GPIO_Init+0x80>)
 80026a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a4:	0800271f 	.word	0x0800271f
 80026a8:	080026f9 	.word	0x080026f9
 80026ac:	0800270b 	.word	0x0800270b
 80026b0:	0800274d 	.word	0x0800274d
 80026b4:	08002753 	.word	0x08002753
 80026b8:	08002753 	.word	0x08002753
 80026bc:	08002753 	.word	0x08002753
 80026c0:	08002753 	.word	0x08002753
 80026c4:	08002753 	.word	0x08002753
 80026c8:	08002753 	.word	0x08002753
 80026cc:	08002753 	.word	0x08002753
 80026d0:	08002753 	.word	0x08002753
 80026d4:	08002753 	.word	0x08002753
 80026d8:	08002753 	.word	0x08002753
 80026dc:	08002753 	.word	0x08002753
 80026e0:	08002753 	.word	0x08002753
 80026e4:	08002753 	.word	0x08002753
 80026e8:	08002701 	.word	0x08002701
 80026ec:	08002715 	.word	0x08002715
 80026f0:	4a79      	ldr	r2, [pc, #484]	; (80028d8 <HAL_GPIO_Init+0x2b4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026f6:	e02c      	b.n	8002752 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e029      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	3304      	adds	r3, #4
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e024      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	3308      	adds	r3, #8
 8002710:	623b      	str	r3, [r7, #32]
          break;
 8002712:	e01f      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	330c      	adds	r3, #12
 800271a:	623b      	str	r3, [r7, #32]
          break;
 800271c:	e01a      	b.n	8002754 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002726:	2304      	movs	r3, #4
 8002728:	623b      	str	r3, [r7, #32]
          break;
 800272a:	e013      	b.n	8002754 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d105      	bne.n	8002740 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002734:	2308      	movs	r3, #8
 8002736:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69fa      	ldr	r2, [r7, #28]
 800273c:	611a      	str	r2, [r3, #16]
          break;
 800273e:	e009      	b.n	8002754 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002740:	2308      	movs	r3, #8
 8002742:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	615a      	str	r2, [r3, #20]
          break;
 800274a:	e003      	b.n	8002754 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
          break;
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x130>
          break;
 8002752:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	d801      	bhi.n	800275e <HAL_GPIO_Init+0x13a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	e001      	b.n	8002762 <HAL_GPIO_Init+0x13e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3304      	adds	r3, #4
 8002762:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2bff      	cmp	r3, #255	; 0xff
 8002768:	d802      	bhi.n	8002770 <HAL_GPIO_Init+0x14c>
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0x152>
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	3b08      	subs	r3, #8
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	210f      	movs	r1, #15
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	6a39      	ldr	r1, [r7, #32]
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	431a      	orrs	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80b1 	beq.w	8002906 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027a4:	4b4d      	ldr	r3, [pc, #308]	; (80028dc <HAL_GPIO_Init+0x2b8>)
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_GPIO_Init+0x2b8>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6193      	str	r3, [r2, #24]
 80027b0:	4b4a      	ldr	r3, [pc, #296]	; (80028dc <HAL_GPIO_Init+0x2b8>)
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	60bb      	str	r3, [r7, #8]
 80027ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027bc:	4a48      	ldr	r2, [pc, #288]	; (80028e0 <HAL_GPIO_Init+0x2bc>)
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	089b      	lsrs	r3, r3, #2
 80027c2:	3302      	adds	r3, #2
 80027c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	220f      	movs	r2, #15
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4013      	ands	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a40      	ldr	r2, [pc, #256]	; (80028e4 <HAL_GPIO_Init+0x2c0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_GPIO_Init+0x1ec>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3f      	ldr	r2, [pc, #252]	; (80028e8 <HAL_GPIO_Init+0x2c4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00d      	beq.n	800280c <HAL_GPIO_Init+0x1e8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a3e      	ldr	r2, [pc, #248]	; (80028ec <HAL_GPIO_Init+0x2c8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d007      	beq.n	8002808 <HAL_GPIO_Init+0x1e4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3d      	ldr	r2, [pc, #244]	; (80028f0 <HAL_GPIO_Init+0x2cc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_GPIO_Init+0x1e0>
 8002800:	2303      	movs	r3, #3
 8002802:	e006      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 8002804:	2304      	movs	r3, #4
 8002806:	e004      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 8002808:	2302      	movs	r3, #2
 800280a:	e002      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <HAL_GPIO_Init+0x1ee>
 8002810:	2300      	movs	r3, #0
 8002812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002814:	f002 0203 	and.w	r2, r2, #3
 8002818:	0092      	lsls	r2, r2, #2
 800281a:	4093      	lsls	r3, r2
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002822:	492f      	ldr	r1, [pc, #188]	; (80028e0 <HAL_GPIO_Init+0x2bc>)
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d006      	beq.n	800284a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	492c      	ldr	r1, [pc, #176]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	43db      	mvns	r3, r3
 8002852:	4928      	ldr	r1, [pc, #160]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002854:	4013      	ands	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d006      	beq.n	8002872 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4922      	ldr	r1, [pc, #136]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	43db      	mvns	r3, r3
 800287a:	491e      	ldr	r1, [pc, #120]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 800287c:	4013      	ands	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	4918      	ldr	r1, [pc, #96]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]
 8002898:	e006      	b.n	80028a8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	43db      	mvns	r3, r3
 80028a2:	4914      	ldr	r1, [pc, #80]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d021      	beq.n	80028f8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	490e      	ldr	r1, [pc, #56]	; (80028f4 <HAL_GPIO_Init+0x2d0>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
 80028c0:	e021      	b.n	8002906 <HAL_GPIO_Init+0x2e2>
 80028c2:	bf00      	nop
 80028c4:	10320000 	.word	0x10320000
 80028c8:	10310000 	.word	0x10310000
 80028cc:	10220000 	.word	0x10220000
 80028d0:	10210000 	.word	0x10210000
 80028d4:	10120000 	.word	0x10120000
 80028d8:	10110000 	.word	0x10110000
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010000 	.word	0x40010000
 80028e4:	40010800 	.word	0x40010800
 80028e8:	40010c00 	.word	0x40010c00
 80028ec:	40011000 	.word	0x40011000
 80028f0:	40011400 	.word	0x40011400
 80028f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <HAL_GPIO_Init+0x304>)
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	43db      	mvns	r3, r3
 8002900:	4909      	ldr	r1, [pc, #36]	; (8002928 <HAL_GPIO_Init+0x304>)
 8002902:	4013      	ands	r3, r2
 8002904:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	fa22 f303 	lsr.w	r3, r2, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	f47f ae8e 	bne.w	8002638 <HAL_GPIO_Init+0x14>
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	372c      	adds	r7, #44	; 0x2c
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40010400 	.word	0x40010400

0800292c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
 8002938:	4613      	mov	r3, r2
 800293a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800293c:	787b      	ldrb	r3, [r7, #1]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002942:	887a      	ldrh	r2, [r7, #2]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002948:	e003      	b.n	8002952 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	041a      	lsls	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d006      	beq.n	8002980 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002972:	4a05      	ldr	r2, [pc, #20]	; (8002988 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 f806 	bl	800298c <HAL_GPIO_EXTI_Callback>
  }
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr

080029a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e12b      	b.n	8002c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fcb2 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a04:	f000 ffea 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 8002a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4a81      	ldr	r2, [pc, #516]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d807      	bhi.n	8002a24 <HAL_I2C_Init+0x84>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a80      	ldr	r2, [pc, #512]	; (8002c18 <HAL_I2C_Init+0x278>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	bf94      	ite	ls
 8002a1c:	2301      	movls	r3, #1
 8002a1e:	2300      	movhi	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	e006      	b.n	8002a32 <HAL_I2C_Init+0x92>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a7d      	ldr	r2, [pc, #500]	; (8002c1c <HAL_I2C_Init+0x27c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	bf94      	ite	ls
 8002a2c:	2301      	movls	r3, #1
 8002a2e:	2300      	movhi	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0e7      	b.n	8002c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a78      	ldr	r2, [pc, #480]	; (8002c20 <HAL_I2C_Init+0x280>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0c9b      	lsrs	r3, r3, #18
 8002a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d802      	bhi.n	8002a74 <HAL_I2C_Init+0xd4>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	3301      	adds	r3, #1
 8002a72:	e009      	b.n	8002a88 <HAL_I2C_Init+0xe8>
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	4a69      	ldr	r2, [pc, #420]	; (8002c24 <HAL_I2C_Init+0x284>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	3301      	adds	r3, #1
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	495c      	ldr	r1, [pc, #368]	; (8002c14 <HAL_I2C_Init+0x274>)
 8002aa4:	428b      	cmp	r3, r1
 8002aa6:	d819      	bhi.n	8002adc <HAL_I2C_Init+0x13c>
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1e59      	subs	r1, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab6:	1c59      	adds	r1, r3, #1
 8002ab8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002abc:	400b      	ands	r3, r1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_I2C_Init+0x138>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e59      	subs	r1, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad6:	e051      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002ad8:	2304      	movs	r3, #4
 8002ada:	e04f      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d111      	bne.n	8002b08 <HAL_I2C_Init+0x168>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf0c      	ite	eq
 8002b00:	2301      	moveq	r3, #1
 8002b02:	2300      	movne	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	e012      	b.n	8002b2e <HAL_I2C_Init+0x18e>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	0099      	lsls	r1, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1e:	3301      	adds	r3, #1
 8002b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Init+0x196>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e022      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10e      	bne.n	8002b5c <HAL_I2C_Init+0x1bc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1e58      	subs	r0, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	440b      	add	r3, r1
 8002b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b50:	3301      	adds	r3, #1
 8002b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5a:	e00f      	b.n	8002b7c <HAL_I2C_Init+0x1dc>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	1e58      	subs	r0, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	0099      	lsls	r1, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b72:	3301      	adds	r3, #1
 8002b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	6809      	ldr	r1, [r1, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002baa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6911      	ldr	r1, [r2, #16]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68d2      	ldr	r2, [r2, #12]
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	000186a0 	.word	0x000186a0
 8002c18:	001e847f 	.word	0x001e847f
 8002c1c:	003d08ff 	.word	0x003d08ff
 8002c20:	431bde83 	.word	0x431bde83
 8002c24:	10624dd3 	.word	0x10624dd3

08002c28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af02      	add	r7, sp, #8
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	461a      	mov	r2, r3
 8002c34:	460b      	mov	r3, r1
 8002c36:	817b      	strh	r3, [r7, #10]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7fe fdfc 	bl	8001838 <HAL_GetTick>
 8002c40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b20      	cmp	r3, #32
 8002c4c:	f040 80e0 	bne.w	8002e10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2319      	movs	r3, #25
 8002c56:	2201      	movs	r2, #1
 8002c58:	4970      	ldr	r1, [pc, #448]	; (8002e1c <HAL_I2C_Master_Transmit+0x1f4>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f964 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	e0d3      	b.n	8002e12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_I2C_Master_Transmit+0x50>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e0cc      	b.n	8002e12 <HAL_I2C_Master_Transmit+0x1ea>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d007      	beq.n	8002c9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2221      	movs	r2, #33	; 0x21
 8002cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2210      	movs	r2, #16
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	893a      	ldrh	r2, [r7, #8]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a50      	ldr	r2, [pc, #320]	; (8002e20 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ce0:	8979      	ldrh	r1, [r7, #10]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f89c 	bl	8002e24 <I2C_MasterRequestWrite>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e08d      	b.n	8002e12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d0c:	e066      	b.n	8002ddc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f9de 	bl	80030d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00d      	beq.n	8002d3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d107      	bne.n	8002d36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e06b      	b.n	8002e12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d11b      	bne.n	8002db0 <HAL_I2C_Master_Transmit+0x188>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d017      	beq.n	8002db0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	6a39      	ldr	r1, [r7, #32]
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f9ce 	bl	8003156 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00d      	beq.n	8002ddc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d107      	bne.n	8002dd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e01a      	b.n	8002e12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d194      	bne.n	8002d0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	00100002 	.word	0x00100002
 8002e20:	ffff0000 	.word	0xffff0000

08002e24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	460b      	mov	r3, r1
 8002e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d006      	beq.n	8002e4e <I2C_MasterRequestWrite+0x2a>
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d003      	beq.n	8002e4e <I2C_MasterRequestWrite+0x2a>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e4c:	d108      	bne.n	8002e60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e00b      	b.n	8002e78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	2b12      	cmp	r3, #18
 8002e66:	d107      	bne.n	8002e78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f84f 	bl	8002f28 <I2C_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00d      	beq.n	8002eac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9e:	d103      	bne.n	8002ea8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e035      	b.n	8002f18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb4:	d108      	bne.n	8002ec8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eb6:	897b      	ldrh	r3, [r7, #10]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e01b      	b.n	8002f00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec8:	897b      	ldrh	r3, [r7, #10]
 8002eca:	11db      	asrs	r3, r3, #7
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f063 030f 	orn	r3, r3, #15
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	490e      	ldr	r1, [pc, #56]	; (8002f20 <I2C_MasterRequestWrite+0xfc>)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f875 	bl	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e010      	b.n	8002f18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ef6:	897b      	ldrh	r3, [r7, #10]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4907      	ldr	r1, [pc, #28]	; (8002f24 <I2C_MasterRequestWrite+0x100>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f865 	bl	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	00010008 	.word	0x00010008
 8002f24:	00010002 	.word	0x00010002

08002f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f38:	e025      	b.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d021      	beq.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	f7fe fc79 	bl	8001838 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d302      	bcc.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d116      	bne.n	8002f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e023      	b.n	8002fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	0c1b      	lsrs	r3, r3, #16
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10d      	bne.n	8002fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	e00c      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	43da      	mvns	r2, r3
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	bf0c      	ite	eq
 8002fbe:	2301      	moveq	r3, #1
 8002fc0:	2300      	movne	r3, #0
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d0b6      	beq.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe4:	e051      	b.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ff4:	d123      	bne.n	800303e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800300e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0204 	orr.w	r2, r3, #4
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e046      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d021      	beq.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe fbf7 	bl	8001838 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e020      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10c      	bne.n	80030ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf14      	ite	ne
 80030a6:	2301      	movne	r3, #1
 80030a8:	2300      	moveq	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	e00b      	b.n	80030c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d18d      	bne.n	8002fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e0:	e02d      	b.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f878 	bl	80031d8 <I2C_IsAcknowledgeFailed>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e02d      	b.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f8:	d021      	beq.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7fe fb9d 	bl	8001838 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0220 	orr.w	r2, r3, #32
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e007      	b.n	800314e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d1ca      	bne.n	80030e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003162:	e02d      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f837 	bl	80031d8 <I2C_IsAcknowledgeFailed>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e02d      	b.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d021      	beq.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317c:	f7fe fb5c 	bl	8001838 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e007      	b.n	80031d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d1ca      	bne.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d11b      	bne.n	8003228 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e272      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8087 	beq.w	8003362 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b04      	cmp	r3, #4
 800325e:	d00c      	beq.n	800327a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003260:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d112      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
 800326c:	4b8c      	ldr	r3, [pc, #560]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003278:	d10b      	bne.n	8003292 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327a:	4b89      	ldr	r3, [pc, #548]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d06c      	beq.n	8003360 <HAL_RCC_OscConfig+0x12c>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d168      	bne.n	8003360 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e24c      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x76>
 800329c:	4b80      	ldr	r3, [pc, #512]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a7f      	ldr	r2, [pc, #508]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e02e      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0x98>
 80032b2:	4b7b      	ldr	r3, [pc, #492]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a7a      	ldr	r2, [pc, #488]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a77      	ldr	r2, [pc, #476]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0xbc>
 80032d6:	4b72      	ldr	r3, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a71      	ldr	r2, [pc, #452]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6e      	ldr	r2, [pc, #440]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xd4>
 80032f0:	4b6b      	ldr	r3, [pc, #428]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b68      	ldr	r3, [pc, #416]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a67      	ldr	r2, [pc, #412]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fa92 	bl	8001838 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fa8e 	bl	8001838 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e200      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5d      	ldr	r3, [pc, #372]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xe4>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fa7e 	bl	8001838 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fa7a 	bl	8001838 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1ec      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x10c>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336e:	4b4c      	ldr	r3, [pc, #304]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800337a:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
 8003386:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c0      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4939      	ldr	r1, [pc, #228]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <HAL_RCC_OscConfig+0x270>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe fa33 	bl	8001838 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe fa2f 	bl	8001838 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a1      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4927      	ldr	r1, [pc, #156]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b26      	ldr	r3, [pc, #152]	; (80034a4 <HAL_RCC_OscConfig+0x270>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fa12 	bl	8001838 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe fa0e 	bl	8001838 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e180      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d03a      	beq.n	80034b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d019      	beq.n	800347e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003450:	f7fe f9f2 	bl	8001838 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe f9ee 	bl	8001838 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e160      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <HAL_RCC_OscConfig+0x26c>)
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f000 fad8 	bl	8003a2c <RCC_Delay>
 800347c:	e01c      	b.n	80034b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_RCC_OscConfig+0x274>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003484:	f7fe f9d8 	bl	8001838 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	e00f      	b.n	80034ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800348c:	f7fe f9d4 	bl	8001838 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d908      	bls.n	80034ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e146      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	42420000 	.word	0x42420000
 80034a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ac:	4b92      	ldr	r3, [pc, #584]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e9      	bne.n	800348c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 80a6 	beq.w	8003612 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b8b      	ldr	r3, [pc, #556]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10d      	bne.n	80034f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	4b88      	ldr	r3, [pc, #544]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	4a87      	ldr	r2, [pc, #540]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e0:	61d3      	str	r3, [r2, #28]
 80034e2:	4b85      	ldr	r3, [pc, #532]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ee:	2301      	movs	r3, #1
 80034f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f2:	4b82      	ldr	r3, [pc, #520]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d118      	bne.n	8003530 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fe:	4b7f      	ldr	r3, [pc, #508]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7e      	ldr	r2, [pc, #504]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350a:	f7fe f995 	bl	8001838 <HAL_GetTick>
 800350e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003512:	f7fe f991 	bl	8001838 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b64      	cmp	r3, #100	; 0x64
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e103      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003524:	4b75      	ldr	r3, [pc, #468]	; (80036fc <HAL_RCC_OscConfig+0x4c8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x312>
 8003538:	4b6f      	ldr	r3, [pc, #444]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a6e      	ldr	r2, [pc, #440]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e02d      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x334>
 800354e:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	4a69      	ldr	r2, [pc, #420]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6213      	str	r3, [r2, #32]
 800355a:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a66      	ldr	r2, [pc, #408]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	f023 0304 	bic.w	r3, r3, #4
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	e01c      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d10c      	bne.n	800358a <HAL_RCC_OscConfig+0x356>
 8003570:	4b61      	ldr	r3, [pc, #388]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4a60      	ldr	r2, [pc, #384]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6213      	str	r3, [r2, #32]
 800357c:	4b5e      	ldr	r3, [pc, #376]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4a5d      	ldr	r2, [pc, #372]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	e00b      	b.n	80035a2 <HAL_RCC_OscConfig+0x36e>
 800358a:	4b5b      	ldr	r3, [pc, #364]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	4a5a      	ldr	r2, [pc, #360]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	6213      	str	r3, [r2, #32]
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a57      	ldr	r2, [pc, #348]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0304 	bic.w	r3, r3, #4
 80035a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d015      	beq.n	80035d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035aa:	f7fe f945 	bl	8001838 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fe f941 	bl	8001838 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0b1      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ee      	beq.n	80035b2 <HAL_RCC_OscConfig+0x37e>
 80035d4:	e014      	b.n	8003600 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d6:	f7fe f92f 	bl	8001838 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035de:	f7fe f92b 	bl	8001838 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e09b      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035f4:	4b40      	ldr	r3, [pc, #256]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ee      	bne.n	80035de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003600:	7dfb      	ldrb	r3, [r7, #23]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d105      	bne.n	8003612 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	4b3c      	ldr	r3, [pc, #240]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	4a3b      	ldr	r2, [pc, #236]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003610:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8087 	beq.w	800372a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800361c:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 030c 	and.w	r3, r3, #12
 8003624:	2b08      	cmp	r3, #8
 8003626:	d061      	beq.n	80036ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d146      	bne.n	80036be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003636:	f7fe f8ff 	bl	8001838 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe f8fb 	bl	8001838 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e06d      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003650:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f0      	bne.n	800363e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d108      	bne.n	8003678 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4921      	ldr	r1, [pc, #132]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a19      	ldr	r1, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	430b      	orrs	r3, r1
 800368a:	491b      	ldr	r1, [pc, #108]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe f8cf 	bl	8001838 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fe f8cb 	bl	8001838 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e03d      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x46a>
 80036bc:	e035      	b.n	800372a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe f8b8 	bl	8001838 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fe f8b4 	bl	8001838 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e026      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x498>
 80036ea:	e01e      	b.n	800372a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e019      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x500>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	429a      	cmp	r2, r3
 8003716:	d106      	bne.n	8003726 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40021000 	.word	0x40021000

08003738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0d0      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800374c:	4b6a      	ldr	r3, [pc, #424]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	429a      	cmp	r2, r3
 8003758:	d910      	bls.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375a:	4b67      	ldr	r3, [pc, #412]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f023 0207 	bic.w	r2, r3, #7
 8003762:	4965      	ldr	r1, [pc, #404]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b63      	ldr	r3, [pc, #396]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b8      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a58      	ldr	r2, [pc, #352]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800379e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b53      	ldr	r3, [pc, #332]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a52      	ldr	r2, [pc, #328]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80037b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b50      	ldr	r3, [pc, #320]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494d      	ldr	r1, [pc, #308]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d040      	beq.n	8003858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d115      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07f      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d107      	bne.n	8003806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d109      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e073      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003816:	4b39      	ldr	r3, [pc, #228]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f023 0203 	bic.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	4936      	ldr	r1, [pc, #216]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003828:	f7fe f806 	bl	8001838 <HAL_GetTick>
 800382c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	e00a      	b.n	8003846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003830:	f7fe f802 	bl	8001838 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	; 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e053      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003846:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 020c 	and.w	r2, r3, #12
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	429a      	cmp	r2, r3
 8003856:	d1eb      	bne.n	8003830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003858:	4b27      	ldr	r3, [pc, #156]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d210      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4922      	ldr	r1, [pc, #136]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e032      	b.n	80038ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4916      	ldr	r1, [pc, #88]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490e      	ldr	r1, [pc, #56]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f821 	bl	800390c <HAL_RCC_GetSysClockFreq>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b0b      	ldr	r3, [pc, #44]	; (80038fc <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	490a      	ldr	r1, [pc, #40]	; (8003900 <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	5ccb      	ldrb	r3, [r1, r3]
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	4a09      	ldr	r2, [pc, #36]	; (8003904 <HAL_RCC_ClockConfig+0x1cc>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd ff64 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40021000 	.word	0x40021000
 8003900:	08007420 	.word	0x08007420
 8003904:	20000004 	.word	0x20000004
 8003908:	20000008 	.word	0x20000008

0800390c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800390c:	b490      	push	{r4, r7}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003912:	4b29      	ldr	r3, [pc, #164]	; (80039b8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003914:	1d3c      	adds	r4, r7, #4
 8003916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800391c:	f240 2301 	movw	r3, #513	; 0x201
 8003920:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	2300      	movs	r3, #0
 8003928:	61bb      	str	r3, [r7, #24]
 800392a:	2300      	movs	r3, #0
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	2300      	movs	r3, #0
 8003930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b04      	cmp	r3, #4
 8003944:	d002      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x40>
 8003946:	2b08      	cmp	r3, #8
 8003948:	d003      	beq.n	8003952 <HAL_RCC_GetSysClockFreq+0x46>
 800394a:	e02b      	b.n	80039a4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800394e:	623b      	str	r3, [r7, #32]
      break;
 8003950:	e02b      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	0c9b      	lsrs	r3, r3, #18
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	3328      	adds	r3, #40	; 0x28
 800395c:	443b      	add	r3, r7
 800395e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003962:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d012      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	0c5b      	lsrs	r3, r3, #17
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	3328      	adds	r3, #40	; 0x28
 800397a:	443b      	add	r3, r7
 800397c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003980:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003986:	fb03 f202 	mul.w	r2, r3, r2
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	e004      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4a0b      	ldr	r2, [pc, #44]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003998:	fb02 f303 	mul.w	r3, r2, r3
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	623b      	str	r3, [r7, #32]
      break;
 80039a2:	e002      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80039a6:	623b      	str	r3, [r7, #32]
      break;
 80039a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039aa:	6a3b      	ldr	r3, [r7, #32]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3728      	adds	r7, #40	; 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc90      	pop	{r4, r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	08007410 	.word	0x08007410
 80039bc:	40021000 	.word	0x40021000
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	003d0900 	.word	0x003d0900

080039c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b02      	ldr	r3, [pc, #8]	; (80039d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000004 	.word	0x20000004

080039dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039e0:	f7ff fff2 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4903      	ldr	r1, [pc, #12]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08007430 	.word	0x08007430

08003a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a08:	f7ff ffde 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08007430 	.word	0x08007430

08003a2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a34:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <RCC_Delay+0x34>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <RCC_Delay+0x38>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	0a5b      	lsrs	r3, r3, #9
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a48:	bf00      	nop
  }
  while (Delay --);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1e5a      	subs	r2, r3, #1
 8003a4e:	60fa      	str	r2, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f9      	bne.n	8003a48 <RCC_Delay+0x1c>
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	20000004 	.word	0x20000004
 8003a64:	10624dd3 	.word	0x10624dd3

08003a68 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d07d      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10d      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a94:	4b4c      	ldr	r3, [pc, #304]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	4a4b      	ldr	r2, [pc, #300]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	61d3      	str	r3, [r2, #28]
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aac:	2301      	movs	r3, #1
 8003aae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab0:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d118      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003abc:	4b43      	ldr	r3, [pc, #268]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a42      	ldr	r2, [pc, #264]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ac8:	f7fd feb6 	bl	8001838 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	e008      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ad0:	f7fd feb2 	bl	8001838 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e06d      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	; (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003aee:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d02e      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d027      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b0c:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b14:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1c:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b22:	4a29      	ldr	r2, [pc, #164]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d014      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fd fe81 	bl	8001838 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3a:	f7fd fe7d 	bl	8001838 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e036      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0ee      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b5c:	4b1a      	ldr	r3, [pc, #104]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4917      	ldr	r1, [pc, #92]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b6e:	7dfb      	ldrb	r3, [r7, #23]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	490b      	ldr	r1, [pc, #44]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003baa:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	4904      	ldr	r1, [pc, #16]	; (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	42420440 	.word	0x42420440

08003bd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e041      	b.n	8003c6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fbd6 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4610      	mov	r0, r2
 8003c14:	f000 fa7a 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d001      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e03a      	b.n	8003d02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a18      	ldr	r2, [pc, #96]	; (8003d0c <HAL_TIM_Base_Start_IT+0x98>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00e      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x58>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cb6:	d009      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x58>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d004      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0x58>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <HAL_TIM_Base_Start_IT+0xa0>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d111      	bne.n	8003cf0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b06      	cmp	r3, #6
 8003cdc:	d010      	beq.n	8003d00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cee:	e007      	b.n	8003d00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0201 	orr.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800

08003d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d122      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d11b      	bne.n	8003d74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0202 	mvn.w	r2, #2
 8003d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f9ba 	bl	80040d4 <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f9ad 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f9bc 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d122      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f06f 0204 	mvn.w	r2, #4
 8003d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f990 	bl	80040d4 <HAL_TIM_IC_CaptureCallback>
 8003db4:	e005      	b.n	8003dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f983 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f992 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d122      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f003 0308 	and.w	r3, r3, #8
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d11b      	bne.n	8003e1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f06f 0208 	mvn.w	r2, #8
 8003dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2204      	movs	r2, #4
 8003df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69db      	ldr	r3, [r3, #28]
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f966 	bl	80040d4 <HAL_TIM_IC_CaptureCallback>
 8003e08:	e005      	b.n	8003e16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f959 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f968 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d122      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d11b      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2208      	movs	r2, #8
 8003e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f93c 	bl	80040d4 <HAL_TIM_IC_CaptureCallback>
 8003e5c:	e005      	b.n	8003e6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f92f 	bl	80040c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f93e 	bl	80040e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d10e      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0201 	mvn.w	r2, #1
 8003e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f90a 	bl	80040b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d10e      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d107      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa81 	bl	80043ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b40      	cmp	r3, #64	; 0x40
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f902 	bl	80040f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d10e      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0320 	and.w	r3, r3, #32
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	d107      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0220 	mvn.w	r2, #32
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fa4c 	bl	80043b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIM_ConfigClockSource+0x18>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e0b3      	b.n	80040a8 <HAL_TIM_ConfigClockSource+0x180>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f78:	d03e      	beq.n	8003ff8 <HAL_TIM_ConfigClockSource+0xd0>
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7e:	f200 8087 	bhi.w	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	f000 8085 	beq.w	8004094 <HAL_TIM_ConfigClockSource+0x16c>
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	d87f      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003f90:	2b70      	cmp	r3, #112	; 0x70
 8003f92:	d01a      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0xa2>
 8003f94:	2b70      	cmp	r3, #112	; 0x70
 8003f96:	d87b      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d050      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x116>
 8003f9c:	2b60      	cmp	r3, #96	; 0x60
 8003f9e:	d877      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003fa0:	2b50      	cmp	r3, #80	; 0x50
 8003fa2:	d03c      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xf6>
 8003fa4:	2b50      	cmp	r3, #80	; 0x50
 8003fa6:	d873      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d058      	beq.n	800405e <HAL_TIM_ConfigClockSource+0x136>
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d86f      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003fb0:	2b30      	cmp	r3, #48	; 0x30
 8003fb2:	d064      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x156>
 8003fb4:	2b30      	cmp	r3, #48	; 0x30
 8003fb6:	d86b      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d060      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x156>
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	d867      	bhi.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d05c      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x156>
 8003fc4:	2b10      	cmp	r3, #16
 8003fc6:	d05a      	beq.n	800407e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fc8:	e062      	b.n	8004090 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	6899      	ldr	r1, [r3, #8]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f000 f970 	bl	80042be <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	609a      	str	r2, [r3, #8]
      break;
 8003ff6:	e04e      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	6899      	ldr	r1, [r3, #8]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f000 f959 	bl	80042be <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800401a:	609a      	str	r2, [r3, #8]
      break;
 800401c:	e03b      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6859      	ldr	r1, [r3, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f000 f8d0 	bl	80041d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2150      	movs	r1, #80	; 0x50
 8004036:	4618      	mov	r0, r3
 8004038:	f000 f927 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 800403c:	e02b      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6859      	ldr	r1, [r3, #4]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	461a      	mov	r2, r3
 800404c:	f000 f8ee 	bl	800422c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2160      	movs	r1, #96	; 0x60
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f917 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 800405c:	e01b      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	461a      	mov	r2, r3
 800406c:	f000 f8b0 	bl	80041d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2140      	movs	r1, #64	; 0x40
 8004076:	4618      	mov	r0, r3
 8004078:	f000 f907 	bl	800428a <TIM_ITRx_SetConfig>
      break;
 800407c:	e00b      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f000 f8fe 	bl	800428a <TIM_ITRx_SetConfig>
        break;
 800408e:	e002      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004094:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
	...

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a25      	ldr	r2, [pc, #148]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800

080041d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0201 	bic.w	r2, r3, #1
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f023 030a 	bic.w	r3, r3, #10
 800420c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f023 0210 	bic.w	r2, r3, #16
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004256:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	031b      	lsls	r3, r3, #12
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004268:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f043 0307 	orr.w	r3, r3, #7
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	609a      	str	r2, [r3, #8]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr

080042be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042be:	b480      	push	{r7}
 80042c0:	b087      	sub	sp, #28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	021a      	lsls	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	609a      	str	r2, [r3, #8]
}
 80042f2:	bf00      	nop
 80042f4:	371c      	adds	r7, #28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004310:	2302      	movs	r3, #2
 8004312:	e046      	b.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a16      	ldr	r2, [pc, #88]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00e      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004360:	d009      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a12      	ldr	r2, [pc, #72]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a10      	ldr	r2, [pc, #64]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10c      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	4313      	orrs	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800

080043b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e03f      	b.n	800446e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d106      	bne.n	8004408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fc fff8 	bl	80013f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2224      	movs	r2, #36	; 0x24
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800441e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f829 	bl	8004478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2220      	movs	r2, #32
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044b2:	f023 030c 	bic.w	r3, r3, #12
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	430b      	orrs	r3, r1
 80044be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2c      	ldr	r2, [pc, #176]	; (800458c <UART_SetConfig+0x114>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d103      	bne.n	80044e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044e0:	f7ff fa90 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	e002      	b.n	80044ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044e8:	f7ff fa78 	bl	80039dc <HAL_RCC_GetPCLK1Freq>
 80044ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	4a22      	ldr	r2, [pc, #136]	; (8004590 <UART_SetConfig+0x118>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	0119      	lsls	r1, r3, #4
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009a      	lsls	r2, r3, #2
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fbb2 f2f3 	udiv	r2, r2, r3
 8004524:	4b1a      	ldr	r3, [pc, #104]	; (8004590 <UART_SetConfig+0x118>)
 8004526:	fba3 0302 	umull	r0, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2064      	movs	r0, #100	; 0x64
 800452e:	fb00 f303 	mul.w	r3, r0, r3
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <UART_SetConfig+0x118>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004544:	4419      	add	r1, r3
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	009a      	lsls	r2, r3, #2
 8004550:	441a      	add	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	fbb2 f2f3 	udiv	r2, r2, r3
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <UART_SetConfig+0x118>)
 800455e:	fba3 0302 	umull	r0, r3, r3, r2
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2064      	movs	r0, #100	; 0x64
 8004566:	fb00 f303 	mul.w	r3, r0, r3
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	3332      	adds	r3, #50	; 0x32
 8004570:	4a07      	ldr	r2, [pc, #28]	; (8004590 <UART_SetConfig+0x118>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	440a      	add	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40013800 	.word	0x40013800
 8004590:	51eb851f 	.word	0x51eb851f

08004594 <__errno>:
 8004594:	4b01      	ldr	r3, [pc, #4]	; (800459c <__errno+0x8>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000010 	.word	0x20000010

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4d0c      	ldr	r5, [pc, #48]	; (80045d8 <__libc_init_array+0x38>)
 80045a6:	4c0d      	ldr	r4, [pc, #52]	; (80045dc <__libc_init_array+0x3c>)
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	f002 fefa 	bl	80073a8 <_init>
 80045b4:	2600      	movs	r6, #0
 80045b6:	4d0a      	ldr	r5, [pc, #40]	; (80045e0 <__libc_init_array+0x40>)
 80045b8:	4c0a      	ldr	r4, [pc, #40]	; (80045e4 <__libc_init_array+0x44>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08007814 	.word	0x08007814
 80045dc:	08007814 	.word	0x08007814
 80045e0:	08007814 	.word	0x08007814
 80045e4:	08007818 	.word	0x08007818

080045e8 <memset>:
 80045e8:	4603      	mov	r3, r0
 80045ea:	4402      	add	r2, r0
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d100      	bne.n	80045f2 <memset+0xa>
 80045f0:	4770      	bx	lr
 80045f2:	f803 1b01 	strb.w	r1, [r3], #1
 80045f6:	e7f9      	b.n	80045ec <memset+0x4>

080045f8 <__cvt>:
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fe:	461f      	mov	r7, r3
 8004600:	bfbb      	ittet	lt
 8004602:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004606:	461f      	movlt	r7, r3
 8004608:	2300      	movge	r3, #0
 800460a:	232d      	movlt	r3, #45	; 0x2d
 800460c:	b088      	sub	sp, #32
 800460e:	4614      	mov	r4, r2
 8004610:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004612:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004614:	7013      	strb	r3, [r2, #0]
 8004616:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004618:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800461c:	f023 0820 	bic.w	r8, r3, #32
 8004620:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004624:	d005      	beq.n	8004632 <__cvt+0x3a>
 8004626:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800462a:	d100      	bne.n	800462e <__cvt+0x36>
 800462c:	3501      	adds	r5, #1
 800462e:	2302      	movs	r3, #2
 8004630:	e000      	b.n	8004634 <__cvt+0x3c>
 8004632:	2303      	movs	r3, #3
 8004634:	aa07      	add	r2, sp, #28
 8004636:	9204      	str	r2, [sp, #16]
 8004638:	aa06      	add	r2, sp, #24
 800463a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800463e:	e9cd 3500 	strd	r3, r5, [sp]
 8004642:	4622      	mov	r2, r4
 8004644:	463b      	mov	r3, r7
 8004646:	f000 fce3 	bl	8005010 <_dtoa_r>
 800464a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800464e:	4606      	mov	r6, r0
 8004650:	d102      	bne.n	8004658 <__cvt+0x60>
 8004652:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004654:	07db      	lsls	r3, r3, #31
 8004656:	d522      	bpl.n	800469e <__cvt+0xa6>
 8004658:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800465c:	eb06 0905 	add.w	r9, r6, r5
 8004660:	d110      	bne.n	8004684 <__cvt+0x8c>
 8004662:	7833      	ldrb	r3, [r6, #0]
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d10a      	bne.n	800467e <__cvt+0x86>
 8004668:	2200      	movs	r2, #0
 800466a:	2300      	movs	r3, #0
 800466c:	4620      	mov	r0, r4
 800466e:	4639      	mov	r1, r7
 8004670:	f7fc f99a 	bl	80009a8 <__aeabi_dcmpeq>
 8004674:	b918      	cbnz	r0, 800467e <__cvt+0x86>
 8004676:	f1c5 0501 	rsb	r5, r5, #1
 800467a:	f8ca 5000 	str.w	r5, [sl]
 800467e:	f8da 3000 	ldr.w	r3, [sl]
 8004682:	4499      	add	r9, r3
 8004684:	2200      	movs	r2, #0
 8004686:	2300      	movs	r3, #0
 8004688:	4620      	mov	r0, r4
 800468a:	4639      	mov	r1, r7
 800468c:	f7fc f98c 	bl	80009a8 <__aeabi_dcmpeq>
 8004690:	b108      	cbz	r0, 8004696 <__cvt+0x9e>
 8004692:	f8cd 901c 	str.w	r9, [sp, #28]
 8004696:	2230      	movs	r2, #48	; 0x30
 8004698:	9b07      	ldr	r3, [sp, #28]
 800469a:	454b      	cmp	r3, r9
 800469c:	d307      	bcc.n	80046ae <__cvt+0xb6>
 800469e:	4630      	mov	r0, r6
 80046a0:	9b07      	ldr	r3, [sp, #28]
 80046a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80046a4:	1b9b      	subs	r3, r3, r6
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	b008      	add	sp, #32
 80046aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ae:	1c59      	adds	r1, r3, #1
 80046b0:	9107      	str	r1, [sp, #28]
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	e7f0      	b.n	8004698 <__cvt+0xa0>

080046b6 <__exponent>:
 80046b6:	4603      	mov	r3, r0
 80046b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ba:	2900      	cmp	r1, #0
 80046bc:	f803 2b02 	strb.w	r2, [r3], #2
 80046c0:	bfb6      	itet	lt
 80046c2:	222d      	movlt	r2, #45	; 0x2d
 80046c4:	222b      	movge	r2, #43	; 0x2b
 80046c6:	4249      	neglt	r1, r1
 80046c8:	2909      	cmp	r1, #9
 80046ca:	7042      	strb	r2, [r0, #1]
 80046cc:	dd2b      	ble.n	8004726 <__exponent+0x70>
 80046ce:	f10d 0407 	add.w	r4, sp, #7
 80046d2:	46a4      	mov	ip, r4
 80046d4:	270a      	movs	r7, #10
 80046d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80046da:	460a      	mov	r2, r1
 80046dc:	46a6      	mov	lr, r4
 80046de:	fb07 1516 	mls	r5, r7, r6, r1
 80046e2:	2a63      	cmp	r2, #99	; 0x63
 80046e4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80046e8:	4631      	mov	r1, r6
 80046ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80046ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80046f2:	dcf0      	bgt.n	80046d6 <__exponent+0x20>
 80046f4:	3130      	adds	r1, #48	; 0x30
 80046f6:	f1ae 0502 	sub.w	r5, lr, #2
 80046fa:	f804 1c01 	strb.w	r1, [r4, #-1]
 80046fe:	4629      	mov	r1, r5
 8004700:	1c44      	adds	r4, r0, #1
 8004702:	4561      	cmp	r1, ip
 8004704:	d30a      	bcc.n	800471c <__exponent+0x66>
 8004706:	f10d 0209 	add.w	r2, sp, #9
 800470a:	eba2 020e 	sub.w	r2, r2, lr
 800470e:	4565      	cmp	r5, ip
 8004710:	bf88      	it	hi
 8004712:	2200      	movhi	r2, #0
 8004714:	4413      	add	r3, r2
 8004716:	1a18      	subs	r0, r3, r0
 8004718:	b003      	add	sp, #12
 800471a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004720:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004724:	e7ed      	b.n	8004702 <__exponent+0x4c>
 8004726:	2330      	movs	r3, #48	; 0x30
 8004728:	3130      	adds	r1, #48	; 0x30
 800472a:	7083      	strb	r3, [r0, #2]
 800472c:	70c1      	strb	r1, [r0, #3]
 800472e:	1d03      	adds	r3, r0, #4
 8004730:	e7f1      	b.n	8004716 <__exponent+0x60>
	...

08004734 <_printf_float>:
 8004734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004738:	b091      	sub	sp, #68	; 0x44
 800473a:	460c      	mov	r4, r1
 800473c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004740:	4616      	mov	r6, r2
 8004742:	461f      	mov	r7, r3
 8004744:	4605      	mov	r5, r0
 8004746:	f001 fa51 	bl	8005bec <_localeconv_r>
 800474a:	6803      	ldr	r3, [r0, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	9309      	str	r3, [sp, #36]	; 0x24
 8004750:	f7fb fcfe 	bl	8000150 <strlen>
 8004754:	2300      	movs	r3, #0
 8004756:	930e      	str	r3, [sp, #56]	; 0x38
 8004758:	f8d8 3000 	ldr.w	r3, [r8]
 800475c:	900a      	str	r0, [sp, #40]	; 0x28
 800475e:	3307      	adds	r3, #7
 8004760:	f023 0307 	bic.w	r3, r3, #7
 8004764:	f103 0208 	add.w	r2, r3, #8
 8004768:	f894 9018 	ldrb.w	r9, [r4, #24]
 800476c:	f8d4 b000 	ldr.w	fp, [r4]
 8004770:	f8c8 2000 	str.w	r2, [r8]
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800477c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004780:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004784:	930b      	str	r3, [sp, #44]	; 0x2c
 8004786:	f04f 32ff 	mov.w	r2, #4294967295
 800478a:	4640      	mov	r0, r8
 800478c:	4b9c      	ldr	r3, [pc, #624]	; (8004a00 <_printf_float+0x2cc>)
 800478e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004790:	f7fc f93c 	bl	8000a0c <__aeabi_dcmpun>
 8004794:	bb70      	cbnz	r0, 80047f4 <_printf_float+0xc0>
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	4640      	mov	r0, r8
 800479c:	4b98      	ldr	r3, [pc, #608]	; (8004a00 <_printf_float+0x2cc>)
 800479e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047a0:	f7fc f916 	bl	80009d0 <__aeabi_dcmple>
 80047a4:	bb30      	cbnz	r0, 80047f4 <_printf_float+0xc0>
 80047a6:	2200      	movs	r2, #0
 80047a8:	2300      	movs	r3, #0
 80047aa:	4640      	mov	r0, r8
 80047ac:	4651      	mov	r1, sl
 80047ae:	f7fc f905 	bl	80009bc <__aeabi_dcmplt>
 80047b2:	b110      	cbz	r0, 80047ba <_printf_float+0x86>
 80047b4:	232d      	movs	r3, #45	; 0x2d
 80047b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ba:	4b92      	ldr	r3, [pc, #584]	; (8004a04 <_printf_float+0x2d0>)
 80047bc:	4892      	ldr	r0, [pc, #584]	; (8004a08 <_printf_float+0x2d4>)
 80047be:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80047c2:	bf94      	ite	ls
 80047c4:	4698      	movls	r8, r3
 80047c6:	4680      	movhi	r8, r0
 80047c8:	2303      	movs	r3, #3
 80047ca:	f04f 0a00 	mov.w	sl, #0
 80047ce:	6123      	str	r3, [r4, #16]
 80047d0:	f02b 0304 	bic.w	r3, fp, #4
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	4633      	mov	r3, r6
 80047d8:	4621      	mov	r1, r4
 80047da:	4628      	mov	r0, r5
 80047dc:	9700      	str	r7, [sp, #0]
 80047de:	aa0f      	add	r2, sp, #60	; 0x3c
 80047e0:	f000 f9d4 	bl	8004b8c <_printf_common>
 80047e4:	3001      	adds	r0, #1
 80047e6:	f040 8090 	bne.w	800490a <_printf_float+0x1d6>
 80047ea:	f04f 30ff 	mov.w	r0, #4294967295
 80047ee:	b011      	add	sp, #68	; 0x44
 80047f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f4:	4642      	mov	r2, r8
 80047f6:	4653      	mov	r3, sl
 80047f8:	4640      	mov	r0, r8
 80047fa:	4651      	mov	r1, sl
 80047fc:	f7fc f906 	bl	8000a0c <__aeabi_dcmpun>
 8004800:	b148      	cbz	r0, 8004816 <_printf_float+0xe2>
 8004802:	f1ba 0f00 	cmp.w	sl, #0
 8004806:	bfb8      	it	lt
 8004808:	232d      	movlt	r3, #45	; 0x2d
 800480a:	4880      	ldr	r0, [pc, #512]	; (8004a0c <_printf_float+0x2d8>)
 800480c:	bfb8      	it	lt
 800480e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004812:	4b7f      	ldr	r3, [pc, #508]	; (8004a10 <_printf_float+0x2dc>)
 8004814:	e7d3      	b.n	80047be <_printf_float+0x8a>
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	d142      	bne.n	80048a6 <_printf_float+0x172>
 8004820:	2306      	movs	r3, #6
 8004822:	6063      	str	r3, [r4, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	9206      	str	r2, [sp, #24]
 8004828:	aa0e      	add	r2, sp, #56	; 0x38
 800482a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800482e:	aa0d      	add	r2, sp, #52	; 0x34
 8004830:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004834:	9203      	str	r2, [sp, #12]
 8004836:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800483a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	4642      	mov	r2, r8
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4628      	mov	r0, r5
 8004848:	4653      	mov	r3, sl
 800484a:	910b      	str	r1, [sp, #44]	; 0x2c
 800484c:	f7ff fed4 	bl	80045f8 <__cvt>
 8004850:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004852:	4680      	mov	r8, r0
 8004854:	2947      	cmp	r1, #71	; 0x47
 8004856:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004858:	d108      	bne.n	800486c <_printf_float+0x138>
 800485a:	1cc8      	adds	r0, r1, #3
 800485c:	db02      	blt.n	8004864 <_printf_float+0x130>
 800485e:	6863      	ldr	r3, [r4, #4]
 8004860:	4299      	cmp	r1, r3
 8004862:	dd40      	ble.n	80048e6 <_printf_float+0x1b2>
 8004864:	f1a9 0902 	sub.w	r9, r9, #2
 8004868:	fa5f f989 	uxtb.w	r9, r9
 800486c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004870:	d81f      	bhi.n	80048b2 <_printf_float+0x17e>
 8004872:	464a      	mov	r2, r9
 8004874:	3901      	subs	r1, #1
 8004876:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800487a:	910d      	str	r1, [sp, #52]	; 0x34
 800487c:	f7ff ff1b 	bl	80046b6 <__exponent>
 8004880:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004882:	4682      	mov	sl, r0
 8004884:	1813      	adds	r3, r2, r0
 8004886:	2a01      	cmp	r2, #1
 8004888:	6123      	str	r3, [r4, #16]
 800488a:	dc02      	bgt.n	8004892 <_printf_float+0x15e>
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	07d2      	lsls	r2, r2, #31
 8004890:	d501      	bpl.n	8004896 <_printf_float+0x162>
 8004892:	3301      	adds	r3, #1
 8004894:	6123      	str	r3, [r4, #16]
 8004896:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800489a:	2b00      	cmp	r3, #0
 800489c:	d09b      	beq.n	80047d6 <_printf_float+0xa2>
 800489e:	232d      	movs	r3, #45	; 0x2d
 80048a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a4:	e797      	b.n	80047d6 <_printf_float+0xa2>
 80048a6:	2947      	cmp	r1, #71	; 0x47
 80048a8:	d1bc      	bne.n	8004824 <_printf_float+0xf0>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ba      	bne.n	8004824 <_printf_float+0xf0>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e7b7      	b.n	8004822 <_printf_float+0xee>
 80048b2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80048b6:	d118      	bne.n	80048ea <_printf_float+0x1b6>
 80048b8:	2900      	cmp	r1, #0
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	dd0b      	ble.n	80048d6 <_printf_float+0x1a2>
 80048be:	6121      	str	r1, [r4, #16]
 80048c0:	b913      	cbnz	r3, 80048c8 <_printf_float+0x194>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	07d0      	lsls	r0, r2, #31
 80048c6:	d502      	bpl.n	80048ce <_printf_float+0x19a>
 80048c8:	3301      	adds	r3, #1
 80048ca:	440b      	add	r3, r1
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	f04f 0a00 	mov.w	sl, #0
 80048d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80048d4:	e7df      	b.n	8004896 <_printf_float+0x162>
 80048d6:	b913      	cbnz	r3, 80048de <_printf_float+0x1aa>
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	07d2      	lsls	r2, r2, #31
 80048dc:	d501      	bpl.n	80048e2 <_printf_float+0x1ae>
 80048de:	3302      	adds	r3, #2
 80048e0:	e7f4      	b.n	80048cc <_printf_float+0x198>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e7f2      	b.n	80048cc <_printf_float+0x198>
 80048e6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80048ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ec:	4299      	cmp	r1, r3
 80048ee:	db05      	blt.n	80048fc <_printf_float+0x1c8>
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	6121      	str	r1, [r4, #16]
 80048f4:	07d8      	lsls	r0, r3, #31
 80048f6:	d5ea      	bpl.n	80048ce <_printf_float+0x19a>
 80048f8:	1c4b      	adds	r3, r1, #1
 80048fa:	e7e7      	b.n	80048cc <_printf_float+0x198>
 80048fc:	2900      	cmp	r1, #0
 80048fe:	bfcc      	ite	gt
 8004900:	2201      	movgt	r2, #1
 8004902:	f1c1 0202 	rsble	r2, r1, #2
 8004906:	4413      	add	r3, r2
 8004908:	e7e0      	b.n	80048cc <_printf_float+0x198>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	055a      	lsls	r2, r3, #21
 800490e:	d407      	bmi.n	8004920 <_printf_float+0x1ec>
 8004910:	6923      	ldr	r3, [r4, #16]
 8004912:	4642      	mov	r2, r8
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	d12b      	bne.n	8004976 <_printf_float+0x242>
 800491e:	e764      	b.n	80047ea <_printf_float+0xb6>
 8004920:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004924:	f240 80dd 	bls.w	8004ae2 <_printf_float+0x3ae>
 8004928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800492c:	2200      	movs	r2, #0
 800492e:	2300      	movs	r3, #0
 8004930:	f7fc f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8004934:	2800      	cmp	r0, #0
 8004936:	d033      	beq.n	80049a0 <_printf_float+0x26c>
 8004938:	2301      	movs	r3, #1
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	4a35      	ldr	r2, [pc, #212]	; (8004a14 <_printf_float+0x2e0>)
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	f43f af51 	beq.w	80047ea <_printf_float+0xb6>
 8004948:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800494c:	429a      	cmp	r2, r3
 800494e:	db02      	blt.n	8004956 <_printf_float+0x222>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	07d8      	lsls	r0, r3, #31
 8004954:	d50f      	bpl.n	8004976 <_printf_float+0x242>
 8004956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800495a:	4631      	mov	r1, r6
 800495c:	4628      	mov	r0, r5
 800495e:	47b8      	blx	r7
 8004960:	3001      	adds	r0, #1
 8004962:	f43f af42 	beq.w	80047ea <_printf_float+0xb6>
 8004966:	f04f 0800 	mov.w	r8, #0
 800496a:	f104 091a 	add.w	r9, r4, #26
 800496e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004970:	3b01      	subs	r3, #1
 8004972:	4543      	cmp	r3, r8
 8004974:	dc09      	bgt.n	800498a <_printf_float+0x256>
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	079b      	lsls	r3, r3, #30
 800497a:	f100 8102 	bmi.w	8004b82 <_printf_float+0x44e>
 800497e:	68e0      	ldr	r0, [r4, #12]
 8004980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004982:	4298      	cmp	r0, r3
 8004984:	bfb8      	it	lt
 8004986:	4618      	movlt	r0, r3
 8004988:	e731      	b.n	80047ee <_printf_float+0xba>
 800498a:	2301      	movs	r3, #1
 800498c:	464a      	mov	r2, r9
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f af28 	beq.w	80047ea <_printf_float+0xb6>
 800499a:	f108 0801 	add.w	r8, r8, #1
 800499e:	e7e6      	b.n	800496e <_printf_float+0x23a>
 80049a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	dc38      	bgt.n	8004a18 <_printf_float+0x2e4>
 80049a6:	2301      	movs	r3, #1
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <_printf_float+0x2e0>)
 80049ae:	47b8      	blx	r7
 80049b0:	3001      	adds	r0, #1
 80049b2:	f43f af1a 	beq.w	80047ea <_printf_float+0xb6>
 80049b6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d102      	bne.n	80049c4 <_printf_float+0x290>
 80049be:	6823      	ldr	r3, [r4, #0]
 80049c0:	07d9      	lsls	r1, r3, #31
 80049c2:	d5d8      	bpl.n	8004976 <_printf_float+0x242>
 80049c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049c8:	4631      	mov	r1, r6
 80049ca:	4628      	mov	r0, r5
 80049cc:	47b8      	blx	r7
 80049ce:	3001      	adds	r0, #1
 80049d0:	f43f af0b 	beq.w	80047ea <_printf_float+0xb6>
 80049d4:	f04f 0900 	mov.w	r9, #0
 80049d8:	f104 0a1a 	add.w	sl, r4, #26
 80049dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049de:	425b      	negs	r3, r3
 80049e0:	454b      	cmp	r3, r9
 80049e2:	dc01      	bgt.n	80049e8 <_printf_float+0x2b4>
 80049e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049e6:	e794      	b.n	8004912 <_printf_float+0x1de>
 80049e8:	2301      	movs	r3, #1
 80049ea:	4652      	mov	r2, sl
 80049ec:	4631      	mov	r1, r6
 80049ee:	4628      	mov	r0, r5
 80049f0:	47b8      	blx	r7
 80049f2:	3001      	adds	r0, #1
 80049f4:	f43f aef9 	beq.w	80047ea <_printf_float+0xb6>
 80049f8:	f109 0901 	add.w	r9, r9, #1
 80049fc:	e7ee      	b.n	80049dc <_printf_float+0x2a8>
 80049fe:	bf00      	nop
 8004a00:	7fefffff 	.word	0x7fefffff
 8004a04:	0800743c 	.word	0x0800743c
 8004a08:	08007440 	.word	0x08007440
 8004a0c:	08007448 	.word	0x08007448
 8004a10:	08007444 	.word	0x08007444
 8004a14:	0800744c 	.word	0x0800744c
 8004a18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	bfa8      	it	ge
 8004a20:	461a      	movge	r2, r3
 8004a22:	2a00      	cmp	r2, #0
 8004a24:	4691      	mov	r9, r2
 8004a26:	dc37      	bgt.n	8004a98 <_printf_float+0x364>
 8004a28:	f04f 0b00 	mov.w	fp, #0
 8004a2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a30:	f104 021a 	add.w	r2, r4, #26
 8004a34:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004a38:	ebaa 0309 	sub.w	r3, sl, r9
 8004a3c:	455b      	cmp	r3, fp
 8004a3e:	dc33      	bgt.n	8004aa8 <_printf_float+0x374>
 8004a40:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a44:	429a      	cmp	r2, r3
 8004a46:	db3b      	blt.n	8004ac0 <_printf_float+0x38c>
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	07da      	lsls	r2, r3, #31
 8004a4c:	d438      	bmi.n	8004ac0 <_printf_float+0x38c>
 8004a4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a52:	eba3 020a 	sub.w	r2, r3, sl
 8004a56:	eba3 0901 	sub.w	r9, r3, r1
 8004a5a:	4591      	cmp	r9, r2
 8004a5c:	bfa8      	it	ge
 8004a5e:	4691      	movge	r9, r2
 8004a60:	f1b9 0f00 	cmp.w	r9, #0
 8004a64:	dc34      	bgt.n	8004ad0 <_printf_float+0x39c>
 8004a66:	f04f 0800 	mov.w	r8, #0
 8004a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a6e:	f104 0a1a 	add.w	sl, r4, #26
 8004a72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	eba3 0309 	sub.w	r3, r3, r9
 8004a7c:	4543      	cmp	r3, r8
 8004a7e:	f77f af7a 	ble.w	8004976 <_printf_float+0x242>
 8004a82:	2301      	movs	r3, #1
 8004a84:	4652      	mov	r2, sl
 8004a86:	4631      	mov	r1, r6
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b8      	blx	r7
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	f43f aeac 	beq.w	80047ea <_printf_float+0xb6>
 8004a92:	f108 0801 	add.w	r8, r8, #1
 8004a96:	e7ec      	b.n	8004a72 <_printf_float+0x33e>
 8004a98:	4613      	mov	r3, r2
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4642      	mov	r2, r8
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d1c0      	bne.n	8004a28 <_printf_float+0x2f4>
 8004aa6:	e6a0      	b.n	80047ea <_printf_float+0xb6>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	4631      	mov	r1, r6
 8004aac:	4628      	mov	r0, r5
 8004aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f ae99 	beq.w	80047ea <_printf_float+0xb6>
 8004ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aba:	f10b 0b01 	add.w	fp, fp, #1
 8004abe:	e7b9      	b.n	8004a34 <_printf_float+0x300>
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	d1bf      	bne.n	8004a4e <_printf_float+0x31a>
 8004ace:	e68c      	b.n	80047ea <_printf_float+0xb6>
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	4631      	mov	r1, r6
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	eb08 020a 	add.w	r2, r8, sl
 8004ada:	47b8      	blx	r7
 8004adc:	3001      	adds	r0, #1
 8004ade:	d1c2      	bne.n	8004a66 <_printf_float+0x332>
 8004ae0:	e683      	b.n	80047ea <_printf_float+0xb6>
 8004ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ae4:	2a01      	cmp	r2, #1
 8004ae6:	dc01      	bgt.n	8004aec <_printf_float+0x3b8>
 8004ae8:	07db      	lsls	r3, r3, #31
 8004aea:	d537      	bpl.n	8004b5c <_printf_float+0x428>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4642      	mov	r2, r8
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	f43f ae77 	beq.w	80047ea <_printf_float+0xb6>
 8004afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b00:	4631      	mov	r1, r6
 8004b02:	4628      	mov	r0, r5
 8004b04:	47b8      	blx	r7
 8004b06:	3001      	adds	r0, #1
 8004b08:	f43f ae6f 	beq.w	80047ea <_printf_float+0xb6>
 8004b0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b10:	2200      	movs	r2, #0
 8004b12:	2300      	movs	r3, #0
 8004b14:	f7fb ff48 	bl	80009a8 <__aeabi_dcmpeq>
 8004b18:	b9d8      	cbnz	r0, 8004b52 <_printf_float+0x41e>
 8004b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b1c:	f108 0201 	add.w	r2, r8, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	4631      	mov	r1, r6
 8004b24:	4628      	mov	r0, r5
 8004b26:	47b8      	blx	r7
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d10e      	bne.n	8004b4a <_printf_float+0x416>
 8004b2c:	e65d      	b.n	80047ea <_printf_float+0xb6>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	464a      	mov	r2, r9
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	f43f ae56 	beq.w	80047ea <_printf_float+0xb6>
 8004b3e:	f108 0801 	add.w	r8, r8, #1
 8004b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b44:	3b01      	subs	r3, #1
 8004b46:	4543      	cmp	r3, r8
 8004b48:	dcf1      	bgt.n	8004b2e <_printf_float+0x3fa>
 8004b4a:	4653      	mov	r3, sl
 8004b4c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b50:	e6e0      	b.n	8004914 <_printf_float+0x1e0>
 8004b52:	f04f 0800 	mov.w	r8, #0
 8004b56:	f104 091a 	add.w	r9, r4, #26
 8004b5a:	e7f2      	b.n	8004b42 <_printf_float+0x40e>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	4642      	mov	r2, r8
 8004b60:	e7df      	b.n	8004b22 <_printf_float+0x3ee>
 8004b62:	2301      	movs	r3, #1
 8004b64:	464a      	mov	r2, r9
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b8      	blx	r7
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f43f ae3c 	beq.w	80047ea <_printf_float+0xb6>
 8004b72:	f108 0801 	add.w	r8, r8, #1
 8004b76:	68e3      	ldr	r3, [r4, #12]
 8004b78:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b7a:	1a5b      	subs	r3, r3, r1
 8004b7c:	4543      	cmp	r3, r8
 8004b7e:	dcf0      	bgt.n	8004b62 <_printf_float+0x42e>
 8004b80:	e6fd      	b.n	800497e <_printf_float+0x24a>
 8004b82:	f04f 0800 	mov.w	r8, #0
 8004b86:	f104 0919 	add.w	r9, r4, #25
 8004b8a:	e7f4      	b.n	8004b76 <_printf_float+0x442>

08004b8c <_printf_common>:
 8004b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	4616      	mov	r6, r2
 8004b92:	4699      	mov	r9, r3
 8004b94:	688a      	ldr	r2, [r1, #8]
 8004b96:	690b      	ldr	r3, [r1, #16]
 8004b98:	4607      	mov	r7, r0
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	bfb8      	it	lt
 8004b9e:	4613      	movlt	r3, r2
 8004ba0:	6033      	str	r3, [r6, #0]
 8004ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bac:	b10a      	cbz	r2, 8004bb2 <_printf_common+0x26>
 8004bae:	3301      	adds	r3, #1
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	6823      	ldr	r3, [r4, #0]
 8004bb4:	0699      	lsls	r1, r3, #26
 8004bb6:	bf42      	ittt	mi
 8004bb8:	6833      	ldrmi	r3, [r6, #0]
 8004bba:	3302      	addmi	r3, #2
 8004bbc:	6033      	strmi	r3, [r6, #0]
 8004bbe:	6825      	ldr	r5, [r4, #0]
 8004bc0:	f015 0506 	ands.w	r5, r5, #6
 8004bc4:	d106      	bne.n	8004bd4 <_printf_common+0x48>
 8004bc6:	f104 0a19 	add.w	sl, r4, #25
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	6832      	ldr	r2, [r6, #0]
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	dc28      	bgt.n	8004c26 <_printf_common+0x9a>
 8004bd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bd8:	1e13      	subs	r3, r2, #0
 8004bda:	6822      	ldr	r2, [r4, #0]
 8004bdc:	bf18      	it	ne
 8004bde:	2301      	movne	r3, #1
 8004be0:	0692      	lsls	r2, r2, #26
 8004be2:	d42d      	bmi.n	8004c40 <_printf_common+0xb4>
 8004be4:	4649      	mov	r1, r9
 8004be6:	4638      	mov	r0, r7
 8004be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bec:	47c0      	blx	r8
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d020      	beq.n	8004c34 <_printf_common+0xa8>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	68e5      	ldr	r5, [r4, #12]
 8004bf6:	f003 0306 	and.w	r3, r3, #6
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf18      	it	ne
 8004bfe:	2500      	movne	r5, #0
 8004c00:	6832      	ldr	r2, [r6, #0]
 8004c02:	f04f 0600 	mov.w	r6, #0
 8004c06:	68a3      	ldr	r3, [r4, #8]
 8004c08:	bf08      	it	eq
 8004c0a:	1aad      	subeq	r5, r5, r2
 8004c0c:	6922      	ldr	r2, [r4, #16]
 8004c0e:	bf08      	it	eq
 8004c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c14:	4293      	cmp	r3, r2
 8004c16:	bfc4      	itt	gt
 8004c18:	1a9b      	subgt	r3, r3, r2
 8004c1a:	18ed      	addgt	r5, r5, r3
 8004c1c:	341a      	adds	r4, #26
 8004c1e:	42b5      	cmp	r5, r6
 8004c20:	d11a      	bne.n	8004c58 <_printf_common+0xcc>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e008      	b.n	8004c38 <_printf_common+0xac>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	47c0      	blx	r8
 8004c30:	3001      	adds	r0, #1
 8004c32:	d103      	bne.n	8004c3c <_printf_common+0xb0>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7c4      	b.n	8004bca <_printf_common+0x3e>
 8004c40:	2030      	movs	r0, #48	; 0x30
 8004c42:	18e1      	adds	r1, r4, r3
 8004c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c4e:	4422      	add	r2, r4
 8004c50:	3302      	adds	r3, #2
 8004c52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c56:	e7c5      	b.n	8004be4 <_printf_common+0x58>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4649      	mov	r1, r9
 8004c5e:	4638      	mov	r0, r7
 8004c60:	47c0      	blx	r8
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0e6      	beq.n	8004c34 <_printf_common+0xa8>
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7d9      	b.n	8004c1e <_printf_common+0x92>
	...

08004c6c <_printf_i>:
 8004c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	7e0f      	ldrb	r7, [r1, #24]
 8004c72:	4691      	mov	r9, r2
 8004c74:	2f78      	cmp	r7, #120	; 0x78
 8004c76:	4680      	mov	r8, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	469a      	mov	sl, r3
 8004c7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c82:	d807      	bhi.n	8004c94 <_printf_i+0x28>
 8004c84:	2f62      	cmp	r7, #98	; 0x62
 8004c86:	d80a      	bhi.n	8004c9e <_printf_i+0x32>
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	f000 80d9 	beq.w	8004e40 <_printf_i+0x1d4>
 8004c8e:	2f58      	cmp	r7, #88	; 0x58
 8004c90:	f000 80a4 	beq.w	8004ddc <_printf_i+0x170>
 8004c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c9c:	e03a      	b.n	8004d14 <_printf_i+0xa8>
 8004c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ca2:	2b15      	cmp	r3, #21
 8004ca4:	d8f6      	bhi.n	8004c94 <_printf_i+0x28>
 8004ca6:	a101      	add	r1, pc, #4	; (adr r1, 8004cac <_printf_i+0x40>)
 8004ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004c95 	.word	0x08004c95
 8004cb8:	08004c95 	.word	0x08004c95
 8004cbc:	08004c95 	.word	0x08004c95
 8004cc0:	08004c95 	.word	0x08004c95
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004c95 	.word	0x08004c95
 8004ccc:	08004c95 	.word	0x08004c95
 8004cd0:	08004c95 	.word	0x08004c95
 8004cd4:	08004c95 	.word	0x08004c95
 8004cd8:	08004e27 	.word	0x08004e27
 8004cdc:	08004d49 	.word	0x08004d49
 8004ce0:	08004e09 	.word	0x08004e09
 8004ce4:	08004c95 	.word	0x08004c95
 8004ce8:	08004c95 	.word	0x08004c95
 8004cec:	08004e49 	.word	0x08004e49
 8004cf0:	08004c95 	.word	0x08004c95
 8004cf4:	08004d49 	.word	0x08004d49
 8004cf8:	08004c95 	.word	0x08004c95
 8004cfc:	08004c95 	.word	0x08004c95
 8004d00:	08004e11 	.word	0x08004e11
 8004d04:	682b      	ldr	r3, [r5, #0]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	602a      	str	r2, [r5, #0]
 8004d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d14:	2301      	movs	r3, #1
 8004d16:	e0a4      	b.n	8004e62 <_printf_i+0x1f6>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	6829      	ldr	r1, [r5, #0]
 8004d1c:	0606      	lsls	r6, r0, #24
 8004d1e:	f101 0304 	add.w	r3, r1, #4
 8004d22:	d50a      	bpl.n	8004d3a <_printf_i+0xce>
 8004d24:	680e      	ldr	r6, [r1, #0]
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	2e00      	cmp	r6, #0
 8004d2a:	da03      	bge.n	8004d34 <_printf_i+0xc8>
 8004d2c:	232d      	movs	r3, #45	; 0x2d
 8004d2e:	4276      	negs	r6, r6
 8004d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d34:	230a      	movs	r3, #10
 8004d36:	485e      	ldr	r0, [pc, #376]	; (8004eb0 <_printf_i+0x244>)
 8004d38:	e019      	b.n	8004d6e <_printf_i+0x102>
 8004d3a:	680e      	ldr	r6, [r1, #0]
 8004d3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d40:	602b      	str	r3, [r5, #0]
 8004d42:	bf18      	it	ne
 8004d44:	b236      	sxthne	r6, r6
 8004d46:	e7ef      	b.n	8004d28 <_printf_i+0xbc>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	6820      	ldr	r0, [r4, #0]
 8004d4c:	1d19      	adds	r1, r3, #4
 8004d4e:	6029      	str	r1, [r5, #0]
 8004d50:	0601      	lsls	r1, r0, #24
 8004d52:	d501      	bpl.n	8004d58 <_printf_i+0xec>
 8004d54:	681e      	ldr	r6, [r3, #0]
 8004d56:	e002      	b.n	8004d5e <_printf_i+0xf2>
 8004d58:	0646      	lsls	r6, r0, #25
 8004d5a:	d5fb      	bpl.n	8004d54 <_printf_i+0xe8>
 8004d5c:	881e      	ldrh	r6, [r3, #0]
 8004d5e:	2f6f      	cmp	r7, #111	; 0x6f
 8004d60:	bf0c      	ite	eq
 8004d62:	2308      	moveq	r3, #8
 8004d64:	230a      	movne	r3, #10
 8004d66:	4852      	ldr	r0, [pc, #328]	; (8004eb0 <_printf_i+0x244>)
 8004d68:	2100      	movs	r1, #0
 8004d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d6e:	6865      	ldr	r5, [r4, #4]
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	bfa8      	it	ge
 8004d74:	6821      	ldrge	r1, [r4, #0]
 8004d76:	60a5      	str	r5, [r4, #8]
 8004d78:	bfa4      	itt	ge
 8004d7a:	f021 0104 	bicge.w	r1, r1, #4
 8004d7e:	6021      	strge	r1, [r4, #0]
 8004d80:	b90e      	cbnz	r6, 8004d86 <_printf_i+0x11a>
 8004d82:	2d00      	cmp	r5, #0
 8004d84:	d04d      	beq.n	8004e22 <_printf_i+0x1b6>
 8004d86:	4615      	mov	r5, r2
 8004d88:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d8c:	fb03 6711 	mls	r7, r3, r1, r6
 8004d90:	5dc7      	ldrb	r7, [r0, r7]
 8004d92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d96:	4637      	mov	r7, r6
 8004d98:	42bb      	cmp	r3, r7
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	d9f4      	bls.n	8004d88 <_printf_i+0x11c>
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d10b      	bne.n	8004dba <_printf_i+0x14e>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	07de      	lsls	r6, r3, #31
 8004da6:	d508      	bpl.n	8004dba <_printf_i+0x14e>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	6861      	ldr	r1, [r4, #4]
 8004dac:	4299      	cmp	r1, r3
 8004dae:	bfde      	ittt	le
 8004db0:	2330      	movle	r3, #48	; 0x30
 8004db2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004db6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dba:	1b52      	subs	r2, r2, r5
 8004dbc:	6122      	str	r2, [r4, #16]
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	f8cd a000 	str.w	sl, [sp]
 8004dc8:	aa03      	add	r2, sp, #12
 8004dca:	f7ff fedf 	bl	8004b8c <_printf_common>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d14c      	bne.n	8004e6c <_printf_i+0x200>
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd6:	b004      	add	sp, #16
 8004dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ddc:	4834      	ldr	r0, [pc, #208]	; (8004eb0 <_printf_i+0x244>)
 8004dde:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004de2:	6829      	ldr	r1, [r5, #0]
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dea:	6029      	str	r1, [r5, #0]
 8004dec:	061d      	lsls	r5, r3, #24
 8004dee:	d514      	bpl.n	8004e1a <_printf_i+0x1ae>
 8004df0:	07df      	lsls	r7, r3, #31
 8004df2:	bf44      	itt	mi
 8004df4:	f043 0320 	orrmi.w	r3, r3, #32
 8004df8:	6023      	strmi	r3, [r4, #0]
 8004dfa:	b91e      	cbnz	r6, 8004e04 <_printf_i+0x198>
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f023 0320 	bic.w	r3, r3, #32
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	2310      	movs	r3, #16
 8004e06:	e7af      	b.n	8004d68 <_printf_i+0xfc>
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	f043 0320 	orr.w	r3, r3, #32
 8004e0e:	6023      	str	r3, [r4, #0]
 8004e10:	2378      	movs	r3, #120	; 0x78
 8004e12:	4828      	ldr	r0, [pc, #160]	; (8004eb4 <_printf_i+0x248>)
 8004e14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e18:	e7e3      	b.n	8004de2 <_printf_i+0x176>
 8004e1a:	0659      	lsls	r1, r3, #25
 8004e1c:	bf48      	it	mi
 8004e1e:	b2b6      	uxthmi	r6, r6
 8004e20:	e7e6      	b.n	8004df0 <_printf_i+0x184>
 8004e22:	4615      	mov	r5, r2
 8004e24:	e7bb      	b.n	8004d9e <_printf_i+0x132>
 8004e26:	682b      	ldr	r3, [r5, #0]
 8004e28:	6826      	ldr	r6, [r4, #0]
 8004e2a:	1d18      	adds	r0, r3, #4
 8004e2c:	6961      	ldr	r1, [r4, #20]
 8004e2e:	6028      	str	r0, [r5, #0]
 8004e30:	0635      	lsls	r5, r6, #24
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	d501      	bpl.n	8004e3a <_printf_i+0x1ce>
 8004e36:	6019      	str	r1, [r3, #0]
 8004e38:	e002      	b.n	8004e40 <_printf_i+0x1d4>
 8004e3a:	0670      	lsls	r0, r6, #25
 8004e3c:	d5fb      	bpl.n	8004e36 <_printf_i+0x1ca>
 8004e3e:	8019      	strh	r1, [r3, #0]
 8004e40:	2300      	movs	r3, #0
 8004e42:	4615      	mov	r5, r2
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	e7ba      	b.n	8004dbe <_printf_i+0x152>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	1d1a      	adds	r2, r3, #4
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	681d      	ldr	r5, [r3, #0]
 8004e52:	6862      	ldr	r2, [r4, #4]
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fed5 	bl	8005c04 <memchr>
 8004e5a:	b108      	cbz	r0, 8004e60 <_printf_i+0x1f4>
 8004e5c:	1b40      	subs	r0, r0, r5
 8004e5e:	6060      	str	r0, [r4, #4]
 8004e60:	6863      	ldr	r3, [r4, #4]
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	2300      	movs	r3, #0
 8004e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e6a:	e7a8      	b.n	8004dbe <_printf_i+0x152>
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	4649      	mov	r1, r9
 8004e70:	4640      	mov	r0, r8
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	47d0      	blx	sl
 8004e76:	3001      	adds	r0, #1
 8004e78:	d0ab      	beq.n	8004dd2 <_printf_i+0x166>
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	079b      	lsls	r3, r3, #30
 8004e7e:	d413      	bmi.n	8004ea8 <_printf_i+0x23c>
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	9b03      	ldr	r3, [sp, #12]
 8004e84:	4298      	cmp	r0, r3
 8004e86:	bfb8      	it	lt
 8004e88:	4618      	movlt	r0, r3
 8004e8a:	e7a4      	b.n	8004dd6 <_printf_i+0x16a>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4632      	mov	r2, r6
 8004e90:	4649      	mov	r1, r9
 8004e92:	4640      	mov	r0, r8
 8004e94:	47d0      	blx	sl
 8004e96:	3001      	adds	r0, #1
 8004e98:	d09b      	beq.n	8004dd2 <_printf_i+0x166>
 8004e9a:	3501      	adds	r5, #1
 8004e9c:	68e3      	ldr	r3, [r4, #12]
 8004e9e:	9903      	ldr	r1, [sp, #12]
 8004ea0:	1a5b      	subs	r3, r3, r1
 8004ea2:	42ab      	cmp	r3, r5
 8004ea4:	dcf2      	bgt.n	8004e8c <_printf_i+0x220>
 8004ea6:	e7eb      	b.n	8004e80 <_printf_i+0x214>
 8004ea8:	2500      	movs	r5, #0
 8004eaa:	f104 0619 	add.w	r6, r4, #25
 8004eae:	e7f5      	b.n	8004e9c <_printf_i+0x230>
 8004eb0:	0800744e 	.word	0x0800744e
 8004eb4:	0800745f 	.word	0x0800745f

08004eb8 <siprintf>:
 8004eb8:	b40e      	push	{r1, r2, r3}
 8004eba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ebe:	b500      	push	{lr}
 8004ec0:	b09c      	sub	sp, #112	; 0x70
 8004ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ec4:	9002      	str	r0, [sp, #8]
 8004ec6:	9006      	str	r0, [sp, #24]
 8004ec8:	9107      	str	r1, [sp, #28]
 8004eca:	9104      	str	r1, [sp, #16]
 8004ecc:	4808      	ldr	r0, [pc, #32]	; (8004ef0 <siprintf+0x38>)
 8004ece:	4909      	ldr	r1, [pc, #36]	; (8004ef4 <siprintf+0x3c>)
 8004ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ed4:	9105      	str	r1, [sp, #20]
 8004ed6:	6800      	ldr	r0, [r0, #0]
 8004ed8:	a902      	add	r1, sp, #8
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	f001 fb7c 	bl	80065d8 <_svfiprintf_r>
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	9b02      	ldr	r3, [sp, #8]
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	b01c      	add	sp, #112	; 0x70
 8004ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004eec:	b003      	add	sp, #12
 8004eee:	4770      	bx	lr
 8004ef0:	20000010 	.word	0x20000010
 8004ef4:	ffff0208 	.word	0xffff0208

08004ef8 <quorem>:
 8004ef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	6903      	ldr	r3, [r0, #16]
 8004efe:	690c      	ldr	r4, [r1, #16]
 8004f00:	4607      	mov	r7, r0
 8004f02:	42a3      	cmp	r3, r4
 8004f04:	f2c0 8082 	blt.w	800500c <quorem+0x114>
 8004f08:	3c01      	subs	r4, #1
 8004f0a:	f100 0514 	add.w	r5, r0, #20
 8004f0e:	f101 0814 	add.w	r8, r1, #20
 8004f12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f16:	9301      	str	r3, [sp, #4]
 8004f18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f20:	3301      	adds	r3, #1
 8004f22:	429a      	cmp	r2, r3
 8004f24:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f30:	d331      	bcc.n	8004f96 <quorem+0x9e>
 8004f32:	f04f 0e00 	mov.w	lr, #0
 8004f36:	4640      	mov	r0, r8
 8004f38:	46ac      	mov	ip, r5
 8004f3a:	46f2      	mov	sl, lr
 8004f3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f40:	b293      	uxth	r3, r2
 8004f42:	fb06 e303 	mla	r3, r6, r3, lr
 8004f46:	0c12      	lsrs	r2, r2, #16
 8004f48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	fb06 e202 	mla	r2, r6, r2, lr
 8004f52:	ebaa 0303 	sub.w	r3, sl, r3
 8004f56:	f8dc a000 	ldr.w	sl, [ip]
 8004f5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f5e:	fa1f fa8a 	uxth.w	sl, sl
 8004f62:	4453      	add	r3, sl
 8004f64:	f8dc a000 	ldr.w	sl, [ip]
 8004f68:	b292      	uxth	r2, r2
 8004f6a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f78:	4581      	cmp	r9, r0
 8004f7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f7e:	f84c 3b04 	str.w	r3, [ip], #4
 8004f82:	d2db      	bcs.n	8004f3c <quorem+0x44>
 8004f84:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f88:	b92b      	cbnz	r3, 8004f96 <quorem+0x9e>
 8004f8a:	9b01      	ldr	r3, [sp, #4]
 8004f8c:	3b04      	subs	r3, #4
 8004f8e:	429d      	cmp	r5, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	d32f      	bcc.n	8004ff4 <quorem+0xfc>
 8004f94:	613c      	str	r4, [r7, #16]
 8004f96:	4638      	mov	r0, r7
 8004f98:	f001 f8ce 	bl	8006138 <__mcmp>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	db25      	blt.n	8004fec <quorem+0xf4>
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	f04f 0c00 	mov.w	ip, #0
 8004fa6:	3601      	adds	r6, #1
 8004fa8:	f858 1b04 	ldr.w	r1, [r8], #4
 8004fac:	f8d0 e000 	ldr.w	lr, [r0]
 8004fb0:	b28b      	uxth	r3, r1
 8004fb2:	ebac 0303 	sub.w	r3, ip, r3
 8004fb6:	fa1f f28e 	uxth.w	r2, lr
 8004fba:	4413      	add	r3, r2
 8004fbc:	0c0a      	lsrs	r2, r1, #16
 8004fbe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004fc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fcc:	45c1      	cmp	r9, r8
 8004fce:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fd2:	f840 3b04 	str.w	r3, [r0], #4
 8004fd6:	d2e7      	bcs.n	8004fa8 <quorem+0xb0>
 8004fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fe0:	b922      	cbnz	r2, 8004fec <quorem+0xf4>
 8004fe2:	3b04      	subs	r3, #4
 8004fe4:	429d      	cmp	r5, r3
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	d30a      	bcc.n	8005000 <quorem+0x108>
 8004fea:	613c      	str	r4, [r7, #16]
 8004fec:	4630      	mov	r0, r6
 8004fee:	b003      	add	sp, #12
 8004ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	3b04      	subs	r3, #4
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	d1cb      	bne.n	8004f94 <quorem+0x9c>
 8004ffc:	3c01      	subs	r4, #1
 8004ffe:	e7c6      	b.n	8004f8e <quorem+0x96>
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	3b04      	subs	r3, #4
 8005004:	2a00      	cmp	r2, #0
 8005006:	d1f0      	bne.n	8004fea <quorem+0xf2>
 8005008:	3c01      	subs	r4, #1
 800500a:	e7eb      	b.n	8004fe4 <quorem+0xec>
 800500c:	2000      	movs	r0, #0
 800500e:	e7ee      	b.n	8004fee <quorem+0xf6>

08005010 <_dtoa_r>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	4616      	mov	r6, r2
 8005016:	461f      	mov	r7, r3
 8005018:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800501a:	b099      	sub	sp, #100	; 0x64
 800501c:	4605      	mov	r5, r0
 800501e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005022:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005026:	b974      	cbnz	r4, 8005046 <_dtoa_r+0x36>
 8005028:	2010      	movs	r0, #16
 800502a:	f000 fde3 	bl	8005bf4 <malloc>
 800502e:	4602      	mov	r2, r0
 8005030:	6268      	str	r0, [r5, #36]	; 0x24
 8005032:	b920      	cbnz	r0, 800503e <_dtoa_r+0x2e>
 8005034:	21ea      	movs	r1, #234	; 0xea
 8005036:	4ba8      	ldr	r3, [pc, #672]	; (80052d8 <_dtoa_r+0x2c8>)
 8005038:	48a8      	ldr	r0, [pc, #672]	; (80052dc <_dtoa_r+0x2cc>)
 800503a:	f001 fbdd 	bl	80067f8 <__assert_func>
 800503e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005042:	6004      	str	r4, [r0, #0]
 8005044:	60c4      	str	r4, [r0, #12]
 8005046:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	b151      	cbz	r1, 8005062 <_dtoa_r+0x52>
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	2301      	movs	r3, #1
 8005050:	4093      	lsls	r3, r2
 8005052:	604a      	str	r2, [r1, #4]
 8005054:	608b      	str	r3, [r1, #8]
 8005056:	4628      	mov	r0, r5
 8005058:	f000 fe30 	bl	8005cbc <_Bfree>
 800505c:	2200      	movs	r2, #0
 800505e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	1e3b      	subs	r3, r7, #0
 8005064:	bfaf      	iteee	ge
 8005066:	2300      	movge	r3, #0
 8005068:	2201      	movlt	r2, #1
 800506a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800506e:	9305      	strlt	r3, [sp, #20]
 8005070:	bfa8      	it	ge
 8005072:	f8c8 3000 	strge.w	r3, [r8]
 8005076:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800507a:	4b99      	ldr	r3, [pc, #612]	; (80052e0 <_dtoa_r+0x2d0>)
 800507c:	bfb8      	it	lt
 800507e:	f8c8 2000 	strlt.w	r2, [r8]
 8005082:	ea33 0309 	bics.w	r3, r3, r9
 8005086:	d119      	bne.n	80050bc <_dtoa_r+0xac>
 8005088:	f242 730f 	movw	r3, #9999	; 0x270f
 800508c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800508e:	6013      	str	r3, [r2, #0]
 8005090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005094:	4333      	orrs	r3, r6
 8005096:	f000 857f 	beq.w	8005b98 <_dtoa_r+0xb88>
 800509a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800509c:	b953      	cbnz	r3, 80050b4 <_dtoa_r+0xa4>
 800509e:	4b91      	ldr	r3, [pc, #580]	; (80052e4 <_dtoa_r+0x2d4>)
 80050a0:	e022      	b.n	80050e8 <_dtoa_r+0xd8>
 80050a2:	4b91      	ldr	r3, [pc, #580]	; (80052e8 <_dtoa_r+0x2d8>)
 80050a4:	9303      	str	r3, [sp, #12]
 80050a6:	3308      	adds	r3, #8
 80050a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	9803      	ldr	r0, [sp, #12]
 80050ae:	b019      	add	sp, #100	; 0x64
 80050b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b4:	4b8b      	ldr	r3, [pc, #556]	; (80052e4 <_dtoa_r+0x2d4>)
 80050b6:	9303      	str	r3, [sp, #12]
 80050b8:	3303      	adds	r3, #3
 80050ba:	e7f5      	b.n	80050a8 <_dtoa_r+0x98>
 80050bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80050c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050c8:	2200      	movs	r2, #0
 80050ca:	2300      	movs	r3, #0
 80050cc:	f7fb fc6c 	bl	80009a8 <__aeabi_dcmpeq>
 80050d0:	4680      	mov	r8, r0
 80050d2:	b158      	cbz	r0, 80050ec <_dtoa_r+0xdc>
 80050d4:	2301      	movs	r3, #1
 80050d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8558 	beq.w	8005b92 <_dtoa_r+0xb82>
 80050e2:	4882      	ldr	r0, [pc, #520]	; (80052ec <_dtoa_r+0x2dc>)
 80050e4:	6018      	str	r0, [r3, #0]
 80050e6:	1e43      	subs	r3, r0, #1
 80050e8:	9303      	str	r3, [sp, #12]
 80050ea:	e7df      	b.n	80050ac <_dtoa_r+0x9c>
 80050ec:	ab16      	add	r3, sp, #88	; 0x58
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	ab17      	add	r3, sp, #92	; 0x5c
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	4628      	mov	r0, r5
 80050f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050fa:	f001 f8c5 	bl	8006288 <__d2b>
 80050fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005102:	4683      	mov	fp, r0
 8005104:	2c00      	cmp	r4, #0
 8005106:	d07f      	beq.n	8005208 <_dtoa_r+0x1f8>
 8005108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800510c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800510e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005116:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800511a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800511e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005122:	2200      	movs	r2, #0
 8005124:	4b72      	ldr	r3, [pc, #456]	; (80052f0 <_dtoa_r+0x2e0>)
 8005126:	f7fb f81f 	bl	8000168 <__aeabi_dsub>
 800512a:	a365      	add	r3, pc, #404	; (adr r3, 80052c0 <_dtoa_r+0x2b0>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb f9d2 	bl	80004d8 <__aeabi_dmul>
 8005134:	a364      	add	r3, pc, #400	; (adr r3, 80052c8 <_dtoa_r+0x2b8>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb f817 	bl	800016c <__adddf3>
 800513e:	4606      	mov	r6, r0
 8005140:	4620      	mov	r0, r4
 8005142:	460f      	mov	r7, r1
 8005144:	f7fb f95e 	bl	8000404 <__aeabi_i2d>
 8005148:	a361      	add	r3, pc, #388	; (adr r3, 80052d0 <_dtoa_r+0x2c0>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb f9c3 	bl	80004d8 <__aeabi_dmul>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4630      	mov	r0, r6
 8005158:	4639      	mov	r1, r7
 800515a:	f7fb f807 	bl	800016c <__adddf3>
 800515e:	4606      	mov	r6, r0
 8005160:	460f      	mov	r7, r1
 8005162:	f7fb fc69 	bl	8000a38 <__aeabi_d2iz>
 8005166:	2200      	movs	r2, #0
 8005168:	4682      	mov	sl, r0
 800516a:	2300      	movs	r3, #0
 800516c:	4630      	mov	r0, r6
 800516e:	4639      	mov	r1, r7
 8005170:	f7fb fc24 	bl	80009bc <__aeabi_dcmplt>
 8005174:	b148      	cbz	r0, 800518a <_dtoa_r+0x17a>
 8005176:	4650      	mov	r0, sl
 8005178:	f7fb f944 	bl	8000404 <__aeabi_i2d>
 800517c:	4632      	mov	r2, r6
 800517e:	463b      	mov	r3, r7
 8005180:	f7fb fc12 	bl	80009a8 <__aeabi_dcmpeq>
 8005184:	b908      	cbnz	r0, 800518a <_dtoa_r+0x17a>
 8005186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800518a:	f1ba 0f16 	cmp.w	sl, #22
 800518e:	d858      	bhi.n	8005242 <_dtoa_r+0x232>
 8005190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005194:	4b57      	ldr	r3, [pc, #348]	; (80052f4 <_dtoa_r+0x2e4>)
 8005196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	f7fb fc0d 	bl	80009bc <__aeabi_dcmplt>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d04f      	beq.n	8005246 <_dtoa_r+0x236>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80051ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051b0:	1b1c      	subs	r4, r3, r4
 80051b2:	1e63      	subs	r3, r4, #1
 80051b4:	9309      	str	r3, [sp, #36]	; 0x24
 80051b6:	bf49      	itett	mi
 80051b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80051bc:	2300      	movpl	r3, #0
 80051be:	9306      	strmi	r3, [sp, #24]
 80051c0:	2300      	movmi	r3, #0
 80051c2:	bf54      	ite	pl
 80051c4:	9306      	strpl	r3, [sp, #24]
 80051c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80051c8:	f1ba 0f00 	cmp.w	sl, #0
 80051cc:	db3d      	blt.n	800524a <_dtoa_r+0x23a>
 80051ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80051d4:	4453      	add	r3, sl
 80051d6:	9309      	str	r3, [sp, #36]	; 0x24
 80051d8:	2300      	movs	r3, #0
 80051da:	930a      	str	r3, [sp, #40]	; 0x28
 80051dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051de:	2b09      	cmp	r3, #9
 80051e0:	f200 808c 	bhi.w	80052fc <_dtoa_r+0x2ec>
 80051e4:	2b05      	cmp	r3, #5
 80051e6:	bfc4      	itt	gt
 80051e8:	3b04      	subgt	r3, #4
 80051ea:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051ee:	bfc8      	it	gt
 80051f0:	2400      	movgt	r4, #0
 80051f2:	f1a3 0302 	sub.w	r3, r3, #2
 80051f6:	bfd8      	it	le
 80051f8:	2401      	movle	r4, #1
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	f200 808a 	bhi.w	8005314 <_dtoa_r+0x304>
 8005200:	e8df f003 	tbb	[pc, r3]
 8005204:	5b4d4f2d 	.word	0x5b4d4f2d
 8005208:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800520c:	441c      	add	r4, r3
 800520e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005212:	2b20      	cmp	r3, #32
 8005214:	bfc3      	ittte	gt
 8005216:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800521a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800521e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005222:	f1c3 0320 	rsble	r3, r3, #32
 8005226:	bfc6      	itte	gt
 8005228:	fa26 f000 	lsrgt.w	r0, r6, r0
 800522c:	4318      	orrgt	r0, r3
 800522e:	fa06 f003 	lslle.w	r0, r6, r3
 8005232:	f7fb f8d7 	bl	80003e4 <__aeabi_ui2d>
 8005236:	2301      	movs	r3, #1
 8005238:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800523c:	3c01      	subs	r4, #1
 800523e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005240:	e76f      	b.n	8005122 <_dtoa_r+0x112>
 8005242:	2301      	movs	r3, #1
 8005244:	e7b2      	b.n	80051ac <_dtoa_r+0x19c>
 8005246:	900f      	str	r0, [sp, #60]	; 0x3c
 8005248:	e7b1      	b.n	80051ae <_dtoa_r+0x19e>
 800524a:	9b06      	ldr	r3, [sp, #24]
 800524c:	eba3 030a 	sub.w	r3, r3, sl
 8005250:	9306      	str	r3, [sp, #24]
 8005252:	f1ca 0300 	rsb	r3, sl, #0
 8005256:	930a      	str	r3, [sp, #40]	; 0x28
 8005258:	2300      	movs	r3, #0
 800525a:	930e      	str	r3, [sp, #56]	; 0x38
 800525c:	e7be      	b.n	80051dc <_dtoa_r+0x1cc>
 800525e:	2300      	movs	r3, #0
 8005260:	930b      	str	r3, [sp, #44]	; 0x2c
 8005262:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005264:	2b00      	cmp	r3, #0
 8005266:	dc58      	bgt.n	800531a <_dtoa_r+0x30a>
 8005268:	f04f 0901 	mov.w	r9, #1
 800526c:	464b      	mov	r3, r9
 800526e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005272:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005276:	2200      	movs	r2, #0
 8005278:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800527a:	6042      	str	r2, [r0, #4]
 800527c:	2204      	movs	r2, #4
 800527e:	f102 0614 	add.w	r6, r2, #20
 8005282:	429e      	cmp	r6, r3
 8005284:	6841      	ldr	r1, [r0, #4]
 8005286:	d94e      	bls.n	8005326 <_dtoa_r+0x316>
 8005288:	4628      	mov	r0, r5
 800528a:	f000 fcd7 	bl	8005c3c <_Balloc>
 800528e:	9003      	str	r0, [sp, #12]
 8005290:	2800      	cmp	r0, #0
 8005292:	d14c      	bne.n	800532e <_dtoa_r+0x31e>
 8005294:	4602      	mov	r2, r0
 8005296:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800529a:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <_dtoa_r+0x2e8>)
 800529c:	e6cc      	b.n	8005038 <_dtoa_r+0x28>
 800529e:	2301      	movs	r3, #1
 80052a0:	e7de      	b.n	8005260 <_dtoa_r+0x250>
 80052a2:	2300      	movs	r3, #0
 80052a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80052a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052a8:	eb0a 0903 	add.w	r9, sl, r3
 80052ac:	f109 0301 	add.w	r3, r9, #1
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	9308      	str	r3, [sp, #32]
 80052b4:	bfb8      	it	lt
 80052b6:	2301      	movlt	r3, #1
 80052b8:	e7dd      	b.n	8005276 <_dtoa_r+0x266>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e7f2      	b.n	80052a4 <_dtoa_r+0x294>
 80052be:	bf00      	nop
 80052c0:	636f4361 	.word	0x636f4361
 80052c4:	3fd287a7 	.word	0x3fd287a7
 80052c8:	8b60c8b3 	.word	0x8b60c8b3
 80052cc:	3fc68a28 	.word	0x3fc68a28
 80052d0:	509f79fb 	.word	0x509f79fb
 80052d4:	3fd34413 	.word	0x3fd34413
 80052d8:	0800747d 	.word	0x0800747d
 80052dc:	08007494 	.word	0x08007494
 80052e0:	7ff00000 	.word	0x7ff00000
 80052e4:	08007479 	.word	0x08007479
 80052e8:	08007470 	.word	0x08007470
 80052ec:	0800744d 	.word	0x0800744d
 80052f0:	3ff80000 	.word	0x3ff80000
 80052f4:	08007588 	.word	0x08007588
 80052f8:	080074ef 	.word	0x080074ef
 80052fc:	2401      	movs	r4, #1
 80052fe:	2300      	movs	r3, #0
 8005300:	940b      	str	r4, [sp, #44]	; 0x2c
 8005302:	9322      	str	r3, [sp, #136]	; 0x88
 8005304:	f04f 39ff 	mov.w	r9, #4294967295
 8005308:	2200      	movs	r2, #0
 800530a:	2312      	movs	r3, #18
 800530c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005310:	9223      	str	r2, [sp, #140]	; 0x8c
 8005312:	e7b0      	b.n	8005276 <_dtoa_r+0x266>
 8005314:	2301      	movs	r3, #1
 8005316:	930b      	str	r3, [sp, #44]	; 0x2c
 8005318:	e7f4      	b.n	8005304 <_dtoa_r+0x2f4>
 800531a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800531e:	464b      	mov	r3, r9
 8005320:	f8cd 9020 	str.w	r9, [sp, #32]
 8005324:	e7a7      	b.n	8005276 <_dtoa_r+0x266>
 8005326:	3101      	adds	r1, #1
 8005328:	6041      	str	r1, [r0, #4]
 800532a:	0052      	lsls	r2, r2, #1
 800532c:	e7a7      	b.n	800527e <_dtoa_r+0x26e>
 800532e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005330:	9a03      	ldr	r2, [sp, #12]
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	9b08      	ldr	r3, [sp, #32]
 8005336:	2b0e      	cmp	r3, #14
 8005338:	f200 80a8 	bhi.w	800548c <_dtoa_r+0x47c>
 800533c:	2c00      	cmp	r4, #0
 800533e:	f000 80a5 	beq.w	800548c <_dtoa_r+0x47c>
 8005342:	f1ba 0f00 	cmp.w	sl, #0
 8005346:	dd34      	ble.n	80053b2 <_dtoa_r+0x3a2>
 8005348:	4a9a      	ldr	r2, [pc, #616]	; (80055b4 <_dtoa_r+0x5a4>)
 800534a:	f00a 030f 	and.w	r3, sl, #15
 800534e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005352:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800535a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800535e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005362:	d016      	beq.n	8005392 <_dtoa_r+0x382>
 8005364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005368:	4b93      	ldr	r3, [pc, #588]	; (80055b8 <_dtoa_r+0x5a8>)
 800536a:	2703      	movs	r7, #3
 800536c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005370:	f7fb f9dc 	bl	800072c <__aeabi_ddiv>
 8005374:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005378:	f004 040f 	and.w	r4, r4, #15
 800537c:	4e8e      	ldr	r6, [pc, #568]	; (80055b8 <_dtoa_r+0x5a8>)
 800537e:	b954      	cbnz	r4, 8005396 <_dtoa_r+0x386>
 8005380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005388:	f7fb f9d0 	bl	800072c <__aeabi_ddiv>
 800538c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005390:	e029      	b.n	80053e6 <_dtoa_r+0x3d6>
 8005392:	2702      	movs	r7, #2
 8005394:	e7f2      	b.n	800537c <_dtoa_r+0x36c>
 8005396:	07e1      	lsls	r1, r4, #31
 8005398:	d508      	bpl.n	80053ac <_dtoa_r+0x39c>
 800539a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800539e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80053a2:	f7fb f899 	bl	80004d8 <__aeabi_dmul>
 80053a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053aa:	3701      	adds	r7, #1
 80053ac:	1064      	asrs	r4, r4, #1
 80053ae:	3608      	adds	r6, #8
 80053b0:	e7e5      	b.n	800537e <_dtoa_r+0x36e>
 80053b2:	f000 80a5 	beq.w	8005500 <_dtoa_r+0x4f0>
 80053b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053ba:	f1ca 0400 	rsb	r4, sl, #0
 80053be:	4b7d      	ldr	r3, [pc, #500]	; (80055b4 <_dtoa_r+0x5a4>)
 80053c0:	f004 020f 	and.w	r2, r4, #15
 80053c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fb f884 	bl	80004d8 <__aeabi_dmul>
 80053d0:	2702      	movs	r7, #2
 80053d2:	2300      	movs	r3, #0
 80053d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053d8:	4e77      	ldr	r6, [pc, #476]	; (80055b8 <_dtoa_r+0x5a8>)
 80053da:	1124      	asrs	r4, r4, #4
 80053dc:	2c00      	cmp	r4, #0
 80053de:	f040 8084 	bne.w	80054ea <_dtoa_r+0x4da>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1d2      	bne.n	800538c <_dtoa_r+0x37c>
 80053e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 808b 	beq.w	8005504 <_dtoa_r+0x4f4>
 80053ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053fa:	2200      	movs	r2, #0
 80053fc:	4b6f      	ldr	r3, [pc, #444]	; (80055bc <_dtoa_r+0x5ac>)
 80053fe:	f7fb fadd 	bl	80009bc <__aeabi_dcmplt>
 8005402:	2800      	cmp	r0, #0
 8005404:	d07e      	beq.n	8005504 <_dtoa_r+0x4f4>
 8005406:	9b08      	ldr	r3, [sp, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d07b      	beq.n	8005504 <_dtoa_r+0x4f4>
 800540c:	f1b9 0f00 	cmp.w	r9, #0
 8005410:	dd38      	ble.n	8005484 <_dtoa_r+0x474>
 8005412:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005416:	2200      	movs	r2, #0
 8005418:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <_dtoa_r+0x5b0>)
 800541a:	f7fb f85d 	bl	80004d8 <__aeabi_dmul>
 800541e:	464c      	mov	r4, r9
 8005420:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005424:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005428:	3701      	adds	r7, #1
 800542a:	4638      	mov	r0, r7
 800542c:	f7fa ffea 	bl	8000404 <__aeabi_i2d>
 8005430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005434:	f7fb f850 	bl	80004d8 <__aeabi_dmul>
 8005438:	2200      	movs	r2, #0
 800543a:	4b62      	ldr	r3, [pc, #392]	; (80055c4 <_dtoa_r+0x5b4>)
 800543c:	f7fa fe96 	bl	800016c <__adddf3>
 8005440:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005444:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005448:	9611      	str	r6, [sp, #68]	; 0x44
 800544a:	2c00      	cmp	r4, #0
 800544c:	d15d      	bne.n	800550a <_dtoa_r+0x4fa>
 800544e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005452:	2200      	movs	r2, #0
 8005454:	4b5c      	ldr	r3, [pc, #368]	; (80055c8 <_dtoa_r+0x5b8>)
 8005456:	f7fa fe87 	bl	8000168 <__aeabi_dsub>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005462:	4633      	mov	r3, r6
 8005464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005466:	f7fb fac7 	bl	80009f8 <__aeabi_dcmpgt>
 800546a:	2800      	cmp	r0, #0
 800546c:	f040 829c 	bne.w	80059a8 <_dtoa_r+0x998>
 8005470:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005474:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005476:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800547a:	f7fb fa9f 	bl	80009bc <__aeabi_dcmplt>
 800547e:	2800      	cmp	r0, #0
 8005480:	f040 8290 	bne.w	80059a4 <_dtoa_r+0x994>
 8005484:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005488:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800548c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800548e:	2b00      	cmp	r3, #0
 8005490:	f2c0 8152 	blt.w	8005738 <_dtoa_r+0x728>
 8005494:	f1ba 0f0e 	cmp.w	sl, #14
 8005498:	f300 814e 	bgt.w	8005738 <_dtoa_r+0x728>
 800549c:	4b45      	ldr	r3, [pc, #276]	; (80055b4 <_dtoa_r+0x5a4>)
 800549e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054a6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80054aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f280 80db 	bge.w	8005668 <_dtoa_r+0x658>
 80054b2:	9b08      	ldr	r3, [sp, #32]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f300 80d7 	bgt.w	8005668 <_dtoa_r+0x658>
 80054ba:	f040 8272 	bne.w	80059a2 <_dtoa_r+0x992>
 80054be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054c2:	2200      	movs	r2, #0
 80054c4:	4b40      	ldr	r3, [pc, #256]	; (80055c8 <_dtoa_r+0x5b8>)
 80054c6:	f7fb f807 	bl	80004d8 <__aeabi_dmul>
 80054ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054ce:	f7fb fa89 	bl	80009e4 <__aeabi_dcmpge>
 80054d2:	9c08      	ldr	r4, [sp, #32]
 80054d4:	4626      	mov	r6, r4
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f040 8248 	bne.w	800596c <_dtoa_r+0x95c>
 80054dc:	2331      	movs	r3, #49	; 0x31
 80054de:	9f03      	ldr	r7, [sp, #12]
 80054e0:	f10a 0a01 	add.w	sl, sl, #1
 80054e4:	f807 3b01 	strb.w	r3, [r7], #1
 80054e8:	e244      	b.n	8005974 <_dtoa_r+0x964>
 80054ea:	07e2      	lsls	r2, r4, #31
 80054ec:	d505      	bpl.n	80054fa <_dtoa_r+0x4ea>
 80054ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054f2:	f7fa fff1 	bl	80004d8 <__aeabi_dmul>
 80054f6:	2301      	movs	r3, #1
 80054f8:	3701      	adds	r7, #1
 80054fa:	1064      	asrs	r4, r4, #1
 80054fc:	3608      	adds	r6, #8
 80054fe:	e76d      	b.n	80053dc <_dtoa_r+0x3cc>
 8005500:	2702      	movs	r7, #2
 8005502:	e770      	b.n	80053e6 <_dtoa_r+0x3d6>
 8005504:	46d0      	mov	r8, sl
 8005506:	9c08      	ldr	r4, [sp, #32]
 8005508:	e78f      	b.n	800542a <_dtoa_r+0x41a>
 800550a:	9903      	ldr	r1, [sp, #12]
 800550c:	4b29      	ldr	r3, [pc, #164]	; (80055b4 <_dtoa_r+0x5a4>)
 800550e:	4421      	add	r1, r4
 8005510:	9112      	str	r1, [sp, #72]	; 0x48
 8005512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005514:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005518:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800551c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005520:	2900      	cmp	r1, #0
 8005522:	d055      	beq.n	80055d0 <_dtoa_r+0x5c0>
 8005524:	2000      	movs	r0, #0
 8005526:	4929      	ldr	r1, [pc, #164]	; (80055cc <_dtoa_r+0x5bc>)
 8005528:	f7fb f900 	bl	800072c <__aeabi_ddiv>
 800552c:	463b      	mov	r3, r7
 800552e:	4632      	mov	r2, r6
 8005530:	f7fa fe1a 	bl	8000168 <__aeabi_dsub>
 8005534:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005538:	9f03      	ldr	r7, [sp, #12]
 800553a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800553e:	f7fb fa7b 	bl	8000a38 <__aeabi_d2iz>
 8005542:	4604      	mov	r4, r0
 8005544:	f7fa ff5e 	bl	8000404 <__aeabi_i2d>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005550:	f7fa fe0a 	bl	8000168 <__aeabi_dsub>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	3430      	adds	r4, #48	; 0x30
 800555a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800555e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005562:	f807 4b01 	strb.w	r4, [r7], #1
 8005566:	f7fb fa29 	bl	80009bc <__aeabi_dcmplt>
 800556a:	2800      	cmp	r0, #0
 800556c:	d174      	bne.n	8005658 <_dtoa_r+0x648>
 800556e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005572:	2000      	movs	r0, #0
 8005574:	4911      	ldr	r1, [pc, #68]	; (80055bc <_dtoa_r+0x5ac>)
 8005576:	f7fa fdf7 	bl	8000168 <__aeabi_dsub>
 800557a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800557e:	f7fb fa1d 	bl	80009bc <__aeabi_dcmplt>
 8005582:	2800      	cmp	r0, #0
 8005584:	f040 80b7 	bne.w	80056f6 <_dtoa_r+0x6e6>
 8005588:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800558a:	429f      	cmp	r7, r3
 800558c:	f43f af7a 	beq.w	8005484 <_dtoa_r+0x474>
 8005590:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005594:	2200      	movs	r2, #0
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <_dtoa_r+0x5b0>)
 8005598:	f7fa ff9e 	bl	80004d8 <__aeabi_dmul>
 800559c:	2200      	movs	r2, #0
 800559e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <_dtoa_r+0x5b0>)
 80055a8:	f7fa ff96 	bl	80004d8 <__aeabi_dmul>
 80055ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055b0:	e7c3      	b.n	800553a <_dtoa_r+0x52a>
 80055b2:	bf00      	nop
 80055b4:	08007588 	.word	0x08007588
 80055b8:	08007560 	.word	0x08007560
 80055bc:	3ff00000 	.word	0x3ff00000
 80055c0:	40240000 	.word	0x40240000
 80055c4:	401c0000 	.word	0x401c0000
 80055c8:	40140000 	.word	0x40140000
 80055cc:	3fe00000 	.word	0x3fe00000
 80055d0:	4630      	mov	r0, r6
 80055d2:	4639      	mov	r1, r7
 80055d4:	f7fa ff80 	bl	80004d8 <__aeabi_dmul>
 80055d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055de:	9c03      	ldr	r4, [sp, #12]
 80055e0:	9314      	str	r3, [sp, #80]	; 0x50
 80055e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055e6:	f7fb fa27 	bl	8000a38 <__aeabi_d2iz>
 80055ea:	9015      	str	r0, [sp, #84]	; 0x54
 80055ec:	f7fa ff0a 	bl	8000404 <__aeabi_i2d>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055f8:	f7fa fdb6 	bl	8000168 <__aeabi_dsub>
 80055fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055fe:	4606      	mov	r6, r0
 8005600:	3330      	adds	r3, #48	; 0x30
 8005602:	f804 3b01 	strb.w	r3, [r4], #1
 8005606:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005608:	460f      	mov	r7, r1
 800560a:	429c      	cmp	r4, r3
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	d124      	bne.n	800565c <_dtoa_r+0x64c>
 8005612:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005616:	4bb0      	ldr	r3, [pc, #704]	; (80058d8 <_dtoa_r+0x8c8>)
 8005618:	f7fa fda8 	bl	800016c <__adddf3>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4630      	mov	r0, r6
 8005622:	4639      	mov	r1, r7
 8005624:	f7fb f9e8 	bl	80009f8 <__aeabi_dcmpgt>
 8005628:	2800      	cmp	r0, #0
 800562a:	d163      	bne.n	80056f4 <_dtoa_r+0x6e4>
 800562c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005630:	2000      	movs	r0, #0
 8005632:	49a9      	ldr	r1, [pc, #676]	; (80058d8 <_dtoa_r+0x8c8>)
 8005634:	f7fa fd98 	bl	8000168 <__aeabi_dsub>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f7fb f9bc 	bl	80009bc <__aeabi_dcmplt>
 8005644:	2800      	cmp	r0, #0
 8005646:	f43f af1d 	beq.w	8005484 <_dtoa_r+0x474>
 800564a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800564c:	1e7b      	subs	r3, r7, #1
 800564e:	9314      	str	r3, [sp, #80]	; 0x50
 8005650:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005654:	2b30      	cmp	r3, #48	; 0x30
 8005656:	d0f8      	beq.n	800564a <_dtoa_r+0x63a>
 8005658:	46c2      	mov	sl, r8
 800565a:	e03b      	b.n	80056d4 <_dtoa_r+0x6c4>
 800565c:	4b9f      	ldr	r3, [pc, #636]	; (80058dc <_dtoa_r+0x8cc>)
 800565e:	f7fa ff3b 	bl	80004d8 <__aeabi_dmul>
 8005662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005666:	e7bc      	b.n	80055e2 <_dtoa_r+0x5d2>
 8005668:	9f03      	ldr	r7, [sp, #12]
 800566a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800566e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005672:	4640      	mov	r0, r8
 8005674:	4649      	mov	r1, r9
 8005676:	f7fb f859 	bl	800072c <__aeabi_ddiv>
 800567a:	f7fb f9dd 	bl	8000a38 <__aeabi_d2iz>
 800567e:	4604      	mov	r4, r0
 8005680:	f7fa fec0 	bl	8000404 <__aeabi_i2d>
 8005684:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005688:	f7fa ff26 	bl	80004d8 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4640      	mov	r0, r8
 8005692:	4649      	mov	r1, r9
 8005694:	f7fa fd68 	bl	8000168 <__aeabi_dsub>
 8005698:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800569c:	f807 6b01 	strb.w	r6, [r7], #1
 80056a0:	9e03      	ldr	r6, [sp, #12]
 80056a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80056a6:	1bbe      	subs	r6, r7, r6
 80056a8:	45b4      	cmp	ip, r6
 80056aa:	4602      	mov	r2, r0
 80056ac:	460b      	mov	r3, r1
 80056ae:	d136      	bne.n	800571e <_dtoa_r+0x70e>
 80056b0:	f7fa fd5c 	bl	800016c <__adddf3>
 80056b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b8:	4680      	mov	r8, r0
 80056ba:	4689      	mov	r9, r1
 80056bc:	f7fb f99c 	bl	80009f8 <__aeabi_dcmpgt>
 80056c0:	bb58      	cbnz	r0, 800571a <_dtoa_r+0x70a>
 80056c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056c6:	4640      	mov	r0, r8
 80056c8:	4649      	mov	r1, r9
 80056ca:	f7fb f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80056ce:	b108      	cbz	r0, 80056d4 <_dtoa_r+0x6c4>
 80056d0:	07e1      	lsls	r1, r4, #31
 80056d2:	d422      	bmi.n	800571a <_dtoa_r+0x70a>
 80056d4:	4628      	mov	r0, r5
 80056d6:	4659      	mov	r1, fp
 80056d8:	f000 faf0 	bl	8005cbc <_Bfree>
 80056dc:	2300      	movs	r3, #0
 80056de:	703b      	strb	r3, [r7, #0]
 80056e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056e2:	f10a 0001 	add.w	r0, sl, #1
 80056e6:	6018      	str	r0, [r3, #0]
 80056e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f43f acde 	beq.w	80050ac <_dtoa_r+0x9c>
 80056f0:	601f      	str	r7, [r3, #0]
 80056f2:	e4db      	b.n	80050ac <_dtoa_r+0x9c>
 80056f4:	4627      	mov	r7, r4
 80056f6:	463b      	mov	r3, r7
 80056f8:	461f      	mov	r7, r3
 80056fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056fe:	2a39      	cmp	r2, #57	; 0x39
 8005700:	d107      	bne.n	8005712 <_dtoa_r+0x702>
 8005702:	9a03      	ldr	r2, [sp, #12]
 8005704:	429a      	cmp	r2, r3
 8005706:	d1f7      	bne.n	80056f8 <_dtoa_r+0x6e8>
 8005708:	2230      	movs	r2, #48	; 0x30
 800570a:	9903      	ldr	r1, [sp, #12]
 800570c:	f108 0801 	add.w	r8, r8, #1
 8005710:	700a      	strb	r2, [r1, #0]
 8005712:	781a      	ldrb	r2, [r3, #0]
 8005714:	3201      	adds	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e79e      	b.n	8005658 <_dtoa_r+0x648>
 800571a:	46d0      	mov	r8, sl
 800571c:	e7eb      	b.n	80056f6 <_dtoa_r+0x6e6>
 800571e:	2200      	movs	r2, #0
 8005720:	4b6e      	ldr	r3, [pc, #440]	; (80058dc <_dtoa_r+0x8cc>)
 8005722:	f7fa fed9 	bl	80004d8 <__aeabi_dmul>
 8005726:	2200      	movs	r2, #0
 8005728:	2300      	movs	r3, #0
 800572a:	4680      	mov	r8, r0
 800572c:	4689      	mov	r9, r1
 800572e:	f7fb f93b 	bl	80009a8 <__aeabi_dcmpeq>
 8005732:	2800      	cmp	r0, #0
 8005734:	d09b      	beq.n	800566e <_dtoa_r+0x65e>
 8005736:	e7cd      	b.n	80056d4 <_dtoa_r+0x6c4>
 8005738:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800573a:	2a00      	cmp	r2, #0
 800573c:	f000 80d0 	beq.w	80058e0 <_dtoa_r+0x8d0>
 8005740:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005742:	2a01      	cmp	r2, #1
 8005744:	f300 80ae 	bgt.w	80058a4 <_dtoa_r+0x894>
 8005748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800574a:	2a00      	cmp	r2, #0
 800574c:	f000 80a6 	beq.w	800589c <_dtoa_r+0x88c>
 8005750:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005756:	9f06      	ldr	r7, [sp, #24]
 8005758:	9a06      	ldr	r2, [sp, #24]
 800575a:	2101      	movs	r1, #1
 800575c:	441a      	add	r2, r3
 800575e:	9206      	str	r2, [sp, #24]
 8005760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005762:	4628      	mov	r0, r5
 8005764:	441a      	add	r2, r3
 8005766:	9209      	str	r2, [sp, #36]	; 0x24
 8005768:	f000 fb5e 	bl	8005e28 <__i2b>
 800576c:	4606      	mov	r6, r0
 800576e:	2f00      	cmp	r7, #0
 8005770:	dd0c      	ble.n	800578c <_dtoa_r+0x77c>
 8005772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	dd09      	ble.n	800578c <_dtoa_r+0x77c>
 8005778:	42bb      	cmp	r3, r7
 800577a:	bfa8      	it	ge
 800577c:	463b      	movge	r3, r7
 800577e:	9a06      	ldr	r2, [sp, #24]
 8005780:	1aff      	subs	r7, r7, r3
 8005782:	1ad2      	subs	r2, r2, r3
 8005784:	9206      	str	r2, [sp, #24]
 8005786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	9309      	str	r3, [sp, #36]	; 0x24
 800578c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578e:	b1f3      	cbz	r3, 80057ce <_dtoa_r+0x7be>
 8005790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 80a8 	beq.w	80058e8 <_dtoa_r+0x8d8>
 8005798:	2c00      	cmp	r4, #0
 800579a:	dd10      	ble.n	80057be <_dtoa_r+0x7ae>
 800579c:	4631      	mov	r1, r6
 800579e:	4622      	mov	r2, r4
 80057a0:	4628      	mov	r0, r5
 80057a2:	f000 fbff 	bl	8005fa4 <__pow5mult>
 80057a6:	465a      	mov	r2, fp
 80057a8:	4601      	mov	r1, r0
 80057aa:	4606      	mov	r6, r0
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 fb51 	bl	8005e54 <__multiply>
 80057b2:	4680      	mov	r8, r0
 80057b4:	4659      	mov	r1, fp
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 fa80 	bl	8005cbc <_Bfree>
 80057bc:	46c3      	mov	fp, r8
 80057be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c0:	1b1a      	subs	r2, r3, r4
 80057c2:	d004      	beq.n	80057ce <_dtoa_r+0x7be>
 80057c4:	4659      	mov	r1, fp
 80057c6:	4628      	mov	r0, r5
 80057c8:	f000 fbec 	bl	8005fa4 <__pow5mult>
 80057cc:	4683      	mov	fp, r0
 80057ce:	2101      	movs	r1, #1
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 fb29 	bl	8005e28 <__i2b>
 80057d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d8:	4604      	mov	r4, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f340 8086 	ble.w	80058ec <_dtoa_r+0x8dc>
 80057e0:	461a      	mov	r2, r3
 80057e2:	4601      	mov	r1, r0
 80057e4:	4628      	mov	r0, r5
 80057e6:	f000 fbdd 	bl	8005fa4 <__pow5mult>
 80057ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057ec:	4604      	mov	r4, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	dd7f      	ble.n	80058f2 <_dtoa_r+0x8e2>
 80057f2:	f04f 0800 	mov.w	r8, #0
 80057f6:	6923      	ldr	r3, [r4, #16]
 80057f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057fc:	6918      	ldr	r0, [r3, #16]
 80057fe:	f000 fac5 	bl	8005d8c <__hi0bits>
 8005802:	f1c0 0020 	rsb	r0, r0, #32
 8005806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005808:	4418      	add	r0, r3
 800580a:	f010 001f 	ands.w	r0, r0, #31
 800580e:	f000 8092 	beq.w	8005936 <_dtoa_r+0x926>
 8005812:	f1c0 0320 	rsb	r3, r0, #32
 8005816:	2b04      	cmp	r3, #4
 8005818:	f340 808a 	ble.w	8005930 <_dtoa_r+0x920>
 800581c:	f1c0 001c 	rsb	r0, r0, #28
 8005820:	9b06      	ldr	r3, [sp, #24]
 8005822:	4407      	add	r7, r0
 8005824:	4403      	add	r3, r0
 8005826:	9306      	str	r3, [sp, #24]
 8005828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582a:	4403      	add	r3, r0
 800582c:	9309      	str	r3, [sp, #36]	; 0x24
 800582e:	9b06      	ldr	r3, [sp, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	dd05      	ble.n	8005840 <_dtoa_r+0x830>
 8005834:	4659      	mov	r1, fp
 8005836:	461a      	mov	r2, r3
 8005838:	4628      	mov	r0, r5
 800583a:	f000 fc0d 	bl	8006058 <__lshift>
 800583e:	4683      	mov	fp, r0
 8005840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005842:	2b00      	cmp	r3, #0
 8005844:	dd05      	ble.n	8005852 <_dtoa_r+0x842>
 8005846:	4621      	mov	r1, r4
 8005848:	461a      	mov	r2, r3
 800584a:	4628      	mov	r0, r5
 800584c:	f000 fc04 	bl	8006058 <__lshift>
 8005850:	4604      	mov	r4, r0
 8005852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d070      	beq.n	800593a <_dtoa_r+0x92a>
 8005858:	4621      	mov	r1, r4
 800585a:	4658      	mov	r0, fp
 800585c:	f000 fc6c 	bl	8006138 <__mcmp>
 8005860:	2800      	cmp	r0, #0
 8005862:	da6a      	bge.n	800593a <_dtoa_r+0x92a>
 8005864:	2300      	movs	r3, #0
 8005866:	4659      	mov	r1, fp
 8005868:	220a      	movs	r2, #10
 800586a:	4628      	mov	r0, r5
 800586c:	f000 fa48 	bl	8005d00 <__multadd>
 8005870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005872:	4683      	mov	fp, r0
 8005874:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 8194 	beq.w	8005ba6 <_dtoa_r+0xb96>
 800587e:	4631      	mov	r1, r6
 8005880:	2300      	movs	r3, #0
 8005882:	220a      	movs	r2, #10
 8005884:	4628      	mov	r0, r5
 8005886:	f000 fa3b 	bl	8005d00 <__multadd>
 800588a:	f1b9 0f00 	cmp.w	r9, #0
 800588e:	4606      	mov	r6, r0
 8005890:	f300 8093 	bgt.w	80059ba <_dtoa_r+0x9aa>
 8005894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005896:	2b02      	cmp	r3, #2
 8005898:	dc57      	bgt.n	800594a <_dtoa_r+0x93a>
 800589a:	e08e      	b.n	80059ba <_dtoa_r+0x9aa>
 800589c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800589e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058a2:	e757      	b.n	8005754 <_dtoa_r+0x744>
 80058a4:	9b08      	ldr	r3, [sp, #32]
 80058a6:	1e5c      	subs	r4, r3, #1
 80058a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	bfb7      	itett	lt
 80058ae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80058b0:	1b1c      	subge	r4, r3, r4
 80058b2:	1ae2      	sublt	r2, r4, r3
 80058b4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80058b6:	bfbe      	ittt	lt
 80058b8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80058ba:	189b      	addlt	r3, r3, r2
 80058bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80058be:	9b08      	ldr	r3, [sp, #32]
 80058c0:	bfb8      	it	lt
 80058c2:	2400      	movlt	r4, #0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfbb      	ittet	lt
 80058c8:	9b06      	ldrlt	r3, [sp, #24]
 80058ca:	9a08      	ldrlt	r2, [sp, #32]
 80058cc:	9f06      	ldrge	r7, [sp, #24]
 80058ce:	1a9f      	sublt	r7, r3, r2
 80058d0:	bfac      	ite	ge
 80058d2:	9b08      	ldrge	r3, [sp, #32]
 80058d4:	2300      	movlt	r3, #0
 80058d6:	e73f      	b.n	8005758 <_dtoa_r+0x748>
 80058d8:	3fe00000 	.word	0x3fe00000
 80058dc:	40240000 	.word	0x40240000
 80058e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058e2:	9f06      	ldr	r7, [sp, #24]
 80058e4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058e6:	e742      	b.n	800576e <_dtoa_r+0x75e>
 80058e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ea:	e76b      	b.n	80057c4 <_dtoa_r+0x7b4>
 80058ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	dc19      	bgt.n	8005926 <_dtoa_r+0x916>
 80058f2:	9b04      	ldr	r3, [sp, #16]
 80058f4:	b9bb      	cbnz	r3, 8005926 <_dtoa_r+0x916>
 80058f6:	9b05      	ldr	r3, [sp, #20]
 80058f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058fc:	b99b      	cbnz	r3, 8005926 <_dtoa_r+0x916>
 80058fe:	9b05      	ldr	r3, [sp, #20]
 8005900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005904:	0d1b      	lsrs	r3, r3, #20
 8005906:	051b      	lsls	r3, r3, #20
 8005908:	b183      	cbz	r3, 800592c <_dtoa_r+0x91c>
 800590a:	f04f 0801 	mov.w	r8, #1
 800590e:	9b06      	ldr	r3, [sp, #24]
 8005910:	3301      	adds	r3, #1
 8005912:	9306      	str	r3, [sp, #24]
 8005914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005916:	3301      	adds	r3, #1
 8005918:	9309      	str	r3, [sp, #36]	; 0x24
 800591a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	f47f af6a 	bne.w	80057f6 <_dtoa_r+0x7e6>
 8005922:	2001      	movs	r0, #1
 8005924:	e76f      	b.n	8005806 <_dtoa_r+0x7f6>
 8005926:	f04f 0800 	mov.w	r8, #0
 800592a:	e7f6      	b.n	800591a <_dtoa_r+0x90a>
 800592c:	4698      	mov	r8, r3
 800592e:	e7f4      	b.n	800591a <_dtoa_r+0x90a>
 8005930:	f43f af7d 	beq.w	800582e <_dtoa_r+0x81e>
 8005934:	4618      	mov	r0, r3
 8005936:	301c      	adds	r0, #28
 8005938:	e772      	b.n	8005820 <_dtoa_r+0x810>
 800593a:	9b08      	ldr	r3, [sp, #32]
 800593c:	2b00      	cmp	r3, #0
 800593e:	dc36      	bgt.n	80059ae <_dtoa_r+0x99e>
 8005940:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005942:	2b02      	cmp	r3, #2
 8005944:	dd33      	ble.n	80059ae <_dtoa_r+0x99e>
 8005946:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800594a:	f1b9 0f00 	cmp.w	r9, #0
 800594e:	d10d      	bne.n	800596c <_dtoa_r+0x95c>
 8005950:	4621      	mov	r1, r4
 8005952:	464b      	mov	r3, r9
 8005954:	2205      	movs	r2, #5
 8005956:	4628      	mov	r0, r5
 8005958:	f000 f9d2 	bl	8005d00 <__multadd>
 800595c:	4601      	mov	r1, r0
 800595e:	4604      	mov	r4, r0
 8005960:	4658      	mov	r0, fp
 8005962:	f000 fbe9 	bl	8006138 <__mcmp>
 8005966:	2800      	cmp	r0, #0
 8005968:	f73f adb8 	bgt.w	80054dc <_dtoa_r+0x4cc>
 800596c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800596e:	9f03      	ldr	r7, [sp, #12]
 8005970:	ea6f 0a03 	mvn.w	sl, r3
 8005974:	f04f 0800 	mov.w	r8, #0
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f99e 	bl	8005cbc <_Bfree>
 8005980:	2e00      	cmp	r6, #0
 8005982:	f43f aea7 	beq.w	80056d4 <_dtoa_r+0x6c4>
 8005986:	f1b8 0f00 	cmp.w	r8, #0
 800598a:	d005      	beq.n	8005998 <_dtoa_r+0x988>
 800598c:	45b0      	cmp	r8, r6
 800598e:	d003      	beq.n	8005998 <_dtoa_r+0x988>
 8005990:	4641      	mov	r1, r8
 8005992:	4628      	mov	r0, r5
 8005994:	f000 f992 	bl	8005cbc <_Bfree>
 8005998:	4631      	mov	r1, r6
 800599a:	4628      	mov	r0, r5
 800599c:	f000 f98e 	bl	8005cbc <_Bfree>
 80059a0:	e698      	b.n	80056d4 <_dtoa_r+0x6c4>
 80059a2:	2400      	movs	r4, #0
 80059a4:	4626      	mov	r6, r4
 80059a6:	e7e1      	b.n	800596c <_dtoa_r+0x95c>
 80059a8:	46c2      	mov	sl, r8
 80059aa:	4626      	mov	r6, r4
 80059ac:	e596      	b.n	80054dc <_dtoa_r+0x4cc>
 80059ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80fd 	beq.w	8005bb4 <_dtoa_r+0xba4>
 80059ba:	2f00      	cmp	r7, #0
 80059bc:	dd05      	ble.n	80059ca <_dtoa_r+0x9ba>
 80059be:	4631      	mov	r1, r6
 80059c0:	463a      	mov	r2, r7
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 fb48 	bl	8006058 <__lshift>
 80059c8:	4606      	mov	r6, r0
 80059ca:	f1b8 0f00 	cmp.w	r8, #0
 80059ce:	d05c      	beq.n	8005a8a <_dtoa_r+0xa7a>
 80059d0:	4628      	mov	r0, r5
 80059d2:	6871      	ldr	r1, [r6, #4]
 80059d4:	f000 f932 	bl	8005c3c <_Balloc>
 80059d8:	4607      	mov	r7, r0
 80059da:	b928      	cbnz	r0, 80059e8 <_dtoa_r+0x9d8>
 80059dc:	4602      	mov	r2, r0
 80059de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059e2:	4b7f      	ldr	r3, [pc, #508]	; (8005be0 <_dtoa_r+0xbd0>)
 80059e4:	f7ff bb28 	b.w	8005038 <_dtoa_r+0x28>
 80059e8:	6932      	ldr	r2, [r6, #16]
 80059ea:	f106 010c 	add.w	r1, r6, #12
 80059ee:	3202      	adds	r2, #2
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	300c      	adds	r0, #12
 80059f4:	f000 f914 	bl	8005c20 <memcpy>
 80059f8:	2201      	movs	r2, #1
 80059fa:	4639      	mov	r1, r7
 80059fc:	4628      	mov	r0, r5
 80059fe:	f000 fb2b 	bl	8006058 <__lshift>
 8005a02:	46b0      	mov	r8, r6
 8005a04:	4606      	mov	r6, r0
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	9308      	str	r3, [sp, #32]
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	444b      	add	r3, r9
 8005a10:	930a      	str	r3, [sp, #40]	; 0x28
 8005a12:	9b04      	ldr	r3, [sp, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1a:	9b08      	ldr	r3, [sp, #32]
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	4658      	mov	r0, fp
 8005a22:	9304      	str	r3, [sp, #16]
 8005a24:	f7ff fa68 	bl	8004ef8 <quorem>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	3330      	adds	r3, #48	; 0x30
 8005a2e:	9006      	str	r0, [sp, #24]
 8005a30:	4658      	mov	r0, fp
 8005a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a34:	f000 fb80 	bl	8006138 <__mcmp>
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4681      	mov	r9, r0
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 fb96 	bl	8006170 <__mdiff>
 8005a44:	68c2      	ldr	r2, [r0, #12]
 8005a46:	4607      	mov	r7, r0
 8005a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4a:	bb02      	cbnz	r2, 8005a8e <_dtoa_r+0xa7e>
 8005a4c:	4601      	mov	r1, r0
 8005a4e:	4658      	mov	r0, fp
 8005a50:	f000 fb72 	bl	8006138 <__mcmp>
 8005a54:	4602      	mov	r2, r0
 8005a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a58:	4639      	mov	r1, r7
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a60:	f000 f92c 	bl	8005cbc <_Bfree>
 8005a64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a68:	9f08      	ldr	r7, [sp, #32]
 8005a6a:	ea43 0102 	orr.w	r1, r3, r2
 8005a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a70:	430b      	orrs	r3, r1
 8005a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a74:	d10d      	bne.n	8005a92 <_dtoa_r+0xa82>
 8005a76:	2b39      	cmp	r3, #57	; 0x39
 8005a78:	d029      	beq.n	8005ace <_dtoa_r+0xabe>
 8005a7a:	f1b9 0f00 	cmp.w	r9, #0
 8005a7e:	dd01      	ble.n	8005a84 <_dtoa_r+0xa74>
 8005a80:	9b06      	ldr	r3, [sp, #24]
 8005a82:	3331      	adds	r3, #49	; 0x31
 8005a84:	9a04      	ldr	r2, [sp, #16]
 8005a86:	7013      	strb	r3, [r2, #0]
 8005a88:	e776      	b.n	8005978 <_dtoa_r+0x968>
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	e7b9      	b.n	8005a02 <_dtoa_r+0x9f2>
 8005a8e:	2201      	movs	r2, #1
 8005a90:	e7e2      	b.n	8005a58 <_dtoa_r+0xa48>
 8005a92:	f1b9 0f00 	cmp.w	r9, #0
 8005a96:	db06      	blt.n	8005aa6 <_dtoa_r+0xa96>
 8005a98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a9a:	ea41 0909 	orr.w	r9, r1, r9
 8005a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aa0:	ea59 0101 	orrs.w	r1, r9, r1
 8005aa4:	d120      	bne.n	8005ae8 <_dtoa_r+0xad8>
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	ddec      	ble.n	8005a84 <_dtoa_r+0xa74>
 8005aaa:	4659      	mov	r1, fp
 8005aac:	2201      	movs	r2, #1
 8005aae:	4628      	mov	r0, r5
 8005ab0:	9308      	str	r3, [sp, #32]
 8005ab2:	f000 fad1 	bl	8006058 <__lshift>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4683      	mov	fp, r0
 8005aba:	f000 fb3d 	bl	8006138 <__mcmp>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	9b08      	ldr	r3, [sp, #32]
 8005ac2:	dc02      	bgt.n	8005aca <_dtoa_r+0xaba>
 8005ac4:	d1de      	bne.n	8005a84 <_dtoa_r+0xa74>
 8005ac6:	07da      	lsls	r2, r3, #31
 8005ac8:	d5dc      	bpl.n	8005a84 <_dtoa_r+0xa74>
 8005aca:	2b39      	cmp	r3, #57	; 0x39
 8005acc:	d1d8      	bne.n	8005a80 <_dtoa_r+0xa70>
 8005ace:	2339      	movs	r3, #57	; 0x39
 8005ad0:	9a04      	ldr	r2, [sp, #16]
 8005ad2:	7013      	strb	r3, [r2, #0]
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	461f      	mov	r7, r3
 8005ad8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	2a39      	cmp	r2, #57	; 0x39
 8005ae0:	d050      	beq.n	8005b84 <_dtoa_r+0xb74>
 8005ae2:	3201      	adds	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e747      	b.n	8005978 <_dtoa_r+0x968>
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	dd03      	ble.n	8005af4 <_dtoa_r+0xae4>
 8005aec:	2b39      	cmp	r3, #57	; 0x39
 8005aee:	d0ee      	beq.n	8005ace <_dtoa_r+0xabe>
 8005af0:	3301      	adds	r3, #1
 8005af2:	e7c7      	b.n	8005a84 <_dtoa_r+0xa74>
 8005af4:	9a08      	ldr	r2, [sp, #32]
 8005af6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005af8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005afc:	428a      	cmp	r2, r1
 8005afe:	d02a      	beq.n	8005b56 <_dtoa_r+0xb46>
 8005b00:	4659      	mov	r1, fp
 8005b02:	2300      	movs	r3, #0
 8005b04:	220a      	movs	r2, #10
 8005b06:	4628      	mov	r0, r5
 8005b08:	f000 f8fa 	bl	8005d00 <__multadd>
 8005b0c:	45b0      	cmp	r8, r6
 8005b0e:	4683      	mov	fp, r0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	f04f 020a 	mov.w	r2, #10
 8005b18:	4641      	mov	r1, r8
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	d107      	bne.n	8005b2e <_dtoa_r+0xb1e>
 8005b1e:	f000 f8ef 	bl	8005d00 <__multadd>
 8005b22:	4680      	mov	r8, r0
 8005b24:	4606      	mov	r6, r0
 8005b26:	9b08      	ldr	r3, [sp, #32]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	9308      	str	r3, [sp, #32]
 8005b2c:	e775      	b.n	8005a1a <_dtoa_r+0xa0a>
 8005b2e:	f000 f8e7 	bl	8005d00 <__multadd>
 8005b32:	4631      	mov	r1, r6
 8005b34:	4680      	mov	r8, r0
 8005b36:	2300      	movs	r3, #0
 8005b38:	220a      	movs	r2, #10
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 f8e0 	bl	8005d00 <__multadd>
 8005b40:	4606      	mov	r6, r0
 8005b42:	e7f0      	b.n	8005b26 <_dtoa_r+0xb16>
 8005b44:	f1b9 0f00 	cmp.w	r9, #0
 8005b48:	bfcc      	ite	gt
 8005b4a:	464f      	movgt	r7, r9
 8005b4c:	2701      	movle	r7, #1
 8005b4e:	f04f 0800 	mov.w	r8, #0
 8005b52:	9a03      	ldr	r2, [sp, #12]
 8005b54:	4417      	add	r7, r2
 8005b56:	4659      	mov	r1, fp
 8005b58:	2201      	movs	r2, #1
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	9308      	str	r3, [sp, #32]
 8005b5e:	f000 fa7b 	bl	8006058 <__lshift>
 8005b62:	4621      	mov	r1, r4
 8005b64:	4683      	mov	fp, r0
 8005b66:	f000 fae7 	bl	8006138 <__mcmp>
 8005b6a:	2800      	cmp	r0, #0
 8005b6c:	dcb2      	bgt.n	8005ad4 <_dtoa_r+0xac4>
 8005b6e:	d102      	bne.n	8005b76 <_dtoa_r+0xb66>
 8005b70:	9b08      	ldr	r3, [sp, #32]
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	d4ae      	bmi.n	8005ad4 <_dtoa_r+0xac4>
 8005b76:	463b      	mov	r3, r7
 8005b78:	461f      	mov	r7, r3
 8005b7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b7e:	2a30      	cmp	r2, #48	; 0x30
 8005b80:	d0fa      	beq.n	8005b78 <_dtoa_r+0xb68>
 8005b82:	e6f9      	b.n	8005978 <_dtoa_r+0x968>
 8005b84:	9a03      	ldr	r2, [sp, #12]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d1a5      	bne.n	8005ad6 <_dtoa_r+0xac6>
 8005b8a:	2331      	movs	r3, #49	; 0x31
 8005b8c:	f10a 0a01 	add.w	sl, sl, #1
 8005b90:	e779      	b.n	8005a86 <_dtoa_r+0xa76>
 8005b92:	4b14      	ldr	r3, [pc, #80]	; (8005be4 <_dtoa_r+0xbd4>)
 8005b94:	f7ff baa8 	b.w	80050e8 <_dtoa_r+0xd8>
 8005b98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f47f aa81 	bne.w	80050a2 <_dtoa_r+0x92>
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <_dtoa_r+0xbd8>)
 8005ba2:	f7ff baa1 	b.w	80050e8 <_dtoa_r+0xd8>
 8005ba6:	f1b9 0f00 	cmp.w	r9, #0
 8005baa:	dc03      	bgt.n	8005bb4 <_dtoa_r+0xba4>
 8005bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f73f aecb 	bgt.w	800594a <_dtoa_r+0x93a>
 8005bb4:	9f03      	ldr	r7, [sp, #12]
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	4658      	mov	r0, fp
 8005bba:	f7ff f99d 	bl	8004ef8 <quorem>
 8005bbe:	9a03      	ldr	r2, [sp, #12]
 8005bc0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005bc4:	f807 3b01 	strb.w	r3, [r7], #1
 8005bc8:	1aba      	subs	r2, r7, r2
 8005bca:	4591      	cmp	r9, r2
 8005bcc:	ddba      	ble.n	8005b44 <_dtoa_r+0xb34>
 8005bce:	4659      	mov	r1, fp
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	220a      	movs	r2, #10
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f000 f893 	bl	8005d00 <__multadd>
 8005bda:	4683      	mov	fp, r0
 8005bdc:	e7eb      	b.n	8005bb6 <_dtoa_r+0xba6>
 8005bde:	bf00      	nop
 8005be0:	080074ef 	.word	0x080074ef
 8005be4:	0800744c 	.word	0x0800744c
 8005be8:	08007470 	.word	0x08007470

08005bec <_localeconv_r>:
 8005bec:	4800      	ldr	r0, [pc, #0]	; (8005bf0 <_localeconv_r+0x4>)
 8005bee:	4770      	bx	lr
 8005bf0:	20000164 	.word	0x20000164

08005bf4 <malloc>:
 8005bf4:	4b02      	ldr	r3, [pc, #8]	; (8005c00 <malloc+0xc>)
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	f000 bc1d 	b.w	8006438 <_malloc_r>
 8005bfe:	bf00      	nop
 8005c00:	20000010 	.word	0x20000010

08005c04 <memchr>:
 8005c04:	4603      	mov	r3, r0
 8005c06:	b510      	push	{r4, lr}
 8005c08:	b2c9      	uxtb	r1, r1
 8005c0a:	4402      	add	r2, r0
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	d101      	bne.n	8005c16 <memchr+0x12>
 8005c12:	2000      	movs	r0, #0
 8005c14:	e003      	b.n	8005c1e <memchr+0x1a>
 8005c16:	7804      	ldrb	r4, [r0, #0]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	428c      	cmp	r4, r1
 8005c1c:	d1f6      	bne.n	8005c0c <memchr+0x8>
 8005c1e:	bd10      	pop	{r4, pc}

08005c20 <memcpy>:
 8005c20:	440a      	add	r2, r1
 8005c22:	4291      	cmp	r1, r2
 8005c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c28:	d100      	bne.n	8005c2c <memcpy+0xc>
 8005c2a:	4770      	bx	lr
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c32:	4291      	cmp	r1, r2
 8005c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c38:	d1f9      	bne.n	8005c2e <memcpy+0xe>
 8005c3a:	bd10      	pop	{r4, pc}

08005c3c <_Balloc>:
 8005c3c:	b570      	push	{r4, r5, r6, lr}
 8005c3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005c40:	4604      	mov	r4, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	b976      	cbnz	r6, 8005c64 <_Balloc+0x28>
 8005c46:	2010      	movs	r0, #16
 8005c48:	f7ff ffd4 	bl	8005bf4 <malloc>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	6260      	str	r0, [r4, #36]	; 0x24
 8005c50:	b920      	cbnz	r0, 8005c5c <_Balloc+0x20>
 8005c52:	2166      	movs	r1, #102	; 0x66
 8005c54:	4b17      	ldr	r3, [pc, #92]	; (8005cb4 <_Balloc+0x78>)
 8005c56:	4818      	ldr	r0, [pc, #96]	; (8005cb8 <_Balloc+0x7c>)
 8005c58:	f000 fdce 	bl	80067f8 <__assert_func>
 8005c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c60:	6006      	str	r6, [r0, #0]
 8005c62:	60c6      	str	r6, [r0, #12]
 8005c64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005c66:	68f3      	ldr	r3, [r6, #12]
 8005c68:	b183      	cbz	r3, 8005c8c <_Balloc+0x50>
 8005c6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c72:	b9b8      	cbnz	r0, 8005ca4 <_Balloc+0x68>
 8005c74:	2101      	movs	r1, #1
 8005c76:	fa01 f605 	lsl.w	r6, r1, r5
 8005c7a:	1d72      	adds	r2, r6, #5
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	0092      	lsls	r2, r2, #2
 8005c80:	f000 fb5e 	bl	8006340 <_calloc_r>
 8005c84:	b160      	cbz	r0, 8005ca0 <_Balloc+0x64>
 8005c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c8a:	e00e      	b.n	8005caa <_Balloc+0x6e>
 8005c8c:	2221      	movs	r2, #33	; 0x21
 8005c8e:	2104      	movs	r1, #4
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fb55 	bl	8006340 <_calloc_r>
 8005c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c98:	60f0      	str	r0, [r6, #12]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e4      	bne.n	8005c6a <_Balloc+0x2e>
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	6802      	ldr	r2, [r0, #0]
 8005ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005caa:	2300      	movs	r3, #0
 8005cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cb0:	e7f7      	b.n	8005ca2 <_Balloc+0x66>
 8005cb2:	bf00      	nop
 8005cb4:	0800747d 	.word	0x0800747d
 8005cb8:	08007500 	.word	0x08007500

08005cbc <_Bfree>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	b976      	cbnz	r6, 8005ce4 <_Bfree+0x28>
 8005cc6:	2010      	movs	r0, #16
 8005cc8:	f7ff ff94 	bl	8005bf4 <malloc>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	6268      	str	r0, [r5, #36]	; 0x24
 8005cd0:	b920      	cbnz	r0, 8005cdc <_Bfree+0x20>
 8005cd2:	218a      	movs	r1, #138	; 0x8a
 8005cd4:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <_Bfree+0x3c>)
 8005cd6:	4809      	ldr	r0, [pc, #36]	; (8005cfc <_Bfree+0x40>)
 8005cd8:	f000 fd8e 	bl	80067f8 <__assert_func>
 8005cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ce0:	6006      	str	r6, [r0, #0]
 8005ce2:	60c6      	str	r6, [r0, #12]
 8005ce4:	b13c      	cbz	r4, 8005cf6 <_Bfree+0x3a>
 8005ce6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ce8:	6862      	ldr	r2, [r4, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cf0:	6021      	str	r1, [r4, #0]
 8005cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	0800747d 	.word	0x0800747d
 8005cfc:	08007500 	.word	0x08007500

08005d00 <__multadd>:
 8005d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d04:	4607      	mov	r7, r0
 8005d06:	460c      	mov	r4, r1
 8005d08:	461e      	mov	r6, r3
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	690d      	ldr	r5, [r1, #16]
 8005d0e:	f101 0c14 	add.w	ip, r1, #20
 8005d12:	f8dc 3000 	ldr.w	r3, [ip]
 8005d16:	3001      	adds	r0, #1
 8005d18:	b299      	uxth	r1, r3
 8005d1a:	fb02 6101 	mla	r1, r2, r1, r6
 8005d1e:	0c1e      	lsrs	r6, r3, #16
 8005d20:	0c0b      	lsrs	r3, r1, #16
 8005d22:	fb02 3306 	mla	r3, r2, r6, r3
 8005d26:	b289      	uxth	r1, r1
 8005d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d2c:	4285      	cmp	r5, r0
 8005d2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d32:	f84c 1b04 	str.w	r1, [ip], #4
 8005d36:	dcec      	bgt.n	8005d12 <__multadd+0x12>
 8005d38:	b30e      	cbz	r6, 8005d7e <__multadd+0x7e>
 8005d3a:	68a3      	ldr	r3, [r4, #8]
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	dc19      	bgt.n	8005d74 <__multadd+0x74>
 8005d40:	6861      	ldr	r1, [r4, #4]
 8005d42:	4638      	mov	r0, r7
 8005d44:	3101      	adds	r1, #1
 8005d46:	f7ff ff79 	bl	8005c3c <_Balloc>
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	b928      	cbnz	r0, 8005d5a <__multadd+0x5a>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	21b5      	movs	r1, #181	; 0xb5
 8005d52:	4b0c      	ldr	r3, [pc, #48]	; (8005d84 <__multadd+0x84>)
 8005d54:	480c      	ldr	r0, [pc, #48]	; (8005d88 <__multadd+0x88>)
 8005d56:	f000 fd4f 	bl	80067f8 <__assert_func>
 8005d5a:	6922      	ldr	r2, [r4, #16]
 8005d5c:	f104 010c 	add.w	r1, r4, #12
 8005d60:	3202      	adds	r2, #2
 8005d62:	0092      	lsls	r2, r2, #2
 8005d64:	300c      	adds	r0, #12
 8005d66:	f7ff ff5b 	bl	8005c20 <memcpy>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7ff ffa5 	bl	8005cbc <_Bfree>
 8005d72:	4644      	mov	r4, r8
 8005d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d78:	3501      	adds	r5, #1
 8005d7a:	615e      	str	r6, [r3, #20]
 8005d7c:	6125      	str	r5, [r4, #16]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d84:	080074ef 	.word	0x080074ef
 8005d88:	08007500 	.word	0x08007500

08005d8c <__hi0bits>:
 8005d8c:	0c02      	lsrs	r2, r0, #16
 8005d8e:	0412      	lsls	r2, r2, #16
 8005d90:	4603      	mov	r3, r0
 8005d92:	b9ca      	cbnz	r2, 8005dc8 <__hi0bits+0x3c>
 8005d94:	0403      	lsls	r3, r0, #16
 8005d96:	2010      	movs	r0, #16
 8005d98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005d9c:	bf04      	itt	eq
 8005d9e:	021b      	lsleq	r3, r3, #8
 8005da0:	3008      	addeq	r0, #8
 8005da2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005da6:	bf04      	itt	eq
 8005da8:	011b      	lsleq	r3, r3, #4
 8005daa:	3004      	addeq	r0, #4
 8005dac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005db0:	bf04      	itt	eq
 8005db2:	009b      	lsleq	r3, r3, #2
 8005db4:	3002      	addeq	r0, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	db05      	blt.n	8005dc6 <__hi0bits+0x3a>
 8005dba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005dbe:	f100 0001 	add.w	r0, r0, #1
 8005dc2:	bf08      	it	eq
 8005dc4:	2020      	moveq	r0, #32
 8005dc6:	4770      	bx	lr
 8005dc8:	2000      	movs	r0, #0
 8005dca:	e7e5      	b.n	8005d98 <__hi0bits+0xc>

08005dcc <__lo0bits>:
 8005dcc:	6803      	ldr	r3, [r0, #0]
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f013 0007 	ands.w	r0, r3, #7
 8005dd4:	d00b      	beq.n	8005dee <__lo0bits+0x22>
 8005dd6:	07d9      	lsls	r1, r3, #31
 8005dd8:	d421      	bmi.n	8005e1e <__lo0bits+0x52>
 8005dda:	0798      	lsls	r0, r3, #30
 8005ddc:	bf49      	itett	mi
 8005dde:	085b      	lsrmi	r3, r3, #1
 8005de0:	089b      	lsrpl	r3, r3, #2
 8005de2:	2001      	movmi	r0, #1
 8005de4:	6013      	strmi	r3, [r2, #0]
 8005de6:	bf5c      	itt	pl
 8005de8:	2002      	movpl	r0, #2
 8005dea:	6013      	strpl	r3, [r2, #0]
 8005dec:	4770      	bx	lr
 8005dee:	b299      	uxth	r1, r3
 8005df0:	b909      	cbnz	r1, 8005df6 <__lo0bits+0x2a>
 8005df2:	2010      	movs	r0, #16
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	b2d9      	uxtb	r1, r3
 8005df8:	b909      	cbnz	r1, 8005dfe <__lo0bits+0x32>
 8005dfa:	3008      	adds	r0, #8
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	0719      	lsls	r1, r3, #28
 8005e00:	bf04      	itt	eq
 8005e02:	091b      	lsreq	r3, r3, #4
 8005e04:	3004      	addeq	r0, #4
 8005e06:	0799      	lsls	r1, r3, #30
 8005e08:	bf04      	itt	eq
 8005e0a:	089b      	lsreq	r3, r3, #2
 8005e0c:	3002      	addeq	r0, #2
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d403      	bmi.n	8005e1a <__lo0bits+0x4e>
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	f100 0001 	add.w	r0, r0, #1
 8005e18:	d003      	beq.n	8005e22 <__lo0bits+0x56>
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4770      	bx	lr
 8005e1e:	2000      	movs	r0, #0
 8005e20:	4770      	bx	lr
 8005e22:	2020      	movs	r0, #32
 8005e24:	4770      	bx	lr
	...

08005e28 <__i2b>:
 8005e28:	b510      	push	{r4, lr}
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	f7ff ff05 	bl	8005c3c <_Balloc>
 8005e32:	4602      	mov	r2, r0
 8005e34:	b928      	cbnz	r0, 8005e42 <__i2b+0x1a>
 8005e36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005e3a:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <__i2b+0x24>)
 8005e3c:	4804      	ldr	r0, [pc, #16]	; (8005e50 <__i2b+0x28>)
 8005e3e:	f000 fcdb 	bl	80067f8 <__assert_func>
 8005e42:	2301      	movs	r3, #1
 8005e44:	6144      	str	r4, [r0, #20]
 8005e46:	6103      	str	r3, [r0, #16]
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	bf00      	nop
 8005e4c:	080074ef 	.word	0x080074ef
 8005e50:	08007500 	.word	0x08007500

08005e54 <__multiply>:
 8005e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	4691      	mov	r9, r2
 8005e5a:	690a      	ldr	r2, [r1, #16]
 8005e5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e60:	460c      	mov	r4, r1
 8005e62:	429a      	cmp	r2, r3
 8005e64:	bfbe      	ittt	lt
 8005e66:	460b      	movlt	r3, r1
 8005e68:	464c      	movlt	r4, r9
 8005e6a:	4699      	movlt	r9, r3
 8005e6c:	6927      	ldr	r7, [r4, #16]
 8005e6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e72:	68a3      	ldr	r3, [r4, #8]
 8005e74:	6861      	ldr	r1, [r4, #4]
 8005e76:	eb07 060a 	add.w	r6, r7, sl
 8005e7a:	42b3      	cmp	r3, r6
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	bfb8      	it	lt
 8005e80:	3101      	addlt	r1, #1
 8005e82:	f7ff fedb 	bl	8005c3c <_Balloc>
 8005e86:	b930      	cbnz	r0, 8005e96 <__multiply+0x42>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	f240 115d 	movw	r1, #349	; 0x15d
 8005e8e:	4b43      	ldr	r3, [pc, #268]	; (8005f9c <__multiply+0x148>)
 8005e90:	4843      	ldr	r0, [pc, #268]	; (8005fa0 <__multiply+0x14c>)
 8005e92:	f000 fcb1 	bl	80067f8 <__assert_func>
 8005e96:	f100 0514 	add.w	r5, r0, #20
 8005e9a:	462b      	mov	r3, r5
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ea2:	4543      	cmp	r3, r8
 8005ea4:	d321      	bcc.n	8005eea <__multiply+0x96>
 8005ea6:	f104 0314 	add.w	r3, r4, #20
 8005eaa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005eae:	f109 0314 	add.w	r3, r9, #20
 8005eb2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005eb6:	9202      	str	r2, [sp, #8]
 8005eb8:	1b3a      	subs	r2, r7, r4
 8005eba:	3a15      	subs	r2, #21
 8005ebc:	f022 0203 	bic.w	r2, r2, #3
 8005ec0:	3204      	adds	r2, #4
 8005ec2:	f104 0115 	add.w	r1, r4, #21
 8005ec6:	428f      	cmp	r7, r1
 8005ec8:	bf38      	it	cc
 8005eca:	2204      	movcc	r2, #4
 8005ecc:	9201      	str	r2, [sp, #4]
 8005ece:	9a02      	ldr	r2, [sp, #8]
 8005ed0:	9303      	str	r3, [sp, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d80c      	bhi.n	8005ef0 <__multiply+0x9c>
 8005ed6:	2e00      	cmp	r6, #0
 8005ed8:	dd03      	ble.n	8005ee2 <__multiply+0x8e>
 8005eda:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d059      	beq.n	8005f96 <__multiply+0x142>
 8005ee2:	6106      	str	r6, [r0, #16]
 8005ee4:	b005      	add	sp, #20
 8005ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eea:	f843 2b04 	str.w	r2, [r3], #4
 8005eee:	e7d8      	b.n	8005ea2 <__multiply+0x4e>
 8005ef0:	f8b3 a000 	ldrh.w	sl, [r3]
 8005ef4:	f1ba 0f00 	cmp.w	sl, #0
 8005ef8:	d023      	beq.n	8005f42 <__multiply+0xee>
 8005efa:	46a9      	mov	r9, r5
 8005efc:	f04f 0c00 	mov.w	ip, #0
 8005f00:	f104 0e14 	add.w	lr, r4, #20
 8005f04:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f08:	f8d9 1000 	ldr.w	r1, [r9]
 8005f0c:	fa1f fb82 	uxth.w	fp, r2
 8005f10:	b289      	uxth	r1, r1
 8005f12:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f16:	4461      	add	r1, ip
 8005f18:	f8d9 c000 	ldr.w	ip, [r9]
 8005f1c:	0c12      	lsrs	r2, r2, #16
 8005f1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f22:	fb0a c202 	mla	r2, sl, r2, ip
 8005f26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f2a:	b289      	uxth	r1, r1
 8005f2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f30:	4577      	cmp	r7, lr
 8005f32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f36:	f849 1b04 	str.w	r1, [r9], #4
 8005f3a:	d8e3      	bhi.n	8005f04 <__multiply+0xb0>
 8005f3c:	9a01      	ldr	r2, [sp, #4]
 8005f3e:	f845 c002 	str.w	ip, [r5, r2]
 8005f42:	9a03      	ldr	r2, [sp, #12]
 8005f44:	3304      	adds	r3, #4
 8005f46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f4a:	f1b9 0f00 	cmp.w	r9, #0
 8005f4e:	d020      	beq.n	8005f92 <__multiply+0x13e>
 8005f50:	46ae      	mov	lr, r5
 8005f52:	f04f 0a00 	mov.w	sl, #0
 8005f56:	6829      	ldr	r1, [r5, #0]
 8005f58:	f104 0c14 	add.w	ip, r4, #20
 8005f5c:	f8bc b000 	ldrh.w	fp, [ip]
 8005f60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f64:	b289      	uxth	r1, r1
 8005f66:	fb09 220b 	mla	r2, r9, fp, r2
 8005f6a:	4492      	add	sl, r2
 8005f6c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005f70:	f84e 1b04 	str.w	r1, [lr], #4
 8005f74:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f78:	f8be 1000 	ldrh.w	r1, [lr]
 8005f7c:	0c12      	lsrs	r2, r2, #16
 8005f7e:	fb09 1102 	mla	r1, r9, r2, r1
 8005f82:	4567      	cmp	r7, ip
 8005f84:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005f88:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f8c:	d8e6      	bhi.n	8005f5c <__multiply+0x108>
 8005f8e:	9a01      	ldr	r2, [sp, #4]
 8005f90:	50a9      	str	r1, [r5, r2]
 8005f92:	3504      	adds	r5, #4
 8005f94:	e79b      	b.n	8005ece <__multiply+0x7a>
 8005f96:	3e01      	subs	r6, #1
 8005f98:	e79d      	b.n	8005ed6 <__multiply+0x82>
 8005f9a:	bf00      	nop
 8005f9c:	080074ef 	.word	0x080074ef
 8005fa0:	08007500 	.word	0x08007500

08005fa4 <__pow5mult>:
 8005fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	4615      	mov	r5, r2
 8005faa:	f012 0203 	ands.w	r2, r2, #3
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460f      	mov	r7, r1
 8005fb2:	d007      	beq.n	8005fc4 <__pow5mult+0x20>
 8005fb4:	4c25      	ldr	r4, [pc, #148]	; (800604c <__pow5mult+0xa8>)
 8005fb6:	3a01      	subs	r2, #1
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fbe:	f7ff fe9f 	bl	8005d00 <__multadd>
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	10ad      	asrs	r5, r5, #2
 8005fc6:	d03d      	beq.n	8006044 <__pow5mult+0xa0>
 8005fc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005fca:	b97c      	cbnz	r4, 8005fec <__pow5mult+0x48>
 8005fcc:	2010      	movs	r0, #16
 8005fce:	f7ff fe11 	bl	8005bf4 <malloc>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	6270      	str	r0, [r6, #36]	; 0x24
 8005fd6:	b928      	cbnz	r0, 8005fe4 <__pow5mult+0x40>
 8005fd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <__pow5mult+0xac>)
 8005fde:	481d      	ldr	r0, [pc, #116]	; (8006054 <__pow5mult+0xb0>)
 8005fe0:	f000 fc0a 	bl	80067f8 <__assert_func>
 8005fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fe8:	6004      	str	r4, [r0, #0]
 8005fea:	60c4      	str	r4, [r0, #12]
 8005fec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ff4:	b94c      	cbnz	r4, 800600a <__pow5mult+0x66>
 8005ff6:	f240 2171 	movw	r1, #625	; 0x271
 8005ffa:	4630      	mov	r0, r6
 8005ffc:	f7ff ff14 	bl	8005e28 <__i2b>
 8006000:	2300      	movs	r3, #0
 8006002:	4604      	mov	r4, r0
 8006004:	f8c8 0008 	str.w	r0, [r8, #8]
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	f04f 0900 	mov.w	r9, #0
 800600e:	07eb      	lsls	r3, r5, #31
 8006010:	d50a      	bpl.n	8006028 <__pow5mult+0x84>
 8006012:	4639      	mov	r1, r7
 8006014:	4622      	mov	r2, r4
 8006016:	4630      	mov	r0, r6
 8006018:	f7ff ff1c 	bl	8005e54 <__multiply>
 800601c:	4680      	mov	r8, r0
 800601e:	4639      	mov	r1, r7
 8006020:	4630      	mov	r0, r6
 8006022:	f7ff fe4b 	bl	8005cbc <_Bfree>
 8006026:	4647      	mov	r7, r8
 8006028:	106d      	asrs	r5, r5, #1
 800602a:	d00b      	beq.n	8006044 <__pow5mult+0xa0>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	b938      	cbnz	r0, 8006040 <__pow5mult+0x9c>
 8006030:	4622      	mov	r2, r4
 8006032:	4621      	mov	r1, r4
 8006034:	4630      	mov	r0, r6
 8006036:	f7ff ff0d 	bl	8005e54 <__multiply>
 800603a:	6020      	str	r0, [r4, #0]
 800603c:	f8c0 9000 	str.w	r9, [r0]
 8006040:	4604      	mov	r4, r0
 8006042:	e7e4      	b.n	800600e <__pow5mult+0x6a>
 8006044:	4638      	mov	r0, r7
 8006046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800604a:	bf00      	nop
 800604c:	08007650 	.word	0x08007650
 8006050:	0800747d 	.word	0x0800747d
 8006054:	08007500 	.word	0x08007500

08006058 <__lshift>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	460c      	mov	r4, r1
 800605e:	4607      	mov	r7, r0
 8006060:	4691      	mov	r9, r2
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	6849      	ldr	r1, [r1, #4]
 8006066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006070:	f108 0601 	add.w	r6, r8, #1
 8006074:	42b3      	cmp	r3, r6
 8006076:	db0b      	blt.n	8006090 <__lshift+0x38>
 8006078:	4638      	mov	r0, r7
 800607a:	f7ff fddf 	bl	8005c3c <_Balloc>
 800607e:	4605      	mov	r5, r0
 8006080:	b948      	cbnz	r0, 8006096 <__lshift+0x3e>
 8006082:	4602      	mov	r2, r0
 8006084:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006088:	4b29      	ldr	r3, [pc, #164]	; (8006130 <__lshift+0xd8>)
 800608a:	482a      	ldr	r0, [pc, #168]	; (8006134 <__lshift+0xdc>)
 800608c:	f000 fbb4 	bl	80067f8 <__assert_func>
 8006090:	3101      	adds	r1, #1
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	e7ee      	b.n	8006074 <__lshift+0x1c>
 8006096:	2300      	movs	r3, #0
 8006098:	f100 0114 	add.w	r1, r0, #20
 800609c:	f100 0210 	add.w	r2, r0, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	4553      	cmp	r3, sl
 80060a4:	db37      	blt.n	8006116 <__lshift+0xbe>
 80060a6:	6920      	ldr	r0, [r4, #16]
 80060a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060ac:	f104 0314 	add.w	r3, r4, #20
 80060b0:	f019 091f 	ands.w	r9, r9, #31
 80060b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80060bc:	d02f      	beq.n	800611e <__lshift+0xc6>
 80060be:	468a      	mov	sl, r1
 80060c0:	f04f 0c00 	mov.w	ip, #0
 80060c4:	f1c9 0e20 	rsb	lr, r9, #32
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	fa02 f209 	lsl.w	r2, r2, r9
 80060ce:	ea42 020c 	orr.w	r2, r2, ip
 80060d2:	f84a 2b04 	str.w	r2, [sl], #4
 80060d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80060da:	4298      	cmp	r0, r3
 80060dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80060e0:	d8f2      	bhi.n	80060c8 <__lshift+0x70>
 80060e2:	1b03      	subs	r3, r0, r4
 80060e4:	3b15      	subs	r3, #21
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	3304      	adds	r3, #4
 80060ec:	f104 0215 	add.w	r2, r4, #21
 80060f0:	4290      	cmp	r0, r2
 80060f2:	bf38      	it	cc
 80060f4:	2304      	movcc	r3, #4
 80060f6:	f841 c003 	str.w	ip, [r1, r3]
 80060fa:	f1bc 0f00 	cmp.w	ip, #0
 80060fe:	d001      	beq.n	8006104 <__lshift+0xac>
 8006100:	f108 0602 	add.w	r6, r8, #2
 8006104:	3e01      	subs	r6, #1
 8006106:	4638      	mov	r0, r7
 8006108:	4621      	mov	r1, r4
 800610a:	612e      	str	r6, [r5, #16]
 800610c:	f7ff fdd6 	bl	8005cbc <_Bfree>
 8006110:	4628      	mov	r0, r5
 8006112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006116:	f842 0f04 	str.w	r0, [r2, #4]!
 800611a:	3301      	adds	r3, #1
 800611c:	e7c1      	b.n	80060a2 <__lshift+0x4a>
 800611e:	3904      	subs	r1, #4
 8006120:	f853 2b04 	ldr.w	r2, [r3], #4
 8006124:	4298      	cmp	r0, r3
 8006126:	f841 2f04 	str.w	r2, [r1, #4]!
 800612a:	d8f9      	bhi.n	8006120 <__lshift+0xc8>
 800612c:	e7ea      	b.n	8006104 <__lshift+0xac>
 800612e:	bf00      	nop
 8006130:	080074ef 	.word	0x080074ef
 8006134:	08007500 	.word	0x08007500

08006138 <__mcmp>:
 8006138:	4603      	mov	r3, r0
 800613a:	690a      	ldr	r2, [r1, #16]
 800613c:	6900      	ldr	r0, [r0, #16]
 800613e:	b530      	push	{r4, r5, lr}
 8006140:	1a80      	subs	r0, r0, r2
 8006142:	d10d      	bne.n	8006160 <__mcmp+0x28>
 8006144:	3314      	adds	r3, #20
 8006146:	3114      	adds	r1, #20
 8006148:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800614c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006150:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006154:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006158:	4295      	cmp	r5, r2
 800615a:	d002      	beq.n	8006162 <__mcmp+0x2a>
 800615c:	d304      	bcc.n	8006168 <__mcmp+0x30>
 800615e:	2001      	movs	r0, #1
 8006160:	bd30      	pop	{r4, r5, pc}
 8006162:	42a3      	cmp	r3, r4
 8006164:	d3f4      	bcc.n	8006150 <__mcmp+0x18>
 8006166:	e7fb      	b.n	8006160 <__mcmp+0x28>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e7f8      	b.n	8006160 <__mcmp+0x28>
	...

08006170 <__mdiff>:
 8006170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	460d      	mov	r5, r1
 8006176:	4607      	mov	r7, r0
 8006178:	4611      	mov	r1, r2
 800617a:	4628      	mov	r0, r5
 800617c:	4614      	mov	r4, r2
 800617e:	f7ff ffdb 	bl	8006138 <__mcmp>
 8006182:	1e06      	subs	r6, r0, #0
 8006184:	d111      	bne.n	80061aa <__mdiff+0x3a>
 8006186:	4631      	mov	r1, r6
 8006188:	4638      	mov	r0, r7
 800618a:	f7ff fd57 	bl	8005c3c <_Balloc>
 800618e:	4602      	mov	r2, r0
 8006190:	b928      	cbnz	r0, 800619e <__mdiff+0x2e>
 8006192:	f240 2132 	movw	r1, #562	; 0x232
 8006196:	4b3a      	ldr	r3, [pc, #232]	; (8006280 <__mdiff+0x110>)
 8006198:	483a      	ldr	r0, [pc, #232]	; (8006284 <__mdiff+0x114>)
 800619a:	f000 fb2d 	bl	80067f8 <__assert_func>
 800619e:	2301      	movs	r3, #1
 80061a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80061a4:	4610      	mov	r0, r2
 80061a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	bfa4      	itt	ge
 80061ac:	4623      	movge	r3, r4
 80061ae:	462c      	movge	r4, r5
 80061b0:	4638      	mov	r0, r7
 80061b2:	6861      	ldr	r1, [r4, #4]
 80061b4:	bfa6      	itte	ge
 80061b6:	461d      	movge	r5, r3
 80061b8:	2600      	movge	r6, #0
 80061ba:	2601      	movlt	r6, #1
 80061bc:	f7ff fd3e 	bl	8005c3c <_Balloc>
 80061c0:	4602      	mov	r2, r0
 80061c2:	b918      	cbnz	r0, 80061cc <__mdiff+0x5c>
 80061c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80061c8:	4b2d      	ldr	r3, [pc, #180]	; (8006280 <__mdiff+0x110>)
 80061ca:	e7e5      	b.n	8006198 <__mdiff+0x28>
 80061cc:	f102 0814 	add.w	r8, r2, #20
 80061d0:	46c2      	mov	sl, r8
 80061d2:	f04f 0c00 	mov.w	ip, #0
 80061d6:	6927      	ldr	r7, [r4, #16]
 80061d8:	60c6      	str	r6, [r0, #12]
 80061da:	692e      	ldr	r6, [r5, #16]
 80061dc:	f104 0014 	add.w	r0, r4, #20
 80061e0:	f105 0914 	add.w	r9, r5, #20
 80061e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80061e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061ec:	3410      	adds	r4, #16
 80061ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80061f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80061f6:	fa1f f18b 	uxth.w	r1, fp
 80061fa:	448c      	add	ip, r1
 80061fc:	b299      	uxth	r1, r3
 80061fe:	0c1b      	lsrs	r3, r3, #16
 8006200:	ebac 0101 	sub.w	r1, ip, r1
 8006204:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006208:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800620c:	b289      	uxth	r1, r1
 800620e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006212:	454e      	cmp	r6, r9
 8006214:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006218:	f84a 3b04 	str.w	r3, [sl], #4
 800621c:	d8e7      	bhi.n	80061ee <__mdiff+0x7e>
 800621e:	1b73      	subs	r3, r6, r5
 8006220:	3b15      	subs	r3, #21
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	3515      	adds	r5, #21
 8006228:	3304      	adds	r3, #4
 800622a:	42ae      	cmp	r6, r5
 800622c:	bf38      	it	cc
 800622e:	2304      	movcc	r3, #4
 8006230:	4418      	add	r0, r3
 8006232:	4443      	add	r3, r8
 8006234:	461e      	mov	r6, r3
 8006236:	4605      	mov	r5, r0
 8006238:	4575      	cmp	r5, lr
 800623a:	d30e      	bcc.n	800625a <__mdiff+0xea>
 800623c:	f10e 0103 	add.w	r1, lr, #3
 8006240:	1a09      	subs	r1, r1, r0
 8006242:	f021 0103 	bic.w	r1, r1, #3
 8006246:	3803      	subs	r0, #3
 8006248:	4586      	cmp	lr, r0
 800624a:	bf38      	it	cc
 800624c:	2100      	movcc	r1, #0
 800624e:	4419      	add	r1, r3
 8006250:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006254:	b18b      	cbz	r3, 800627a <__mdiff+0x10a>
 8006256:	6117      	str	r7, [r2, #16]
 8006258:	e7a4      	b.n	80061a4 <__mdiff+0x34>
 800625a:	f855 8b04 	ldr.w	r8, [r5], #4
 800625e:	fa1f f188 	uxth.w	r1, r8
 8006262:	4461      	add	r1, ip
 8006264:	140c      	asrs	r4, r1, #16
 8006266:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800626a:	b289      	uxth	r1, r1
 800626c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006270:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006274:	f846 1b04 	str.w	r1, [r6], #4
 8006278:	e7de      	b.n	8006238 <__mdiff+0xc8>
 800627a:	3f01      	subs	r7, #1
 800627c:	e7e8      	b.n	8006250 <__mdiff+0xe0>
 800627e:	bf00      	nop
 8006280:	080074ef 	.word	0x080074ef
 8006284:	08007500 	.word	0x08007500

08006288 <__d2b>:
 8006288:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800628c:	2101      	movs	r1, #1
 800628e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006292:	4690      	mov	r8, r2
 8006294:	461d      	mov	r5, r3
 8006296:	f7ff fcd1 	bl	8005c3c <_Balloc>
 800629a:	4604      	mov	r4, r0
 800629c:	b930      	cbnz	r0, 80062ac <__d2b+0x24>
 800629e:	4602      	mov	r2, r0
 80062a0:	f240 310a 	movw	r1, #778	; 0x30a
 80062a4:	4b24      	ldr	r3, [pc, #144]	; (8006338 <__d2b+0xb0>)
 80062a6:	4825      	ldr	r0, [pc, #148]	; (800633c <__d2b+0xb4>)
 80062a8:	f000 faa6 	bl	80067f8 <__assert_func>
 80062ac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80062b0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80062b4:	bb2d      	cbnz	r5, 8006302 <__d2b+0x7a>
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	f1b8 0300 	subs.w	r3, r8, #0
 80062bc:	d026      	beq.n	800630c <__d2b+0x84>
 80062be:	4668      	mov	r0, sp
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	f7ff fd83 	bl	8005dcc <__lo0bits>
 80062c6:	9900      	ldr	r1, [sp, #0]
 80062c8:	b1f0      	cbz	r0, 8006308 <__d2b+0x80>
 80062ca:	9a01      	ldr	r2, [sp, #4]
 80062cc:	f1c0 0320 	rsb	r3, r0, #32
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	430b      	orrs	r3, r1
 80062d6:	40c2      	lsrs	r2, r0
 80062d8:	6163      	str	r3, [r4, #20]
 80062da:	9201      	str	r2, [sp, #4]
 80062dc:	9b01      	ldr	r3, [sp, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bf14      	ite	ne
 80062e2:	2102      	movne	r1, #2
 80062e4:	2101      	moveq	r1, #1
 80062e6:	61a3      	str	r3, [r4, #24]
 80062e8:	6121      	str	r1, [r4, #16]
 80062ea:	b1c5      	cbz	r5, 800631e <__d2b+0x96>
 80062ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062f0:	4405      	add	r5, r0
 80062f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062f6:	603d      	str	r5, [r7, #0]
 80062f8:	6030      	str	r0, [r6, #0]
 80062fa:	4620      	mov	r0, r4
 80062fc:	b002      	add	sp, #8
 80062fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006306:	e7d6      	b.n	80062b6 <__d2b+0x2e>
 8006308:	6161      	str	r1, [r4, #20]
 800630a:	e7e7      	b.n	80062dc <__d2b+0x54>
 800630c:	a801      	add	r0, sp, #4
 800630e:	f7ff fd5d 	bl	8005dcc <__lo0bits>
 8006312:	2101      	movs	r1, #1
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	6121      	str	r1, [r4, #16]
 8006318:	6163      	str	r3, [r4, #20]
 800631a:	3020      	adds	r0, #32
 800631c:	e7e5      	b.n	80062ea <__d2b+0x62>
 800631e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006322:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006326:	6038      	str	r0, [r7, #0]
 8006328:	6918      	ldr	r0, [r3, #16]
 800632a:	f7ff fd2f 	bl	8005d8c <__hi0bits>
 800632e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006332:	6031      	str	r1, [r6, #0]
 8006334:	e7e1      	b.n	80062fa <__d2b+0x72>
 8006336:	bf00      	nop
 8006338:	080074ef 	.word	0x080074ef
 800633c:	08007500 	.word	0x08007500

08006340 <_calloc_r>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	fba1 5402 	umull	r5, r4, r1, r2
 8006346:	b934      	cbnz	r4, 8006356 <_calloc_r+0x16>
 8006348:	4629      	mov	r1, r5
 800634a:	f000 f875 	bl	8006438 <_malloc_r>
 800634e:	4606      	mov	r6, r0
 8006350:	b928      	cbnz	r0, 800635e <_calloc_r+0x1e>
 8006352:	4630      	mov	r0, r6
 8006354:	bd70      	pop	{r4, r5, r6, pc}
 8006356:	220c      	movs	r2, #12
 8006358:	2600      	movs	r6, #0
 800635a:	6002      	str	r2, [r0, #0]
 800635c:	e7f9      	b.n	8006352 <_calloc_r+0x12>
 800635e:	462a      	mov	r2, r5
 8006360:	4621      	mov	r1, r4
 8006362:	f7fe f941 	bl	80045e8 <memset>
 8006366:	e7f4      	b.n	8006352 <_calloc_r+0x12>

08006368 <_free_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4605      	mov	r5, r0
 800636c:	2900      	cmp	r1, #0
 800636e:	d040      	beq.n	80063f2 <_free_r+0x8a>
 8006370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006374:	1f0c      	subs	r4, r1, #4
 8006376:	2b00      	cmp	r3, #0
 8006378:	bfb8      	it	lt
 800637a:	18e4      	addlt	r4, r4, r3
 800637c:	f000 fa98 	bl	80068b0 <__malloc_lock>
 8006380:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <_free_r+0x8c>)
 8006382:	6813      	ldr	r3, [r2, #0]
 8006384:	b933      	cbnz	r3, 8006394 <_free_r+0x2c>
 8006386:	6063      	str	r3, [r4, #4]
 8006388:	6014      	str	r4, [r2, #0]
 800638a:	4628      	mov	r0, r5
 800638c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006390:	f000 ba94 	b.w	80068bc <__malloc_unlock>
 8006394:	42a3      	cmp	r3, r4
 8006396:	d908      	bls.n	80063aa <_free_r+0x42>
 8006398:	6820      	ldr	r0, [r4, #0]
 800639a:	1821      	adds	r1, r4, r0
 800639c:	428b      	cmp	r3, r1
 800639e:	bf01      	itttt	eq
 80063a0:	6819      	ldreq	r1, [r3, #0]
 80063a2:	685b      	ldreq	r3, [r3, #4]
 80063a4:	1809      	addeq	r1, r1, r0
 80063a6:	6021      	streq	r1, [r4, #0]
 80063a8:	e7ed      	b.n	8006386 <_free_r+0x1e>
 80063aa:	461a      	mov	r2, r3
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	b10b      	cbz	r3, 80063b4 <_free_r+0x4c>
 80063b0:	42a3      	cmp	r3, r4
 80063b2:	d9fa      	bls.n	80063aa <_free_r+0x42>
 80063b4:	6811      	ldr	r1, [r2, #0]
 80063b6:	1850      	adds	r0, r2, r1
 80063b8:	42a0      	cmp	r0, r4
 80063ba:	d10b      	bne.n	80063d4 <_free_r+0x6c>
 80063bc:	6820      	ldr	r0, [r4, #0]
 80063be:	4401      	add	r1, r0
 80063c0:	1850      	adds	r0, r2, r1
 80063c2:	4283      	cmp	r3, r0
 80063c4:	6011      	str	r1, [r2, #0]
 80063c6:	d1e0      	bne.n	800638a <_free_r+0x22>
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	4401      	add	r1, r0
 80063ce:	6011      	str	r1, [r2, #0]
 80063d0:	6053      	str	r3, [r2, #4]
 80063d2:	e7da      	b.n	800638a <_free_r+0x22>
 80063d4:	d902      	bls.n	80063dc <_free_r+0x74>
 80063d6:	230c      	movs	r3, #12
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	e7d6      	b.n	800638a <_free_r+0x22>
 80063dc:	6820      	ldr	r0, [r4, #0]
 80063de:	1821      	adds	r1, r4, r0
 80063e0:	428b      	cmp	r3, r1
 80063e2:	bf01      	itttt	eq
 80063e4:	6819      	ldreq	r1, [r3, #0]
 80063e6:	685b      	ldreq	r3, [r3, #4]
 80063e8:	1809      	addeq	r1, r1, r0
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	6063      	str	r3, [r4, #4]
 80063ee:	6054      	str	r4, [r2, #4]
 80063f0:	e7cb      	b.n	800638a <_free_r+0x22>
 80063f2:	bd38      	pop	{r3, r4, r5, pc}
 80063f4:	200004e0 	.word	0x200004e0

080063f8 <sbrk_aligned>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4e0e      	ldr	r6, [pc, #56]	; (8006434 <sbrk_aligned+0x3c>)
 80063fc:	460c      	mov	r4, r1
 80063fe:	6831      	ldr	r1, [r6, #0]
 8006400:	4605      	mov	r5, r0
 8006402:	b911      	cbnz	r1, 800640a <sbrk_aligned+0x12>
 8006404:	f000 f9e8 	bl	80067d8 <_sbrk_r>
 8006408:	6030      	str	r0, [r6, #0]
 800640a:	4621      	mov	r1, r4
 800640c:	4628      	mov	r0, r5
 800640e:	f000 f9e3 	bl	80067d8 <_sbrk_r>
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	d00a      	beq.n	800642c <sbrk_aligned+0x34>
 8006416:	1cc4      	adds	r4, r0, #3
 8006418:	f024 0403 	bic.w	r4, r4, #3
 800641c:	42a0      	cmp	r0, r4
 800641e:	d007      	beq.n	8006430 <sbrk_aligned+0x38>
 8006420:	1a21      	subs	r1, r4, r0
 8006422:	4628      	mov	r0, r5
 8006424:	f000 f9d8 	bl	80067d8 <_sbrk_r>
 8006428:	3001      	adds	r0, #1
 800642a:	d101      	bne.n	8006430 <sbrk_aligned+0x38>
 800642c:	f04f 34ff 	mov.w	r4, #4294967295
 8006430:	4620      	mov	r0, r4
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	200004e4 	.word	0x200004e4

08006438 <_malloc_r>:
 8006438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643c:	1ccd      	adds	r5, r1, #3
 800643e:	f025 0503 	bic.w	r5, r5, #3
 8006442:	3508      	adds	r5, #8
 8006444:	2d0c      	cmp	r5, #12
 8006446:	bf38      	it	cc
 8006448:	250c      	movcc	r5, #12
 800644a:	2d00      	cmp	r5, #0
 800644c:	4607      	mov	r7, r0
 800644e:	db01      	blt.n	8006454 <_malloc_r+0x1c>
 8006450:	42a9      	cmp	r1, r5
 8006452:	d905      	bls.n	8006460 <_malloc_r+0x28>
 8006454:	230c      	movs	r3, #12
 8006456:	2600      	movs	r6, #0
 8006458:	603b      	str	r3, [r7, #0]
 800645a:	4630      	mov	r0, r6
 800645c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006460:	4e2e      	ldr	r6, [pc, #184]	; (800651c <_malloc_r+0xe4>)
 8006462:	f000 fa25 	bl	80068b0 <__malloc_lock>
 8006466:	6833      	ldr	r3, [r6, #0]
 8006468:	461c      	mov	r4, r3
 800646a:	bb34      	cbnz	r4, 80064ba <_malloc_r+0x82>
 800646c:	4629      	mov	r1, r5
 800646e:	4638      	mov	r0, r7
 8006470:	f7ff ffc2 	bl	80063f8 <sbrk_aligned>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	4604      	mov	r4, r0
 8006478:	d14d      	bne.n	8006516 <_malloc_r+0xde>
 800647a:	6834      	ldr	r4, [r6, #0]
 800647c:	4626      	mov	r6, r4
 800647e:	2e00      	cmp	r6, #0
 8006480:	d140      	bne.n	8006504 <_malloc_r+0xcc>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	4631      	mov	r1, r6
 8006486:	4638      	mov	r0, r7
 8006488:	eb04 0803 	add.w	r8, r4, r3
 800648c:	f000 f9a4 	bl	80067d8 <_sbrk_r>
 8006490:	4580      	cmp	r8, r0
 8006492:	d13a      	bne.n	800650a <_malloc_r+0xd2>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	3503      	adds	r5, #3
 8006498:	1a6d      	subs	r5, r5, r1
 800649a:	f025 0503 	bic.w	r5, r5, #3
 800649e:	3508      	adds	r5, #8
 80064a0:	2d0c      	cmp	r5, #12
 80064a2:	bf38      	it	cc
 80064a4:	250c      	movcc	r5, #12
 80064a6:	4638      	mov	r0, r7
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7ff ffa5 	bl	80063f8 <sbrk_aligned>
 80064ae:	3001      	adds	r0, #1
 80064b0:	d02b      	beq.n	800650a <_malloc_r+0xd2>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	442b      	add	r3, r5
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	e00e      	b.n	80064d8 <_malloc_r+0xa0>
 80064ba:	6822      	ldr	r2, [r4, #0]
 80064bc:	1b52      	subs	r2, r2, r5
 80064be:	d41e      	bmi.n	80064fe <_malloc_r+0xc6>
 80064c0:	2a0b      	cmp	r2, #11
 80064c2:	d916      	bls.n	80064f2 <_malloc_r+0xba>
 80064c4:	1961      	adds	r1, r4, r5
 80064c6:	42a3      	cmp	r3, r4
 80064c8:	6025      	str	r5, [r4, #0]
 80064ca:	bf18      	it	ne
 80064cc:	6059      	strne	r1, [r3, #4]
 80064ce:	6863      	ldr	r3, [r4, #4]
 80064d0:	bf08      	it	eq
 80064d2:	6031      	streq	r1, [r6, #0]
 80064d4:	5162      	str	r2, [r4, r5]
 80064d6:	604b      	str	r3, [r1, #4]
 80064d8:	4638      	mov	r0, r7
 80064da:	f104 060b 	add.w	r6, r4, #11
 80064de:	f000 f9ed 	bl	80068bc <__malloc_unlock>
 80064e2:	f026 0607 	bic.w	r6, r6, #7
 80064e6:	1d23      	adds	r3, r4, #4
 80064e8:	1af2      	subs	r2, r6, r3
 80064ea:	d0b6      	beq.n	800645a <_malloc_r+0x22>
 80064ec:	1b9b      	subs	r3, r3, r6
 80064ee:	50a3      	str	r3, [r4, r2]
 80064f0:	e7b3      	b.n	800645a <_malloc_r+0x22>
 80064f2:	6862      	ldr	r2, [r4, #4]
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	bf0c      	ite	eq
 80064f8:	6032      	streq	r2, [r6, #0]
 80064fa:	605a      	strne	r2, [r3, #4]
 80064fc:	e7ec      	b.n	80064d8 <_malloc_r+0xa0>
 80064fe:	4623      	mov	r3, r4
 8006500:	6864      	ldr	r4, [r4, #4]
 8006502:	e7b2      	b.n	800646a <_malloc_r+0x32>
 8006504:	4634      	mov	r4, r6
 8006506:	6876      	ldr	r6, [r6, #4]
 8006508:	e7b9      	b.n	800647e <_malloc_r+0x46>
 800650a:	230c      	movs	r3, #12
 800650c:	4638      	mov	r0, r7
 800650e:	603b      	str	r3, [r7, #0]
 8006510:	f000 f9d4 	bl	80068bc <__malloc_unlock>
 8006514:	e7a1      	b.n	800645a <_malloc_r+0x22>
 8006516:	6025      	str	r5, [r4, #0]
 8006518:	e7de      	b.n	80064d8 <_malloc_r+0xa0>
 800651a:	bf00      	nop
 800651c:	200004e0 	.word	0x200004e0

08006520 <__ssputs_r>:
 8006520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006524:	688e      	ldr	r6, [r1, #8]
 8006526:	4682      	mov	sl, r0
 8006528:	429e      	cmp	r6, r3
 800652a:	460c      	mov	r4, r1
 800652c:	4690      	mov	r8, r2
 800652e:	461f      	mov	r7, r3
 8006530:	d838      	bhi.n	80065a4 <__ssputs_r+0x84>
 8006532:	898a      	ldrh	r2, [r1, #12]
 8006534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006538:	d032      	beq.n	80065a0 <__ssputs_r+0x80>
 800653a:	6825      	ldr	r5, [r4, #0]
 800653c:	6909      	ldr	r1, [r1, #16]
 800653e:	3301      	adds	r3, #1
 8006540:	eba5 0901 	sub.w	r9, r5, r1
 8006544:	6965      	ldr	r5, [r4, #20]
 8006546:	444b      	add	r3, r9
 8006548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800654c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006550:	106d      	asrs	r5, r5, #1
 8006552:	429d      	cmp	r5, r3
 8006554:	bf38      	it	cc
 8006556:	461d      	movcc	r5, r3
 8006558:	0553      	lsls	r3, r2, #21
 800655a:	d531      	bpl.n	80065c0 <__ssputs_r+0xa0>
 800655c:	4629      	mov	r1, r5
 800655e:	f7ff ff6b 	bl	8006438 <_malloc_r>
 8006562:	4606      	mov	r6, r0
 8006564:	b950      	cbnz	r0, 800657c <__ssputs_r+0x5c>
 8006566:	230c      	movs	r3, #12
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	f8ca 3000 	str.w	r3, [sl]
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800657c:	464a      	mov	r2, r9
 800657e:	6921      	ldr	r1, [r4, #16]
 8006580:	f7ff fb4e 	bl	8005c20 <memcpy>
 8006584:	89a3      	ldrh	r3, [r4, #12]
 8006586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800658a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	6126      	str	r6, [r4, #16]
 8006592:	444e      	add	r6, r9
 8006594:	6026      	str	r6, [r4, #0]
 8006596:	463e      	mov	r6, r7
 8006598:	6165      	str	r5, [r4, #20]
 800659a:	eba5 0509 	sub.w	r5, r5, r9
 800659e:	60a5      	str	r5, [r4, #8]
 80065a0:	42be      	cmp	r6, r7
 80065a2:	d900      	bls.n	80065a6 <__ssputs_r+0x86>
 80065a4:	463e      	mov	r6, r7
 80065a6:	4632      	mov	r2, r6
 80065a8:	4641      	mov	r1, r8
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	f000 f966 	bl	800687c <memmove>
 80065b0:	68a3      	ldr	r3, [r4, #8]
 80065b2:	2000      	movs	r0, #0
 80065b4:	1b9b      	subs	r3, r3, r6
 80065b6:	60a3      	str	r3, [r4, #8]
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	4433      	add	r3, r6
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	e7db      	b.n	8006578 <__ssputs_r+0x58>
 80065c0:	462a      	mov	r2, r5
 80065c2:	f000 f981 	bl	80068c8 <_realloc_r>
 80065c6:	4606      	mov	r6, r0
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d1e1      	bne.n	8006590 <__ssputs_r+0x70>
 80065cc:	4650      	mov	r0, sl
 80065ce:	6921      	ldr	r1, [r4, #16]
 80065d0:	f7ff feca 	bl	8006368 <_free_r>
 80065d4:	e7c7      	b.n	8006566 <__ssputs_r+0x46>
	...

080065d8 <_svfiprintf_r>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	4698      	mov	r8, r3
 80065de:	898b      	ldrh	r3, [r1, #12]
 80065e0:	4607      	mov	r7, r0
 80065e2:	061b      	lsls	r3, r3, #24
 80065e4:	460d      	mov	r5, r1
 80065e6:	4614      	mov	r4, r2
 80065e8:	b09d      	sub	sp, #116	; 0x74
 80065ea:	d50e      	bpl.n	800660a <_svfiprintf_r+0x32>
 80065ec:	690b      	ldr	r3, [r1, #16]
 80065ee:	b963      	cbnz	r3, 800660a <_svfiprintf_r+0x32>
 80065f0:	2140      	movs	r1, #64	; 0x40
 80065f2:	f7ff ff21 	bl	8006438 <_malloc_r>
 80065f6:	6028      	str	r0, [r5, #0]
 80065f8:	6128      	str	r0, [r5, #16]
 80065fa:	b920      	cbnz	r0, 8006606 <_svfiprintf_r+0x2e>
 80065fc:	230c      	movs	r3, #12
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e0d1      	b.n	80067aa <_svfiprintf_r+0x1d2>
 8006606:	2340      	movs	r3, #64	; 0x40
 8006608:	616b      	str	r3, [r5, #20]
 800660a:	2300      	movs	r3, #0
 800660c:	9309      	str	r3, [sp, #36]	; 0x24
 800660e:	2320      	movs	r3, #32
 8006610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	f04f 0901 	mov.w	r9, #1
 800661a:	f8cd 800c 	str.w	r8, [sp, #12]
 800661e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80067c4 <_svfiprintf_r+0x1ec>
 8006622:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006626:	4623      	mov	r3, r4
 8006628:	469a      	mov	sl, r3
 800662a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800662e:	b10a      	cbz	r2, 8006634 <_svfiprintf_r+0x5c>
 8006630:	2a25      	cmp	r2, #37	; 0x25
 8006632:	d1f9      	bne.n	8006628 <_svfiprintf_r+0x50>
 8006634:	ebba 0b04 	subs.w	fp, sl, r4
 8006638:	d00b      	beq.n	8006652 <_svfiprintf_r+0x7a>
 800663a:	465b      	mov	r3, fp
 800663c:	4622      	mov	r2, r4
 800663e:	4629      	mov	r1, r5
 8006640:	4638      	mov	r0, r7
 8006642:	f7ff ff6d 	bl	8006520 <__ssputs_r>
 8006646:	3001      	adds	r0, #1
 8006648:	f000 80aa 	beq.w	80067a0 <_svfiprintf_r+0x1c8>
 800664c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800664e:	445a      	add	r2, fp
 8006650:	9209      	str	r2, [sp, #36]	; 0x24
 8006652:	f89a 3000 	ldrb.w	r3, [sl]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80a2 	beq.w	80067a0 <_svfiprintf_r+0x1c8>
 800665c:	2300      	movs	r3, #0
 800665e:	f04f 32ff 	mov.w	r2, #4294967295
 8006662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006666:	f10a 0a01 	add.w	sl, sl, #1
 800666a:	9304      	str	r3, [sp, #16]
 800666c:	9307      	str	r3, [sp, #28]
 800666e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006672:	931a      	str	r3, [sp, #104]	; 0x68
 8006674:	4654      	mov	r4, sl
 8006676:	2205      	movs	r2, #5
 8006678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800667c:	4851      	ldr	r0, [pc, #324]	; (80067c4 <_svfiprintf_r+0x1ec>)
 800667e:	f7ff fac1 	bl	8005c04 <memchr>
 8006682:	9a04      	ldr	r2, [sp, #16]
 8006684:	b9d8      	cbnz	r0, 80066be <_svfiprintf_r+0xe6>
 8006686:	06d0      	lsls	r0, r2, #27
 8006688:	bf44      	itt	mi
 800668a:	2320      	movmi	r3, #32
 800668c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006690:	0711      	lsls	r1, r2, #28
 8006692:	bf44      	itt	mi
 8006694:	232b      	movmi	r3, #43	; 0x2b
 8006696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669a:	f89a 3000 	ldrb.w	r3, [sl]
 800669e:	2b2a      	cmp	r3, #42	; 0x2a
 80066a0:	d015      	beq.n	80066ce <_svfiprintf_r+0xf6>
 80066a2:	4654      	mov	r4, sl
 80066a4:	2000      	movs	r0, #0
 80066a6:	f04f 0c0a 	mov.w	ip, #10
 80066aa:	9a07      	ldr	r2, [sp, #28]
 80066ac:	4621      	mov	r1, r4
 80066ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066b2:	3b30      	subs	r3, #48	; 0x30
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d94e      	bls.n	8006756 <_svfiprintf_r+0x17e>
 80066b8:	b1b0      	cbz	r0, 80066e8 <_svfiprintf_r+0x110>
 80066ba:	9207      	str	r2, [sp, #28]
 80066bc:	e014      	b.n	80066e8 <_svfiprintf_r+0x110>
 80066be:	eba0 0308 	sub.w	r3, r0, r8
 80066c2:	fa09 f303 	lsl.w	r3, r9, r3
 80066c6:	4313      	orrs	r3, r2
 80066c8:	46a2      	mov	sl, r4
 80066ca:	9304      	str	r3, [sp, #16]
 80066cc:	e7d2      	b.n	8006674 <_svfiprintf_r+0x9c>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	1d19      	adds	r1, r3, #4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	9103      	str	r1, [sp, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfbb      	ittet	lt
 80066da:	425b      	neglt	r3, r3
 80066dc:	f042 0202 	orrlt.w	r2, r2, #2
 80066e0:	9307      	strge	r3, [sp, #28]
 80066e2:	9307      	strlt	r3, [sp, #28]
 80066e4:	bfb8      	it	lt
 80066e6:	9204      	strlt	r2, [sp, #16]
 80066e8:	7823      	ldrb	r3, [r4, #0]
 80066ea:	2b2e      	cmp	r3, #46	; 0x2e
 80066ec:	d10c      	bne.n	8006708 <_svfiprintf_r+0x130>
 80066ee:	7863      	ldrb	r3, [r4, #1]
 80066f0:	2b2a      	cmp	r3, #42	; 0x2a
 80066f2:	d135      	bne.n	8006760 <_svfiprintf_r+0x188>
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	3402      	adds	r4, #2
 80066f8:	1d1a      	adds	r2, r3, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	9203      	str	r2, [sp, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bfb8      	it	lt
 8006702:	f04f 33ff 	movlt.w	r3, #4294967295
 8006706:	9305      	str	r3, [sp, #20]
 8006708:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80067c8 <_svfiprintf_r+0x1f0>
 800670c:	2203      	movs	r2, #3
 800670e:	4650      	mov	r0, sl
 8006710:	7821      	ldrb	r1, [r4, #0]
 8006712:	f7ff fa77 	bl	8005c04 <memchr>
 8006716:	b140      	cbz	r0, 800672a <_svfiprintf_r+0x152>
 8006718:	2340      	movs	r3, #64	; 0x40
 800671a:	eba0 000a 	sub.w	r0, r0, sl
 800671e:	fa03 f000 	lsl.w	r0, r3, r0
 8006722:	9b04      	ldr	r3, [sp, #16]
 8006724:	3401      	adds	r4, #1
 8006726:	4303      	orrs	r3, r0
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672e:	2206      	movs	r2, #6
 8006730:	4826      	ldr	r0, [pc, #152]	; (80067cc <_svfiprintf_r+0x1f4>)
 8006732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006736:	f7ff fa65 	bl	8005c04 <memchr>
 800673a:	2800      	cmp	r0, #0
 800673c:	d038      	beq.n	80067b0 <_svfiprintf_r+0x1d8>
 800673e:	4b24      	ldr	r3, [pc, #144]	; (80067d0 <_svfiprintf_r+0x1f8>)
 8006740:	bb1b      	cbnz	r3, 800678a <_svfiprintf_r+0x1b2>
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	3307      	adds	r3, #7
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	3308      	adds	r3, #8
 800674c:	9303      	str	r3, [sp, #12]
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	4433      	add	r3, r6
 8006752:	9309      	str	r3, [sp, #36]	; 0x24
 8006754:	e767      	b.n	8006626 <_svfiprintf_r+0x4e>
 8006756:	460c      	mov	r4, r1
 8006758:	2001      	movs	r0, #1
 800675a:	fb0c 3202 	mla	r2, ip, r2, r3
 800675e:	e7a5      	b.n	80066ac <_svfiprintf_r+0xd4>
 8006760:	2300      	movs	r3, #0
 8006762:	f04f 0c0a 	mov.w	ip, #10
 8006766:	4619      	mov	r1, r3
 8006768:	3401      	adds	r4, #1
 800676a:	9305      	str	r3, [sp, #20]
 800676c:	4620      	mov	r0, r4
 800676e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006772:	3a30      	subs	r2, #48	; 0x30
 8006774:	2a09      	cmp	r2, #9
 8006776:	d903      	bls.n	8006780 <_svfiprintf_r+0x1a8>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0c5      	beq.n	8006708 <_svfiprintf_r+0x130>
 800677c:	9105      	str	r1, [sp, #20]
 800677e:	e7c3      	b.n	8006708 <_svfiprintf_r+0x130>
 8006780:	4604      	mov	r4, r0
 8006782:	2301      	movs	r3, #1
 8006784:	fb0c 2101 	mla	r1, ip, r1, r2
 8006788:	e7f0      	b.n	800676c <_svfiprintf_r+0x194>
 800678a:	ab03      	add	r3, sp, #12
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	462a      	mov	r2, r5
 8006790:	4638      	mov	r0, r7
 8006792:	4b10      	ldr	r3, [pc, #64]	; (80067d4 <_svfiprintf_r+0x1fc>)
 8006794:	a904      	add	r1, sp, #16
 8006796:	f7fd ffcd 	bl	8004734 <_printf_float>
 800679a:	1c42      	adds	r2, r0, #1
 800679c:	4606      	mov	r6, r0
 800679e:	d1d6      	bne.n	800674e <_svfiprintf_r+0x176>
 80067a0:	89ab      	ldrh	r3, [r5, #12]
 80067a2:	065b      	lsls	r3, r3, #25
 80067a4:	f53f af2c 	bmi.w	8006600 <_svfiprintf_r+0x28>
 80067a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067aa:	b01d      	add	sp, #116	; 0x74
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	ab03      	add	r3, sp, #12
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	462a      	mov	r2, r5
 80067b6:	4638      	mov	r0, r7
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <_svfiprintf_r+0x1fc>)
 80067ba:	a904      	add	r1, sp, #16
 80067bc:	f7fe fa56 	bl	8004c6c <_printf_i>
 80067c0:	e7eb      	b.n	800679a <_svfiprintf_r+0x1c2>
 80067c2:	bf00      	nop
 80067c4:	0800765c 	.word	0x0800765c
 80067c8:	08007662 	.word	0x08007662
 80067cc:	08007666 	.word	0x08007666
 80067d0:	08004735 	.word	0x08004735
 80067d4:	08006521 	.word	0x08006521

080067d8 <_sbrk_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	2300      	movs	r3, #0
 80067dc:	4d05      	ldr	r5, [pc, #20]	; (80067f4 <_sbrk_r+0x1c>)
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	602b      	str	r3, [r5, #0]
 80067e4:	f7fa ff6e 	bl	80016c4 <_sbrk>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_sbrk_r+0x1a>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_sbrk_r+0x1a>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	200004e8 	.word	0x200004e8

080067f8 <__assert_func>:
 80067f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067fa:	4614      	mov	r4, r2
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <__assert_func+0x2c>)
 8006800:	4605      	mov	r5, r0
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68d8      	ldr	r0, [r3, #12]
 8006806:	b14c      	cbz	r4, 800681c <__assert_func+0x24>
 8006808:	4b07      	ldr	r3, [pc, #28]	; (8006828 <__assert_func+0x30>)
 800680a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800680e:	9100      	str	r1, [sp, #0]
 8006810:	462b      	mov	r3, r5
 8006812:	4906      	ldr	r1, [pc, #24]	; (800682c <__assert_func+0x34>)
 8006814:	f000 f80e 	bl	8006834 <fiprintf>
 8006818:	f000 faaa 	bl	8006d70 <abort>
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <__assert_func+0x38>)
 800681e:	461c      	mov	r4, r3
 8006820:	e7f3      	b.n	800680a <__assert_func+0x12>
 8006822:	bf00      	nop
 8006824:	20000010 	.word	0x20000010
 8006828:	0800766d 	.word	0x0800766d
 800682c:	0800767a 	.word	0x0800767a
 8006830:	080076a8 	.word	0x080076a8

08006834 <fiprintf>:
 8006834:	b40e      	push	{r1, r2, r3}
 8006836:	b503      	push	{r0, r1, lr}
 8006838:	4601      	mov	r1, r0
 800683a:	ab03      	add	r3, sp, #12
 800683c:	4805      	ldr	r0, [pc, #20]	; (8006854 <fiprintf+0x20>)
 800683e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006842:	6800      	ldr	r0, [r0, #0]
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	f000 f895 	bl	8006974 <_vfiprintf_r>
 800684a:	b002      	add	sp, #8
 800684c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006850:	b003      	add	sp, #12
 8006852:	4770      	bx	lr
 8006854:	20000010 	.word	0x20000010

08006858 <__ascii_mbtowc>:
 8006858:	b082      	sub	sp, #8
 800685a:	b901      	cbnz	r1, 800685e <__ascii_mbtowc+0x6>
 800685c:	a901      	add	r1, sp, #4
 800685e:	b142      	cbz	r2, 8006872 <__ascii_mbtowc+0x1a>
 8006860:	b14b      	cbz	r3, 8006876 <__ascii_mbtowc+0x1e>
 8006862:	7813      	ldrb	r3, [r2, #0]
 8006864:	600b      	str	r3, [r1, #0]
 8006866:	7812      	ldrb	r2, [r2, #0]
 8006868:	1e10      	subs	r0, r2, #0
 800686a:	bf18      	it	ne
 800686c:	2001      	movne	r0, #1
 800686e:	b002      	add	sp, #8
 8006870:	4770      	bx	lr
 8006872:	4610      	mov	r0, r2
 8006874:	e7fb      	b.n	800686e <__ascii_mbtowc+0x16>
 8006876:	f06f 0001 	mvn.w	r0, #1
 800687a:	e7f8      	b.n	800686e <__ascii_mbtowc+0x16>

0800687c <memmove>:
 800687c:	4288      	cmp	r0, r1
 800687e:	b510      	push	{r4, lr}
 8006880:	eb01 0402 	add.w	r4, r1, r2
 8006884:	d902      	bls.n	800688c <memmove+0x10>
 8006886:	4284      	cmp	r4, r0
 8006888:	4623      	mov	r3, r4
 800688a:	d807      	bhi.n	800689c <memmove+0x20>
 800688c:	1e43      	subs	r3, r0, #1
 800688e:	42a1      	cmp	r1, r4
 8006890:	d008      	beq.n	80068a4 <memmove+0x28>
 8006892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800689a:	e7f8      	b.n	800688e <memmove+0x12>
 800689c:	4601      	mov	r1, r0
 800689e:	4402      	add	r2, r0
 80068a0:	428a      	cmp	r2, r1
 80068a2:	d100      	bne.n	80068a6 <memmove+0x2a>
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ae:	e7f7      	b.n	80068a0 <memmove+0x24>

080068b0 <__malloc_lock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_lock+0x8>)
 80068b2:	f000 bc19 	b.w	80070e8 <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	200004ec 	.word	0x200004ec

080068bc <__malloc_unlock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__malloc_unlock+0x8>)
 80068be:	f000 bc14 	b.w	80070ea <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	200004ec 	.word	0x200004ec

080068c8 <_realloc_r>:
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068cc:	4680      	mov	r8, r0
 80068ce:	4614      	mov	r4, r2
 80068d0:	460e      	mov	r6, r1
 80068d2:	b921      	cbnz	r1, 80068de <_realloc_r+0x16>
 80068d4:	4611      	mov	r1, r2
 80068d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068da:	f7ff bdad 	b.w	8006438 <_malloc_r>
 80068de:	b92a      	cbnz	r2, 80068ec <_realloc_r+0x24>
 80068e0:	f7ff fd42 	bl	8006368 <_free_r>
 80068e4:	4625      	mov	r5, r4
 80068e6:	4628      	mov	r0, r5
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	f000 fc64 	bl	80071b8 <_malloc_usable_size_r>
 80068f0:	4284      	cmp	r4, r0
 80068f2:	4607      	mov	r7, r0
 80068f4:	d802      	bhi.n	80068fc <_realloc_r+0x34>
 80068f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068fa:	d812      	bhi.n	8006922 <_realloc_r+0x5a>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4640      	mov	r0, r8
 8006900:	f7ff fd9a 	bl	8006438 <_malloc_r>
 8006904:	4605      	mov	r5, r0
 8006906:	2800      	cmp	r0, #0
 8006908:	d0ed      	beq.n	80068e6 <_realloc_r+0x1e>
 800690a:	42bc      	cmp	r4, r7
 800690c:	4622      	mov	r2, r4
 800690e:	4631      	mov	r1, r6
 8006910:	bf28      	it	cs
 8006912:	463a      	movcs	r2, r7
 8006914:	f7ff f984 	bl	8005c20 <memcpy>
 8006918:	4631      	mov	r1, r6
 800691a:	4640      	mov	r0, r8
 800691c:	f7ff fd24 	bl	8006368 <_free_r>
 8006920:	e7e1      	b.n	80068e6 <_realloc_r+0x1e>
 8006922:	4635      	mov	r5, r6
 8006924:	e7df      	b.n	80068e6 <_realloc_r+0x1e>

08006926 <__sfputc_r>:
 8006926:	6893      	ldr	r3, [r2, #8]
 8006928:	b410      	push	{r4}
 800692a:	3b01      	subs	r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	6093      	str	r3, [r2, #8]
 8006930:	da07      	bge.n	8006942 <__sfputc_r+0x1c>
 8006932:	6994      	ldr	r4, [r2, #24]
 8006934:	42a3      	cmp	r3, r4
 8006936:	db01      	blt.n	800693c <__sfputc_r+0x16>
 8006938:	290a      	cmp	r1, #10
 800693a:	d102      	bne.n	8006942 <__sfputc_r+0x1c>
 800693c:	bc10      	pop	{r4}
 800693e:	f000 b949 	b.w	8006bd4 <__swbuf_r>
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	1c58      	adds	r0, r3, #1
 8006946:	6010      	str	r0, [r2, #0]
 8006948:	7019      	strb	r1, [r3, #0]
 800694a:	4608      	mov	r0, r1
 800694c:	bc10      	pop	{r4}
 800694e:	4770      	bx	lr

08006950 <__sfputs_r>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	4606      	mov	r6, r0
 8006954:	460f      	mov	r7, r1
 8006956:	4614      	mov	r4, r2
 8006958:	18d5      	adds	r5, r2, r3
 800695a:	42ac      	cmp	r4, r5
 800695c:	d101      	bne.n	8006962 <__sfputs_r+0x12>
 800695e:	2000      	movs	r0, #0
 8006960:	e007      	b.n	8006972 <__sfputs_r+0x22>
 8006962:	463a      	mov	r2, r7
 8006964:	4630      	mov	r0, r6
 8006966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800696a:	f7ff ffdc 	bl	8006926 <__sfputc_r>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d1f3      	bne.n	800695a <__sfputs_r+0xa>
 8006972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006974 <_vfiprintf_r>:
 8006974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006978:	460d      	mov	r5, r1
 800697a:	4614      	mov	r4, r2
 800697c:	4698      	mov	r8, r3
 800697e:	4606      	mov	r6, r0
 8006980:	b09d      	sub	sp, #116	; 0x74
 8006982:	b118      	cbz	r0, 800698c <_vfiprintf_r+0x18>
 8006984:	6983      	ldr	r3, [r0, #24]
 8006986:	b90b      	cbnz	r3, 800698c <_vfiprintf_r+0x18>
 8006988:	f000 fb10 	bl	8006fac <__sinit>
 800698c:	4b89      	ldr	r3, [pc, #548]	; (8006bb4 <_vfiprintf_r+0x240>)
 800698e:	429d      	cmp	r5, r3
 8006990:	d11b      	bne.n	80069ca <_vfiprintf_r+0x56>
 8006992:	6875      	ldr	r5, [r6, #4]
 8006994:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006996:	07d9      	lsls	r1, r3, #31
 8006998:	d405      	bmi.n	80069a6 <_vfiprintf_r+0x32>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	059a      	lsls	r2, r3, #22
 800699e:	d402      	bmi.n	80069a6 <_vfiprintf_r+0x32>
 80069a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a2:	f000 fba1 	bl	80070e8 <__retarget_lock_acquire_recursive>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	071b      	lsls	r3, r3, #28
 80069aa:	d501      	bpl.n	80069b0 <_vfiprintf_r+0x3c>
 80069ac:	692b      	ldr	r3, [r5, #16]
 80069ae:	b9eb      	cbnz	r3, 80069ec <_vfiprintf_r+0x78>
 80069b0:	4629      	mov	r1, r5
 80069b2:	4630      	mov	r0, r6
 80069b4:	f000 f96e 	bl	8006c94 <__swsetup_r>
 80069b8:	b1c0      	cbz	r0, 80069ec <_vfiprintf_r+0x78>
 80069ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069bc:	07dc      	lsls	r4, r3, #31
 80069be:	d50e      	bpl.n	80069de <_vfiprintf_r+0x6a>
 80069c0:	f04f 30ff 	mov.w	r0, #4294967295
 80069c4:	b01d      	add	sp, #116	; 0x74
 80069c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ca:	4b7b      	ldr	r3, [pc, #492]	; (8006bb8 <_vfiprintf_r+0x244>)
 80069cc:	429d      	cmp	r5, r3
 80069ce:	d101      	bne.n	80069d4 <_vfiprintf_r+0x60>
 80069d0:	68b5      	ldr	r5, [r6, #8]
 80069d2:	e7df      	b.n	8006994 <_vfiprintf_r+0x20>
 80069d4:	4b79      	ldr	r3, [pc, #484]	; (8006bbc <_vfiprintf_r+0x248>)
 80069d6:	429d      	cmp	r5, r3
 80069d8:	bf08      	it	eq
 80069da:	68f5      	ldreq	r5, [r6, #12]
 80069dc:	e7da      	b.n	8006994 <_vfiprintf_r+0x20>
 80069de:	89ab      	ldrh	r3, [r5, #12]
 80069e0:	0598      	lsls	r0, r3, #22
 80069e2:	d4ed      	bmi.n	80069c0 <_vfiprintf_r+0x4c>
 80069e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e6:	f000 fb80 	bl	80070ea <__retarget_lock_release_recursive>
 80069ea:	e7e9      	b.n	80069c0 <_vfiprintf_r+0x4c>
 80069ec:	2300      	movs	r3, #0
 80069ee:	9309      	str	r3, [sp, #36]	; 0x24
 80069f0:	2320      	movs	r3, #32
 80069f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069f6:	2330      	movs	r3, #48	; 0x30
 80069f8:	f04f 0901 	mov.w	r9, #1
 80069fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a00:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006bc0 <_vfiprintf_r+0x24c>
 8006a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a08:	4623      	mov	r3, r4
 8006a0a:	469a      	mov	sl, r3
 8006a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a10:	b10a      	cbz	r2, 8006a16 <_vfiprintf_r+0xa2>
 8006a12:	2a25      	cmp	r2, #37	; 0x25
 8006a14:	d1f9      	bne.n	8006a0a <_vfiprintf_r+0x96>
 8006a16:	ebba 0b04 	subs.w	fp, sl, r4
 8006a1a:	d00b      	beq.n	8006a34 <_vfiprintf_r+0xc0>
 8006a1c:	465b      	mov	r3, fp
 8006a1e:	4622      	mov	r2, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7ff ff94 	bl	8006950 <__sfputs_r>
 8006a28:	3001      	adds	r0, #1
 8006a2a:	f000 80aa 	beq.w	8006b82 <_vfiprintf_r+0x20e>
 8006a2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a30:	445a      	add	r2, fp
 8006a32:	9209      	str	r2, [sp, #36]	; 0x24
 8006a34:	f89a 3000 	ldrb.w	r3, [sl]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 80a2 	beq.w	8006b82 <_vfiprintf_r+0x20e>
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f04f 32ff 	mov.w	r2, #4294967295
 8006a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a48:	f10a 0a01 	add.w	sl, sl, #1
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	9307      	str	r3, [sp, #28]
 8006a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a54:	931a      	str	r3, [sp, #104]	; 0x68
 8006a56:	4654      	mov	r4, sl
 8006a58:	2205      	movs	r2, #5
 8006a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a5e:	4858      	ldr	r0, [pc, #352]	; (8006bc0 <_vfiprintf_r+0x24c>)
 8006a60:	f7ff f8d0 	bl	8005c04 <memchr>
 8006a64:	9a04      	ldr	r2, [sp, #16]
 8006a66:	b9d8      	cbnz	r0, 8006aa0 <_vfiprintf_r+0x12c>
 8006a68:	06d1      	lsls	r1, r2, #27
 8006a6a:	bf44      	itt	mi
 8006a6c:	2320      	movmi	r3, #32
 8006a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a72:	0713      	lsls	r3, r2, #28
 8006a74:	bf44      	itt	mi
 8006a76:	232b      	movmi	r3, #43	; 0x2b
 8006a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a80:	2b2a      	cmp	r3, #42	; 0x2a
 8006a82:	d015      	beq.n	8006ab0 <_vfiprintf_r+0x13c>
 8006a84:	4654      	mov	r4, sl
 8006a86:	2000      	movs	r0, #0
 8006a88:	f04f 0c0a 	mov.w	ip, #10
 8006a8c:	9a07      	ldr	r2, [sp, #28]
 8006a8e:	4621      	mov	r1, r4
 8006a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a94:	3b30      	subs	r3, #48	; 0x30
 8006a96:	2b09      	cmp	r3, #9
 8006a98:	d94e      	bls.n	8006b38 <_vfiprintf_r+0x1c4>
 8006a9a:	b1b0      	cbz	r0, 8006aca <_vfiprintf_r+0x156>
 8006a9c:	9207      	str	r2, [sp, #28]
 8006a9e:	e014      	b.n	8006aca <_vfiprintf_r+0x156>
 8006aa0:	eba0 0308 	sub.w	r3, r0, r8
 8006aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	46a2      	mov	sl, r4
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	e7d2      	b.n	8006a56 <_vfiprintf_r+0xe2>
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	1d19      	adds	r1, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	9103      	str	r1, [sp, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bfbb      	ittet	lt
 8006abc:	425b      	neglt	r3, r3
 8006abe:	f042 0202 	orrlt.w	r2, r2, #2
 8006ac2:	9307      	strge	r3, [sp, #28]
 8006ac4:	9307      	strlt	r3, [sp, #28]
 8006ac6:	bfb8      	it	lt
 8006ac8:	9204      	strlt	r2, [sp, #16]
 8006aca:	7823      	ldrb	r3, [r4, #0]
 8006acc:	2b2e      	cmp	r3, #46	; 0x2e
 8006ace:	d10c      	bne.n	8006aea <_vfiprintf_r+0x176>
 8006ad0:	7863      	ldrb	r3, [r4, #1]
 8006ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad4:	d135      	bne.n	8006b42 <_vfiprintf_r+0x1ce>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	3402      	adds	r4, #2
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	9203      	str	r2, [sp, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bfb8      	it	lt
 8006ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006bc4 <_vfiprintf_r+0x250>
 8006aee:	2203      	movs	r2, #3
 8006af0:	4650      	mov	r0, sl
 8006af2:	7821      	ldrb	r1, [r4, #0]
 8006af4:	f7ff f886 	bl	8005c04 <memchr>
 8006af8:	b140      	cbz	r0, 8006b0c <_vfiprintf_r+0x198>
 8006afa:	2340      	movs	r3, #64	; 0x40
 8006afc:	eba0 000a 	sub.w	r0, r0, sl
 8006b00:	fa03 f000 	lsl.w	r0, r3, r0
 8006b04:	9b04      	ldr	r3, [sp, #16]
 8006b06:	3401      	adds	r4, #1
 8006b08:	4303      	orrs	r3, r0
 8006b0a:	9304      	str	r3, [sp, #16]
 8006b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b10:	2206      	movs	r2, #6
 8006b12:	482d      	ldr	r0, [pc, #180]	; (8006bc8 <_vfiprintf_r+0x254>)
 8006b14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b18:	f7ff f874 	bl	8005c04 <memchr>
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	d03f      	beq.n	8006ba0 <_vfiprintf_r+0x22c>
 8006b20:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <_vfiprintf_r+0x258>)
 8006b22:	bb1b      	cbnz	r3, 8006b6c <_vfiprintf_r+0x1f8>
 8006b24:	9b03      	ldr	r3, [sp, #12]
 8006b26:	3307      	adds	r3, #7
 8006b28:	f023 0307 	bic.w	r3, r3, #7
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b32:	443b      	add	r3, r7
 8006b34:	9309      	str	r3, [sp, #36]	; 0x24
 8006b36:	e767      	b.n	8006a08 <_vfiprintf_r+0x94>
 8006b38:	460c      	mov	r4, r1
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b40:	e7a5      	b.n	8006a8e <_vfiprintf_r+0x11a>
 8006b42:	2300      	movs	r3, #0
 8006b44:	f04f 0c0a 	mov.w	ip, #10
 8006b48:	4619      	mov	r1, r3
 8006b4a:	3401      	adds	r4, #1
 8006b4c:	9305      	str	r3, [sp, #20]
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b54:	3a30      	subs	r2, #48	; 0x30
 8006b56:	2a09      	cmp	r2, #9
 8006b58:	d903      	bls.n	8006b62 <_vfiprintf_r+0x1ee>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0c5      	beq.n	8006aea <_vfiprintf_r+0x176>
 8006b5e:	9105      	str	r1, [sp, #20]
 8006b60:	e7c3      	b.n	8006aea <_vfiprintf_r+0x176>
 8006b62:	4604      	mov	r4, r0
 8006b64:	2301      	movs	r3, #1
 8006b66:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b6a:	e7f0      	b.n	8006b4e <_vfiprintf_r+0x1da>
 8006b6c:	ab03      	add	r3, sp, #12
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	462a      	mov	r2, r5
 8006b72:	4630      	mov	r0, r6
 8006b74:	4b16      	ldr	r3, [pc, #88]	; (8006bd0 <_vfiprintf_r+0x25c>)
 8006b76:	a904      	add	r1, sp, #16
 8006b78:	f7fd fddc 	bl	8004734 <_printf_float>
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	1c78      	adds	r0, r7, #1
 8006b80:	d1d6      	bne.n	8006b30 <_vfiprintf_r+0x1bc>
 8006b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b84:	07d9      	lsls	r1, r3, #31
 8006b86:	d405      	bmi.n	8006b94 <_vfiprintf_r+0x220>
 8006b88:	89ab      	ldrh	r3, [r5, #12]
 8006b8a:	059a      	lsls	r2, r3, #22
 8006b8c:	d402      	bmi.n	8006b94 <_vfiprintf_r+0x220>
 8006b8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b90:	f000 faab 	bl	80070ea <__retarget_lock_release_recursive>
 8006b94:	89ab      	ldrh	r3, [r5, #12]
 8006b96:	065b      	lsls	r3, r3, #25
 8006b98:	f53f af12 	bmi.w	80069c0 <_vfiprintf_r+0x4c>
 8006b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9e:	e711      	b.n	80069c4 <_vfiprintf_r+0x50>
 8006ba0:	ab03      	add	r3, sp, #12
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	462a      	mov	r2, r5
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <_vfiprintf_r+0x25c>)
 8006baa:	a904      	add	r1, sp, #16
 8006bac:	f7fe f85e 	bl	8004c6c <_printf_i>
 8006bb0:	e7e4      	b.n	8006b7c <_vfiprintf_r+0x208>
 8006bb2:	bf00      	nop
 8006bb4:	080077d4 	.word	0x080077d4
 8006bb8:	080077f4 	.word	0x080077f4
 8006bbc:	080077b4 	.word	0x080077b4
 8006bc0:	0800765c 	.word	0x0800765c
 8006bc4:	08007662 	.word	0x08007662
 8006bc8:	08007666 	.word	0x08007666
 8006bcc:	08004735 	.word	0x08004735
 8006bd0:	08006951 	.word	0x08006951

08006bd4 <__swbuf_r>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	460e      	mov	r6, r1
 8006bd8:	4614      	mov	r4, r2
 8006bda:	4605      	mov	r5, r0
 8006bdc:	b118      	cbz	r0, 8006be6 <__swbuf_r+0x12>
 8006bde:	6983      	ldr	r3, [r0, #24]
 8006be0:	b90b      	cbnz	r3, 8006be6 <__swbuf_r+0x12>
 8006be2:	f000 f9e3 	bl	8006fac <__sinit>
 8006be6:	4b21      	ldr	r3, [pc, #132]	; (8006c6c <__swbuf_r+0x98>)
 8006be8:	429c      	cmp	r4, r3
 8006bea:	d12b      	bne.n	8006c44 <__swbuf_r+0x70>
 8006bec:	686c      	ldr	r4, [r5, #4]
 8006bee:	69a3      	ldr	r3, [r4, #24]
 8006bf0:	60a3      	str	r3, [r4, #8]
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	071a      	lsls	r2, r3, #28
 8006bf6:	d52f      	bpl.n	8006c58 <__swbuf_r+0x84>
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	b36b      	cbz	r3, 8006c58 <__swbuf_r+0x84>
 8006bfc:	6923      	ldr	r3, [r4, #16]
 8006bfe:	6820      	ldr	r0, [r4, #0]
 8006c00:	b2f6      	uxtb	r6, r6
 8006c02:	1ac0      	subs	r0, r0, r3
 8006c04:	6963      	ldr	r3, [r4, #20]
 8006c06:	4637      	mov	r7, r6
 8006c08:	4283      	cmp	r3, r0
 8006c0a:	dc04      	bgt.n	8006c16 <__swbuf_r+0x42>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 f938 	bl	8006e84 <_fflush_r>
 8006c14:	bb30      	cbnz	r0, 8006c64 <__swbuf_r+0x90>
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	3001      	adds	r0, #1
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	60a3      	str	r3, [r4, #8]
 8006c1e:	6823      	ldr	r3, [r4, #0]
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	6022      	str	r2, [r4, #0]
 8006c24:	701e      	strb	r6, [r3, #0]
 8006c26:	6963      	ldr	r3, [r4, #20]
 8006c28:	4283      	cmp	r3, r0
 8006c2a:	d004      	beq.n	8006c36 <__swbuf_r+0x62>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	07db      	lsls	r3, r3, #31
 8006c30:	d506      	bpl.n	8006c40 <__swbuf_r+0x6c>
 8006c32:	2e0a      	cmp	r6, #10
 8006c34:	d104      	bne.n	8006c40 <__swbuf_r+0x6c>
 8006c36:	4621      	mov	r1, r4
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f000 f923 	bl	8006e84 <_fflush_r>
 8006c3e:	b988      	cbnz	r0, 8006c64 <__swbuf_r+0x90>
 8006c40:	4638      	mov	r0, r7
 8006c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c44:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <__swbuf_r+0x9c>)
 8006c46:	429c      	cmp	r4, r3
 8006c48:	d101      	bne.n	8006c4e <__swbuf_r+0x7a>
 8006c4a:	68ac      	ldr	r4, [r5, #8]
 8006c4c:	e7cf      	b.n	8006bee <__swbuf_r+0x1a>
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <__swbuf_r+0xa0>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	bf08      	it	eq
 8006c54:	68ec      	ldreq	r4, [r5, #12]
 8006c56:	e7ca      	b.n	8006bee <__swbuf_r+0x1a>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 f81a 	bl	8006c94 <__swsetup_r>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d0cb      	beq.n	8006bfc <__swbuf_r+0x28>
 8006c64:	f04f 37ff 	mov.w	r7, #4294967295
 8006c68:	e7ea      	b.n	8006c40 <__swbuf_r+0x6c>
 8006c6a:	bf00      	nop
 8006c6c:	080077d4 	.word	0x080077d4
 8006c70:	080077f4 	.word	0x080077f4
 8006c74:	080077b4 	.word	0x080077b4

08006c78 <__ascii_wctomb>:
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	b141      	cbz	r1, 8006c90 <__ascii_wctomb+0x18>
 8006c7e:	2aff      	cmp	r2, #255	; 0xff
 8006c80:	d904      	bls.n	8006c8c <__ascii_wctomb+0x14>
 8006c82:	228a      	movs	r2, #138	; 0x8a
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	4770      	bx	lr
 8006c8c:	2001      	movs	r0, #1
 8006c8e:	700a      	strb	r2, [r1, #0]
 8006c90:	4770      	bx	lr
	...

08006c94 <__swsetup_r>:
 8006c94:	4b32      	ldr	r3, [pc, #200]	; (8006d60 <__swsetup_r+0xcc>)
 8006c96:	b570      	push	{r4, r5, r6, lr}
 8006c98:	681d      	ldr	r5, [r3, #0]
 8006c9a:	4606      	mov	r6, r0
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	b125      	cbz	r5, 8006caa <__swsetup_r+0x16>
 8006ca0:	69ab      	ldr	r3, [r5, #24]
 8006ca2:	b913      	cbnz	r3, 8006caa <__swsetup_r+0x16>
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 f981 	bl	8006fac <__sinit>
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <__swsetup_r+0xd0>)
 8006cac:	429c      	cmp	r4, r3
 8006cae:	d10f      	bne.n	8006cd0 <__swsetup_r+0x3c>
 8006cb0:	686c      	ldr	r4, [r5, #4]
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cb8:	0719      	lsls	r1, r3, #28
 8006cba:	d42c      	bmi.n	8006d16 <__swsetup_r+0x82>
 8006cbc:	06dd      	lsls	r5, r3, #27
 8006cbe:	d411      	bmi.n	8006ce4 <__swsetup_r+0x50>
 8006cc0:	2309      	movs	r3, #9
 8006cc2:	6033      	str	r3, [r6, #0]
 8006cc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	e03e      	b.n	8006d4e <__swsetup_r+0xba>
 8006cd0:	4b25      	ldr	r3, [pc, #148]	; (8006d68 <__swsetup_r+0xd4>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d101      	bne.n	8006cda <__swsetup_r+0x46>
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	e7eb      	b.n	8006cb2 <__swsetup_r+0x1e>
 8006cda:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <__swsetup_r+0xd8>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	bf08      	it	eq
 8006ce0:	68ec      	ldreq	r4, [r5, #12]
 8006ce2:	e7e6      	b.n	8006cb2 <__swsetup_r+0x1e>
 8006ce4:	0758      	lsls	r0, r3, #29
 8006ce6:	d512      	bpl.n	8006d0e <__swsetup_r+0x7a>
 8006ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cea:	b141      	cbz	r1, 8006cfe <__swsetup_r+0x6a>
 8006cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d002      	beq.n	8006cfa <__swsetup_r+0x66>
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff fb37 	bl	8006368 <_free_r>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	2300      	movs	r3, #0
 8006d08:	6063      	str	r3, [r4, #4]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f043 0308 	orr.w	r3, r3, #8
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	b94b      	cbnz	r3, 8006d2e <__swsetup_r+0x9a>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d24:	d003      	beq.n	8006d2e <__swsetup_r+0x9a>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f000 fa05 	bl	8007138 <__smakebuf_r>
 8006d2e:	89a0      	ldrh	r0, [r4, #12]
 8006d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d34:	f010 0301 	ands.w	r3, r0, #1
 8006d38:	d00a      	beq.n	8006d50 <__swsetup_r+0xbc>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60a3      	str	r3, [r4, #8]
 8006d3e:	6963      	ldr	r3, [r4, #20]
 8006d40:	425b      	negs	r3, r3
 8006d42:	61a3      	str	r3, [r4, #24]
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	b943      	cbnz	r3, 8006d5a <__swsetup_r+0xc6>
 8006d48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d4c:	d1ba      	bne.n	8006cc4 <__swsetup_r+0x30>
 8006d4e:	bd70      	pop	{r4, r5, r6, pc}
 8006d50:	0781      	lsls	r1, r0, #30
 8006d52:	bf58      	it	pl
 8006d54:	6963      	ldrpl	r3, [r4, #20]
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	e7f4      	b.n	8006d44 <__swsetup_r+0xb0>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	e7f7      	b.n	8006d4e <__swsetup_r+0xba>
 8006d5e:	bf00      	nop
 8006d60:	20000010 	.word	0x20000010
 8006d64:	080077d4 	.word	0x080077d4
 8006d68:	080077f4 	.word	0x080077f4
 8006d6c:	080077b4 	.word	0x080077b4

08006d70 <abort>:
 8006d70:	2006      	movs	r0, #6
 8006d72:	b508      	push	{r3, lr}
 8006d74:	f000 fa50 	bl	8007218 <raise>
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f7fa fc30 	bl	80015de <_exit>
	...

08006d80 <__sflush_r>:
 8006d80:	898a      	ldrh	r2, [r1, #12]
 8006d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d84:	4605      	mov	r5, r0
 8006d86:	0710      	lsls	r0, r2, #28
 8006d88:	460c      	mov	r4, r1
 8006d8a:	d457      	bmi.n	8006e3c <__sflush_r+0xbc>
 8006d8c:	684b      	ldr	r3, [r1, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	dc04      	bgt.n	8006d9c <__sflush_r+0x1c>
 8006d92:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc01      	bgt.n	8006d9c <__sflush_r+0x1c>
 8006d98:	2000      	movs	r0, #0
 8006d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d9e:	2e00      	cmp	r6, #0
 8006da0:	d0fa      	beq.n	8006d98 <__sflush_r+0x18>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006da8:	682f      	ldr	r7, [r5, #0]
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	d032      	beq.n	8006e14 <__sflush_r+0x94>
 8006dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	075a      	lsls	r2, r3, #29
 8006db4:	d505      	bpl.n	8006dc2 <__sflush_r+0x42>
 8006db6:	6863      	ldr	r3, [r4, #4]
 8006db8:	1ac0      	subs	r0, r0, r3
 8006dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006dbc:	b10b      	cbz	r3, 8006dc2 <__sflush_r+0x42>
 8006dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006dc0:	1ac0      	subs	r0, r0, r3
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dc8:	4628      	mov	r0, r5
 8006dca:	6a21      	ldr	r1, [r4, #32]
 8006dcc:	47b0      	blx	r6
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	d106      	bne.n	8006de2 <__sflush_r+0x62>
 8006dd4:	6829      	ldr	r1, [r5, #0]
 8006dd6:	291d      	cmp	r1, #29
 8006dd8:	d82c      	bhi.n	8006e34 <__sflush_r+0xb4>
 8006dda:	4a29      	ldr	r2, [pc, #164]	; (8006e80 <__sflush_r+0x100>)
 8006ddc:	40ca      	lsrs	r2, r1
 8006dde:	07d6      	lsls	r6, r2, #31
 8006de0:	d528      	bpl.n	8006e34 <__sflush_r+0xb4>
 8006de2:	2200      	movs	r2, #0
 8006de4:	6062      	str	r2, [r4, #4]
 8006de6:	6922      	ldr	r2, [r4, #16]
 8006de8:	04d9      	lsls	r1, r3, #19
 8006dea:	6022      	str	r2, [r4, #0]
 8006dec:	d504      	bpl.n	8006df8 <__sflush_r+0x78>
 8006dee:	1c42      	adds	r2, r0, #1
 8006df0:	d101      	bne.n	8006df6 <__sflush_r+0x76>
 8006df2:	682b      	ldr	r3, [r5, #0]
 8006df4:	b903      	cbnz	r3, 8006df8 <__sflush_r+0x78>
 8006df6:	6560      	str	r0, [r4, #84]	; 0x54
 8006df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dfa:	602f      	str	r7, [r5, #0]
 8006dfc:	2900      	cmp	r1, #0
 8006dfe:	d0cb      	beq.n	8006d98 <__sflush_r+0x18>
 8006e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d002      	beq.n	8006e0e <__sflush_r+0x8e>
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f7ff faad 	bl	8006368 <_free_r>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	6360      	str	r0, [r4, #52]	; 0x34
 8006e12:	e7c2      	b.n	8006d9a <__sflush_r+0x1a>
 8006e14:	6a21      	ldr	r1, [r4, #32]
 8006e16:	2301      	movs	r3, #1
 8006e18:	4628      	mov	r0, r5
 8006e1a:	47b0      	blx	r6
 8006e1c:	1c41      	adds	r1, r0, #1
 8006e1e:	d1c7      	bne.n	8006db0 <__sflush_r+0x30>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0c4      	beq.n	8006db0 <__sflush_r+0x30>
 8006e26:	2b1d      	cmp	r3, #29
 8006e28:	d001      	beq.n	8006e2e <__sflush_r+0xae>
 8006e2a:	2b16      	cmp	r3, #22
 8006e2c:	d101      	bne.n	8006e32 <__sflush_r+0xb2>
 8006e2e:	602f      	str	r7, [r5, #0]
 8006e30:	e7b2      	b.n	8006d98 <__sflush_r+0x18>
 8006e32:	89a3      	ldrh	r3, [r4, #12]
 8006e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e38:	81a3      	strh	r3, [r4, #12]
 8006e3a:	e7ae      	b.n	8006d9a <__sflush_r+0x1a>
 8006e3c:	690f      	ldr	r7, [r1, #16]
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	d0aa      	beq.n	8006d98 <__sflush_r+0x18>
 8006e42:	0793      	lsls	r3, r2, #30
 8006e44:	bf18      	it	ne
 8006e46:	2300      	movne	r3, #0
 8006e48:	680e      	ldr	r6, [r1, #0]
 8006e4a:	bf08      	it	eq
 8006e4c:	694b      	ldreq	r3, [r1, #20]
 8006e4e:	1bf6      	subs	r6, r6, r7
 8006e50:	600f      	str	r7, [r1, #0]
 8006e52:	608b      	str	r3, [r1, #8]
 8006e54:	2e00      	cmp	r6, #0
 8006e56:	dd9f      	ble.n	8006d98 <__sflush_r+0x18>
 8006e58:	4633      	mov	r3, r6
 8006e5a:	463a      	mov	r2, r7
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	6a21      	ldr	r1, [r4, #32]
 8006e60:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006e64:	47e0      	blx	ip
 8006e66:	2800      	cmp	r0, #0
 8006e68:	dc06      	bgt.n	8006e78 <__sflush_r+0xf8>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	e790      	b.n	8006d9a <__sflush_r+0x1a>
 8006e78:	4407      	add	r7, r0
 8006e7a:	1a36      	subs	r6, r6, r0
 8006e7c:	e7ea      	b.n	8006e54 <__sflush_r+0xd4>
 8006e7e:	bf00      	nop
 8006e80:	20400001 	.word	0x20400001

08006e84 <_fflush_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	690b      	ldr	r3, [r1, #16]
 8006e88:	4605      	mov	r5, r0
 8006e8a:	460c      	mov	r4, r1
 8006e8c:	b913      	cbnz	r3, 8006e94 <_fflush_r+0x10>
 8006e8e:	2500      	movs	r5, #0
 8006e90:	4628      	mov	r0, r5
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	b118      	cbz	r0, 8006e9e <_fflush_r+0x1a>
 8006e96:	6983      	ldr	r3, [r0, #24]
 8006e98:	b90b      	cbnz	r3, 8006e9e <_fflush_r+0x1a>
 8006e9a:	f000 f887 	bl	8006fac <__sinit>
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <_fflush_r+0x6c>)
 8006ea0:	429c      	cmp	r4, r3
 8006ea2:	d11b      	bne.n	8006edc <_fflush_r+0x58>
 8006ea4:	686c      	ldr	r4, [r5, #4]
 8006ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0ef      	beq.n	8006e8e <_fflush_r+0xa>
 8006eae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006eb0:	07d0      	lsls	r0, r2, #31
 8006eb2:	d404      	bmi.n	8006ebe <_fflush_r+0x3a>
 8006eb4:	0599      	lsls	r1, r3, #22
 8006eb6:	d402      	bmi.n	8006ebe <_fflush_r+0x3a>
 8006eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eba:	f000 f915 	bl	80070e8 <__retarget_lock_acquire_recursive>
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	f7ff ff5d 	bl	8006d80 <__sflush_r>
 8006ec6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ec8:	4605      	mov	r5, r0
 8006eca:	07da      	lsls	r2, r3, #31
 8006ecc:	d4e0      	bmi.n	8006e90 <_fflush_r+0xc>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	059b      	lsls	r3, r3, #22
 8006ed2:	d4dd      	bmi.n	8006e90 <_fflush_r+0xc>
 8006ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ed6:	f000 f908 	bl	80070ea <__retarget_lock_release_recursive>
 8006eda:	e7d9      	b.n	8006e90 <_fflush_r+0xc>
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <_fflush_r+0x70>)
 8006ede:	429c      	cmp	r4, r3
 8006ee0:	d101      	bne.n	8006ee6 <_fflush_r+0x62>
 8006ee2:	68ac      	ldr	r4, [r5, #8]
 8006ee4:	e7df      	b.n	8006ea6 <_fflush_r+0x22>
 8006ee6:	4b04      	ldr	r3, [pc, #16]	; (8006ef8 <_fflush_r+0x74>)
 8006ee8:	429c      	cmp	r4, r3
 8006eea:	bf08      	it	eq
 8006eec:	68ec      	ldreq	r4, [r5, #12]
 8006eee:	e7da      	b.n	8006ea6 <_fflush_r+0x22>
 8006ef0:	080077d4 	.word	0x080077d4
 8006ef4:	080077f4 	.word	0x080077f4
 8006ef8:	080077b4 	.word	0x080077b4

08006efc <std>:
 8006efc:	2300      	movs	r3, #0
 8006efe:	b510      	push	{r4, lr}
 8006f00:	4604      	mov	r4, r0
 8006f02:	e9c0 3300 	strd	r3, r3, [r0]
 8006f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f0a:	6083      	str	r3, [r0, #8]
 8006f0c:	8181      	strh	r1, [r0, #12]
 8006f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f10:	81c2      	strh	r2, [r0, #14]
 8006f12:	6183      	str	r3, [r0, #24]
 8006f14:	4619      	mov	r1, r3
 8006f16:	2208      	movs	r2, #8
 8006f18:	305c      	adds	r0, #92	; 0x5c
 8006f1a:	f7fd fb65 	bl	80045e8 <memset>
 8006f1e:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <std+0x38>)
 8006f20:	6224      	str	r4, [r4, #32]
 8006f22:	6263      	str	r3, [r4, #36]	; 0x24
 8006f24:	4b04      	ldr	r3, [pc, #16]	; (8006f38 <std+0x3c>)
 8006f26:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f28:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <std+0x40>)
 8006f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <std+0x44>)
 8006f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	bf00      	nop
 8006f34:	08007251 	.word	0x08007251
 8006f38:	08007273 	.word	0x08007273
 8006f3c:	080072ab 	.word	0x080072ab
 8006f40:	080072cf 	.word	0x080072cf

08006f44 <_cleanup_r>:
 8006f44:	4901      	ldr	r1, [pc, #4]	; (8006f4c <_cleanup_r+0x8>)
 8006f46:	f000 b8af 	b.w	80070a8 <_fwalk_reent>
 8006f4a:	bf00      	nop
 8006f4c:	08006e85 	.word	0x08006e85

08006f50 <__sfmoreglue>:
 8006f50:	2268      	movs	r2, #104	; 0x68
 8006f52:	b570      	push	{r4, r5, r6, lr}
 8006f54:	1e4d      	subs	r5, r1, #1
 8006f56:	4355      	muls	r5, r2
 8006f58:	460e      	mov	r6, r1
 8006f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f5e:	f7ff fa6b 	bl	8006438 <_malloc_r>
 8006f62:	4604      	mov	r4, r0
 8006f64:	b140      	cbz	r0, 8006f78 <__sfmoreglue+0x28>
 8006f66:	2100      	movs	r1, #0
 8006f68:	e9c0 1600 	strd	r1, r6, [r0]
 8006f6c:	300c      	adds	r0, #12
 8006f6e:	60a0      	str	r0, [r4, #8]
 8006f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f74:	f7fd fb38 	bl	80045e8 <memset>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}

08006f7c <__sfp_lock_acquire>:
 8006f7c:	4801      	ldr	r0, [pc, #4]	; (8006f84 <__sfp_lock_acquire+0x8>)
 8006f7e:	f000 b8b3 	b.w	80070e8 <__retarget_lock_acquire_recursive>
 8006f82:	bf00      	nop
 8006f84:	200004ed 	.word	0x200004ed

08006f88 <__sfp_lock_release>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sfp_lock_release+0x8>)
 8006f8a:	f000 b8ae 	b.w	80070ea <__retarget_lock_release_recursive>
 8006f8e:	bf00      	nop
 8006f90:	200004ed 	.word	0x200004ed

08006f94 <__sinit_lock_acquire>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__sinit_lock_acquire+0x8>)
 8006f96:	f000 b8a7 	b.w	80070e8 <__retarget_lock_acquire_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	200004ee 	.word	0x200004ee

08006fa0 <__sinit_lock_release>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	; (8006fa8 <__sinit_lock_release+0x8>)
 8006fa2:	f000 b8a2 	b.w	80070ea <__retarget_lock_release_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	200004ee 	.word	0x200004ee

08006fac <__sinit>:
 8006fac:	b510      	push	{r4, lr}
 8006fae:	4604      	mov	r4, r0
 8006fb0:	f7ff fff0 	bl	8006f94 <__sinit_lock_acquire>
 8006fb4:	69a3      	ldr	r3, [r4, #24]
 8006fb6:	b11b      	cbz	r3, 8006fc0 <__sinit+0x14>
 8006fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fbc:	f7ff bff0 	b.w	8006fa0 <__sinit_lock_release>
 8006fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8006fc6:	4b13      	ldr	r3, [pc, #76]	; (8007014 <__sinit+0x68>)
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <__sinit+0x6c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	bf08      	it	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	bf08      	it	eq
 8006fd8:	61a3      	streq	r3, [r4, #24]
 8006fda:	f000 f81f 	bl	800701c <__sfp>
 8006fde:	6060      	str	r0, [r4, #4]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 f81b 	bl	800701c <__sfp>
 8006fe6:	60a0      	str	r0, [r4, #8]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 f817 	bl	800701c <__sfp>
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2104      	movs	r1, #4
 8006ff2:	60e0      	str	r0, [r4, #12]
 8006ff4:	6860      	ldr	r0, [r4, #4]
 8006ff6:	f7ff ff81 	bl	8006efc <std>
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	2109      	movs	r1, #9
 8006ffe:	68a0      	ldr	r0, [r4, #8]
 8007000:	f7ff ff7c 	bl	8006efc <std>
 8007004:	2202      	movs	r2, #2
 8007006:	2112      	movs	r1, #18
 8007008:	68e0      	ldr	r0, [r4, #12]
 800700a:	f7ff ff77 	bl	8006efc <std>
 800700e:	2301      	movs	r3, #1
 8007010:	61a3      	str	r3, [r4, #24]
 8007012:	e7d1      	b.n	8006fb8 <__sinit+0xc>
 8007014:	08007438 	.word	0x08007438
 8007018:	08006f45 	.word	0x08006f45

0800701c <__sfp>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	4607      	mov	r7, r0
 8007020:	f7ff ffac 	bl	8006f7c <__sfp_lock_acquire>
 8007024:	4b1e      	ldr	r3, [pc, #120]	; (80070a0 <__sfp+0x84>)
 8007026:	681e      	ldr	r6, [r3, #0]
 8007028:	69b3      	ldr	r3, [r6, #24]
 800702a:	b913      	cbnz	r3, 8007032 <__sfp+0x16>
 800702c:	4630      	mov	r0, r6
 800702e:	f7ff ffbd 	bl	8006fac <__sinit>
 8007032:	3648      	adds	r6, #72	; 0x48
 8007034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007038:	3b01      	subs	r3, #1
 800703a:	d503      	bpl.n	8007044 <__sfp+0x28>
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	b30b      	cbz	r3, 8007084 <__sfp+0x68>
 8007040:	6836      	ldr	r6, [r6, #0]
 8007042:	e7f7      	b.n	8007034 <__sfp+0x18>
 8007044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007048:	b9d5      	cbnz	r5, 8007080 <__sfp+0x64>
 800704a:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <__sfp+0x88>)
 800704c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007050:	60e3      	str	r3, [r4, #12]
 8007052:	6665      	str	r5, [r4, #100]	; 0x64
 8007054:	f000 f847 	bl	80070e6 <__retarget_lock_init_recursive>
 8007058:	f7ff ff96 	bl	8006f88 <__sfp_lock_release>
 800705c:	2208      	movs	r2, #8
 800705e:	4629      	mov	r1, r5
 8007060:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007064:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007068:	6025      	str	r5, [r4, #0]
 800706a:	61a5      	str	r5, [r4, #24]
 800706c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007070:	f7fd faba 	bl	80045e8 <memset>
 8007074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800707c:	4620      	mov	r0, r4
 800707e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007080:	3468      	adds	r4, #104	; 0x68
 8007082:	e7d9      	b.n	8007038 <__sfp+0x1c>
 8007084:	2104      	movs	r1, #4
 8007086:	4638      	mov	r0, r7
 8007088:	f7ff ff62 	bl	8006f50 <__sfmoreglue>
 800708c:	4604      	mov	r4, r0
 800708e:	6030      	str	r0, [r6, #0]
 8007090:	2800      	cmp	r0, #0
 8007092:	d1d5      	bne.n	8007040 <__sfp+0x24>
 8007094:	f7ff ff78 	bl	8006f88 <__sfp_lock_release>
 8007098:	230c      	movs	r3, #12
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	e7ee      	b.n	800707c <__sfp+0x60>
 800709e:	bf00      	nop
 80070a0:	08007438 	.word	0x08007438
 80070a4:	ffff0001 	.word	0xffff0001

080070a8 <_fwalk_reent>:
 80070a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ac:	4606      	mov	r6, r0
 80070ae:	4688      	mov	r8, r1
 80070b0:	2700      	movs	r7, #0
 80070b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070ba:	f1b9 0901 	subs.w	r9, r9, #1
 80070be:	d505      	bpl.n	80070cc <_fwalk_reent+0x24>
 80070c0:	6824      	ldr	r4, [r4, #0]
 80070c2:	2c00      	cmp	r4, #0
 80070c4:	d1f7      	bne.n	80070b6 <_fwalk_reent+0xe>
 80070c6:	4638      	mov	r0, r7
 80070c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070cc:	89ab      	ldrh	r3, [r5, #12]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d907      	bls.n	80070e2 <_fwalk_reent+0x3a>
 80070d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070d6:	3301      	adds	r3, #1
 80070d8:	d003      	beq.n	80070e2 <_fwalk_reent+0x3a>
 80070da:	4629      	mov	r1, r5
 80070dc:	4630      	mov	r0, r6
 80070de:	47c0      	blx	r8
 80070e0:	4307      	orrs	r7, r0
 80070e2:	3568      	adds	r5, #104	; 0x68
 80070e4:	e7e9      	b.n	80070ba <_fwalk_reent+0x12>

080070e6 <__retarget_lock_init_recursive>:
 80070e6:	4770      	bx	lr

080070e8 <__retarget_lock_acquire_recursive>:
 80070e8:	4770      	bx	lr

080070ea <__retarget_lock_release_recursive>:
 80070ea:	4770      	bx	lr

080070ec <__swhatbuf_r>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	460e      	mov	r6, r1
 80070f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f4:	4614      	mov	r4, r2
 80070f6:	2900      	cmp	r1, #0
 80070f8:	461d      	mov	r5, r3
 80070fa:	b096      	sub	sp, #88	; 0x58
 80070fc:	da08      	bge.n	8007110 <__swhatbuf_r+0x24>
 80070fe:	2200      	movs	r2, #0
 8007100:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	061a      	lsls	r2, r3, #24
 8007108:	d410      	bmi.n	800712c <__swhatbuf_r+0x40>
 800710a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710e:	e00e      	b.n	800712e <__swhatbuf_r+0x42>
 8007110:	466a      	mov	r2, sp
 8007112:	f000 f903 	bl	800731c <_fstat_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	dbf1      	blt.n	80070fe <__swhatbuf_r+0x12>
 800711a:	9a01      	ldr	r2, [sp, #4]
 800711c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007124:	425a      	negs	r2, r3
 8007126:	415a      	adcs	r2, r3
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	e7ee      	b.n	800710a <__swhatbuf_r+0x1e>
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	2000      	movs	r0, #0
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	b016      	add	sp, #88	; 0x58
 8007134:	bd70      	pop	{r4, r5, r6, pc}
	...

08007138 <__smakebuf_r>:
 8007138:	898b      	ldrh	r3, [r1, #12]
 800713a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800713c:	079d      	lsls	r5, r3, #30
 800713e:	4606      	mov	r6, r0
 8007140:	460c      	mov	r4, r1
 8007142:	d507      	bpl.n	8007154 <__smakebuf_r+0x1c>
 8007144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	2301      	movs	r3, #1
 800714e:	6163      	str	r3, [r4, #20]
 8007150:	b002      	add	sp, #8
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	466a      	mov	r2, sp
 8007156:	ab01      	add	r3, sp, #4
 8007158:	f7ff ffc8 	bl	80070ec <__swhatbuf_r>
 800715c:	9900      	ldr	r1, [sp, #0]
 800715e:	4605      	mov	r5, r0
 8007160:	4630      	mov	r0, r6
 8007162:	f7ff f969 	bl	8006438 <_malloc_r>
 8007166:	b948      	cbnz	r0, 800717c <__smakebuf_r+0x44>
 8007168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716c:	059a      	lsls	r2, r3, #22
 800716e:	d4ef      	bmi.n	8007150 <__smakebuf_r+0x18>
 8007170:	f023 0303 	bic.w	r3, r3, #3
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	e7e3      	b.n	8007144 <__smakebuf_r+0xc>
 800717c:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <__smakebuf_r+0x7c>)
 800717e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	6020      	str	r0, [r4, #0]
 8007184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	6120      	str	r0, [r4, #16]
 800718e:	6163      	str	r3, [r4, #20]
 8007190:	9b01      	ldr	r3, [sp, #4]
 8007192:	b15b      	cbz	r3, 80071ac <__smakebuf_r+0x74>
 8007194:	4630      	mov	r0, r6
 8007196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800719a:	f000 f8d1 	bl	8007340 <_isatty_r>
 800719e:	b128      	cbz	r0, 80071ac <__smakebuf_r+0x74>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	89a0      	ldrh	r0, [r4, #12]
 80071ae:	4305      	orrs	r5, r0
 80071b0:	81a5      	strh	r5, [r4, #12]
 80071b2:	e7cd      	b.n	8007150 <__smakebuf_r+0x18>
 80071b4:	08006f45 	.word	0x08006f45

080071b8 <_malloc_usable_size_r>:
 80071b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071bc:	1f18      	subs	r0, r3, #4
 80071be:	2b00      	cmp	r3, #0
 80071c0:	bfbc      	itt	lt
 80071c2:	580b      	ldrlt	r3, [r1, r0]
 80071c4:	18c0      	addlt	r0, r0, r3
 80071c6:	4770      	bx	lr

080071c8 <_raise_r>:
 80071c8:	291f      	cmp	r1, #31
 80071ca:	b538      	push	{r3, r4, r5, lr}
 80071cc:	4604      	mov	r4, r0
 80071ce:	460d      	mov	r5, r1
 80071d0:	d904      	bls.n	80071dc <_raise_r+0x14>
 80071d2:	2316      	movs	r3, #22
 80071d4:	6003      	str	r3, [r0, #0]
 80071d6:	f04f 30ff 	mov.w	r0, #4294967295
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071de:	b112      	cbz	r2, 80071e6 <_raise_r+0x1e>
 80071e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071e4:	b94b      	cbnz	r3, 80071fa <_raise_r+0x32>
 80071e6:	4620      	mov	r0, r4
 80071e8:	f000 f830 	bl	800724c <_getpid_r>
 80071ec:	462a      	mov	r2, r5
 80071ee:	4601      	mov	r1, r0
 80071f0:	4620      	mov	r0, r4
 80071f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f6:	f000 b817 	b.w	8007228 <_kill_r>
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d00a      	beq.n	8007214 <_raise_r+0x4c>
 80071fe:	1c59      	adds	r1, r3, #1
 8007200:	d103      	bne.n	800720a <_raise_r+0x42>
 8007202:	2316      	movs	r3, #22
 8007204:	6003      	str	r3, [r0, #0]
 8007206:	2001      	movs	r0, #1
 8007208:	e7e7      	b.n	80071da <_raise_r+0x12>
 800720a:	2400      	movs	r4, #0
 800720c:	4628      	mov	r0, r5
 800720e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007212:	4798      	blx	r3
 8007214:	2000      	movs	r0, #0
 8007216:	e7e0      	b.n	80071da <_raise_r+0x12>

08007218 <raise>:
 8007218:	4b02      	ldr	r3, [pc, #8]	; (8007224 <raise+0xc>)
 800721a:	4601      	mov	r1, r0
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	f7ff bfd3 	b.w	80071c8 <_raise_r>
 8007222:	bf00      	nop
 8007224:	20000010 	.word	0x20000010

08007228 <_kill_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	2300      	movs	r3, #0
 800722c:	4d06      	ldr	r5, [pc, #24]	; (8007248 <_kill_r+0x20>)
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	f7fa f9c2 	bl	80015be <_kill>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d102      	bne.n	8007244 <_kill_r+0x1c>
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	b103      	cbz	r3, 8007244 <_kill_r+0x1c>
 8007242:	6023      	str	r3, [r4, #0]
 8007244:	bd38      	pop	{r3, r4, r5, pc}
 8007246:	bf00      	nop
 8007248:	200004e8 	.word	0x200004e8

0800724c <_getpid_r>:
 800724c:	f7fa b9b0 	b.w	80015b0 <_getpid>

08007250 <__sread>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007258:	f000 f894 	bl	8007384 <_read_r>
 800725c:	2800      	cmp	r0, #0
 800725e:	bfab      	itete	ge
 8007260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007262:	89a3      	ldrhlt	r3, [r4, #12]
 8007264:	181b      	addge	r3, r3, r0
 8007266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800726a:	bfac      	ite	ge
 800726c:	6563      	strge	r3, [r4, #84]	; 0x54
 800726e:	81a3      	strhlt	r3, [r4, #12]
 8007270:	bd10      	pop	{r4, pc}

08007272 <__swrite>:
 8007272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007276:	461f      	mov	r7, r3
 8007278:	898b      	ldrh	r3, [r1, #12]
 800727a:	4605      	mov	r5, r0
 800727c:	05db      	lsls	r3, r3, #23
 800727e:	460c      	mov	r4, r1
 8007280:	4616      	mov	r6, r2
 8007282:	d505      	bpl.n	8007290 <__swrite+0x1e>
 8007284:	2302      	movs	r3, #2
 8007286:	2200      	movs	r2, #0
 8007288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728c:	f000 f868 	bl	8007360 <_lseek_r>
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	4632      	mov	r2, r6
 8007294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	4628      	mov	r0, r5
 800729c:	463b      	mov	r3, r7
 800729e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	f000 b817 	b.w	80072d8 <_write_r>

080072aa <__sseek>:
 80072aa:	b510      	push	{r4, lr}
 80072ac:	460c      	mov	r4, r1
 80072ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b2:	f000 f855 	bl	8007360 <_lseek_r>
 80072b6:	1c43      	adds	r3, r0, #1
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	bf15      	itete	ne
 80072bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80072be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072c6:	81a3      	strheq	r3, [r4, #12]
 80072c8:	bf18      	it	ne
 80072ca:	81a3      	strhne	r3, [r4, #12]
 80072cc:	bd10      	pop	{r4, pc}

080072ce <__sclose>:
 80072ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d2:	f000 b813 	b.w	80072fc <_close_r>
	...

080072d8 <_write_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	2200      	movs	r2, #0
 80072e2:	4d05      	ldr	r5, [pc, #20]	; (80072f8 <_write_r+0x20>)
 80072e4:	602a      	str	r2, [r5, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	f7fa f9a0 	bl	800162c <_write>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_write_r+0x1e>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_write_r+0x1e>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	200004e8 	.word	0x200004e8

080072fc <_close_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	2300      	movs	r3, #0
 8007300:	4d05      	ldr	r5, [pc, #20]	; (8007318 <_close_r+0x1c>)
 8007302:	4604      	mov	r4, r0
 8007304:	4608      	mov	r0, r1
 8007306:	602b      	str	r3, [r5, #0]
 8007308:	f7fa f9ac 	bl	8001664 <_close>
 800730c:	1c43      	adds	r3, r0, #1
 800730e:	d102      	bne.n	8007316 <_close_r+0x1a>
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	b103      	cbz	r3, 8007316 <_close_r+0x1a>
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	bd38      	pop	{r3, r4, r5, pc}
 8007318:	200004e8 	.word	0x200004e8

0800731c <_fstat_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	2300      	movs	r3, #0
 8007320:	4d06      	ldr	r5, [pc, #24]	; (800733c <_fstat_r+0x20>)
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	f7fa f9a6 	bl	800167a <_fstat>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	d102      	bne.n	8007338 <_fstat_r+0x1c>
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	b103      	cbz	r3, 8007338 <_fstat_r+0x1c>
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	200004e8 	.word	0x200004e8

08007340 <_isatty_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	2300      	movs	r3, #0
 8007344:	4d05      	ldr	r5, [pc, #20]	; (800735c <_isatty_r+0x1c>)
 8007346:	4604      	mov	r4, r0
 8007348:	4608      	mov	r0, r1
 800734a:	602b      	str	r3, [r5, #0]
 800734c:	f7fa f9a4 	bl	8001698 <_isatty>
 8007350:	1c43      	adds	r3, r0, #1
 8007352:	d102      	bne.n	800735a <_isatty_r+0x1a>
 8007354:	682b      	ldr	r3, [r5, #0]
 8007356:	b103      	cbz	r3, 800735a <_isatty_r+0x1a>
 8007358:	6023      	str	r3, [r4, #0]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	200004e8 	.word	0x200004e8

08007360 <_lseek_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	4611      	mov	r1, r2
 8007368:	2200      	movs	r2, #0
 800736a:	4d05      	ldr	r5, [pc, #20]	; (8007380 <_lseek_r+0x20>)
 800736c:	602a      	str	r2, [r5, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f7fa f99c 	bl	80016ac <_lseek>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_lseek_r+0x1e>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_lseek_r+0x1e>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	200004e8 	.word	0x200004e8

08007384 <_read_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	2200      	movs	r2, #0
 800738e:	4d05      	ldr	r5, [pc, #20]	; (80073a4 <_read_r+0x20>)
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7fa f92d 	bl	80015f2 <_read>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_read_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_read_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	200004e8 	.word	0x200004e8

080073a8 <_init>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	bf00      	nop
 80073ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ae:	bc08      	pop	{r3}
 80073b0:	469e      	mov	lr, r3
 80073b2:	4770      	bx	lr

080073b4 <_fini>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	bf00      	nop
 80073b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ba:	bc08      	pop	{r3}
 80073bc:	469e      	mov	lr, r3
 80073be:	4770      	bx	lr
