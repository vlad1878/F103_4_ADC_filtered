
F103_4_ADC_filtered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  080084b0  080084b0  000184b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008964  08008964  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008964  08008964  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008964  08008964  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800896c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001e0  08008b4c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08008b4c  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103e2  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fe  00000000  00000000  000305eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00032cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ad4  00000000  00000000  00034f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001372c  00000000  00000000  0004ea14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935eb  00000000  00000000  00062140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f572b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c5c  00000000  00000000  000f577c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008498 	.word	0x08008498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08008498 	.word	0x08008498

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <SMA_FILTER_Get_Value>:
 *  @param  *SMA_Filter_buffer - Массив, где будут лежать сырые значения
 *  @param  *RAW_Data - Сырые данные
 *  @retval  SMA_Filter_Result - Значение, полученное после SMA фильтра.
 ******************************************************************************
 */
uint16_t SMA_FILTER_Get_Value(uint16_t *SMA_Filter_buffer, uint16_t *RAW_Data) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]

	/* Создадим переменную для суммы сырых значений */
	uint32_t SMA_Filter_Result = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]

	/* Начнем заполнять массив сырыми значениями с конца */
	SMA_Filter_buffer[SMA_FILTER_ORDER - 1] = *RAW_Data;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	333e      	adds	r3, #62	; 0x3e
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	8812      	ldrh	r2, [r2, #0]
 8000f5a:	801a      	strh	r2, [r3, #0]

	/* Просуммируем все элементы массива */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	72fb      	strb	r3, [r7, #11]
 8000f60:	e00b      	b.n	8000f7a <SMA_FILTER_Get_Value+0x36>
		SMA_Filter_Result += SMA_Filter_buffer[i];
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	3301      	adds	r3, #1
 8000f78:	72fb      	strb	r3, [r7, #11]
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	2b1f      	cmp	r3, #31
 8000f7e:	d9f0      	bls.n	8000f62 <SMA_FILTER_Get_Value+0x1e>
	 * 32 = 2*2*2*2*2;
	 * Тогда SMA_Filter_Result = SMA_Filter_Result/32 будет равен, как SMA_Filter_Result = SMA_Filter_Result >> 5u;
	 *
	 */
	//SMA_Filter_Result = SMA_Filter_Result / SMA_FILTER_ORDER;
	SMA_Filter_Result = SMA_Filter_Result >> 5u; //32 = 2^5;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	60fb      	str	r3, [r7, #12]

	/* Сдвинем все элементы массива влево на 1 */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	72bb      	strb	r3, [r7, #10]
 8000f8a:	e00d      	b.n	8000fa8 <SMA_FILTER_Get_Value+0x64>
		SMA_Filter_buffer[i] = SMA_Filter_buffer[i + 1];
 8000f8c:	7abb      	ldrb	r3, [r7, #10]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	441a      	add	r2, r3
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	8812      	ldrh	r2, [r2, #0]
 8000fa0:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000fa2:	7abb      	ldrb	r3, [r7, #10]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	72bb      	strb	r3, [r7, #10]
 8000fa8:	7abb      	ldrb	r3, [r7, #10]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d9ee      	bls.n	8000f8c <SMA_FILTER_Get_Value+0x48>
	}

	return (uint16_t)SMA_Filter_Result; //Вернем среднее арифметическое значение
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	b29b      	uxth	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <lcd1602_Send_data>:
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
}

/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <lcd1602_Send_data+0x74>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e006      	b.n	8000fea <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f023 0308 	bic.w	r3, r3, #8
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	214e      	movs	r1, #78	; 0x4e
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <lcd1602_Send_data+0x78>)
 8001004:	f002 fb2a 	bl	800365c <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	b2da      	uxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8001016:	230a      	movs	r3, #10
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	214e      	movs	r1, #78	; 0x4e
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <lcd1602_Send_data+0x78>)
 8001022:	f002 fb1b 	bl	800365c <HAL_I2C_Master_Transmit>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000
 8001034:	20000298 	.word	0x20000298

08001038 <lcd1602_Print_symbol>:
	/*========Инициализация завершена. Включить дисплей========*/
}

/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	f023 030f 	bic.w	r3, r3, #15
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f043 0309 	orr.w	r3, r3, #9
 8001050:	b25b      	sxtb	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001056:	f107 030f 	add.w	r3, r7, #15
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffae 	bl	8000fbc <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	b25b      	sxtb	r3, r3
 8001066:	f043 0309 	orr.w	r3, r3, #9
 800106a:	b25b      	sxtb	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001070:	f107 030f 	add.w	r3, r7, #15
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa1 	bl	8000fbc <lcd1602_Send_data>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <lcd1602_Print_text>:

/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e009      	b.n	80010a4 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ffcd 	bl	8001038 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff f853 	bl	8000150 <strlen>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d8ee      	bhi.n	8001090 <lcd1602_Print_text+0xe>
	}
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d901      	bls.n	80010d6 <lcd1602_SetCursor+0x1a>
		y = 3;
 80010d2:	2303      	movs	r3, #3
 80010d4:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b27      	cmp	r3, #39	; 0x27
 80010da:	d901      	bls.n	80010e0 <lcd1602_SetCursor+0x24>
		x = 39;
 80010dc:	2327      	movs	r3, #39	; 0x27
 80010de:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <lcd1602_SetCursor+0x2e>
		adr = x;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d102      	bne.n	80010f6 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	3340      	adds	r3, #64	; 0x40
 80010f4:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d102      	bne.n	8001102 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3314      	adds	r3, #20
 8001100:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d102      	bne.n	800110e <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3354      	adds	r3, #84	; 0x54
 800110c:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001122:	f107 030e 	add.w	r3, r7, #14
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff48 	bl	8000fbc <lcd1602_Send_data>

	command = (adr << 4);
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001134:	f107 030e 	add.w	r3, r7, #14
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff3f 	bl	8000fbc <lcd1602_Send_data>

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f001 f840 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f866 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 fa56 	bl	8001604 <MX_GPIO_Init>
  MX_DMA_Init();
 8001158:	f000 fa36 	bl	80015c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800115c:	f000 fa0a 	bl	8001574 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001160:	f000 f8b8 	bl	80012d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001164:	f000 f932 	bl	80013cc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001168:	f000 f9b6 	bl	80014d8 <MX_TIM3_Init>
  MX_TIM2_Init();
 800116c:	f000 f95c 	bl	8001428 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  t_led = HAL_GetTick();
 8001170:	f001 f886 	bl	8002280 <HAL_GetTick>
 8001174:	4603      	mov	r3, r0
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <main+0xb8>)
 8001178:	6013      	str	r3, [r2, #0]
  HAL_Delay(100);
 800117a:	2064      	movs	r0, #100	; 0x64
 800117c:	f001 f88a 	bl	8002294 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 8001180:	4820      	ldr	r0, [pc, #128]	; (8001204 <main+0xbc>)
 8001182:	f003 fa91 	bl	80046a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001186:	2100      	movs	r1, #0
 8001188:	481f      	ldr	r0, [pc, #124]	; (8001208 <main+0xc0>)
 800118a:	f003 fb2f 	bl	80047ec <HAL_TIM_PWM_Start>
  while(!lcd_init_flag){
 800118e:	e028      	b.n	80011e2 <main+0x9a>
	  lcd1602_SetCursor(1, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff ff92 	bl	80010bc <lcd1602_SetCursor>
	  sprintf(tx_buffer_lcd, "Initialization..");
 8001198:	491c      	ldr	r1, [pc, #112]	; (800120c <main+0xc4>)
 800119a:	481d      	ldr	r0, [pc, #116]	; (8001210 <main+0xc8>)
 800119c:	f004 ff02 	bl	8005fa4 <siprintf>
	  lcd1602_Print_text(tx_buffer_lcd);
 80011a0:	481b      	ldr	r0, [pc, #108]	; (8001210 <main+0xc8>)
 80011a2:	f7ff ff6e 	bl	8001082 <lcd1602_Print_text>
	  lcd1602_SetCursor(2, 0);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff ff87 	bl	80010bc <lcd1602_SetCursor>
	  sprintf(tx_buffer_lcd, "    %d    ", procent_init_lcd);
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <main+0xcc>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	4918      	ldr	r1, [pc, #96]	; (8001218 <main+0xd0>)
 80011b6:	4816      	ldr	r0, [pc, #88]	; (8001210 <main+0xc8>)
 80011b8:	f004 fef4 	bl	8005fa4 <siprintf>
	  lcd1602_Print_text(tx_buffer_lcd);
 80011bc:	4814      	ldr	r0, [pc, #80]	; (8001210 <main+0xc8>)
 80011be:	f7ff ff60 	bl	8001082 <lcd1602_Print_text>
	  procent_init_lcd += 2;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <main+0xcc>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	3302      	adds	r3, #2
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <main+0xcc>)
 80011cc:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(20);
 80011ce:	2014      	movs	r0, #20
 80011d0:	f001 f860 	bl	8002294 <HAL_Delay>
	  if(procent_init_lcd >= 100){
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <main+0xcc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b63      	cmp	r3, #99	; 0x63
 80011da:	d902      	bls.n	80011e2 <main+0x9a>
		  lcd_init_flag = 1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <main+0xd4>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
  while(!lcd_init_flag){
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <main+0xd4>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f083 0301 	eor.w	r3, r3, #1
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1cf      	bne.n	8001190 <main+0x48>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  select_lcd_mode();
 80011f0:	f000 fc28 	bl	8001a44 <select_lcd_mode>
	  print_adc();
 80011f4:	f000 fa74 	bl	80016e0 <print_adc>
	  led_work();
 80011f8:	f000 fc70 	bl	8001adc <led_work>
	  select_lcd_mode();
 80011fc:	e7f8      	b.n	80011f0 <main+0xa8>
 80011fe:	bf00      	nop
 8001200:	200003c0 	.word	0x200003c0
 8001204:	20000334 	.word	0x20000334
 8001208:	200002ec 	.word	0x200002ec
 800120c:	080084b0 	.word	0x080084b0
 8001210:	200001fc 	.word	0x200001fc
 8001214:	200003c6 	.word	0x200003c6
 8001218:	080084c4 	.word	0x080084c4
 800121c:	200003c7 	.word	0x200003c7

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122a:	2228      	movs	r2, #40	; 0x28
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f004 fa50 	bl	80056d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	2301      	movs	r3, #1
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2302      	movs	r3, #2
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800126c:	2300      	movs	r3, #0
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001274:	4618      	mov	r0, r3
 8001276:	f002 fcf7 	bl	8003c68 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001280:	f000 fc78 	bl	8001b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001294:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 ff63 	bl	800416c <HAL_RCC_ClockConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012ac:	f000 fc62 	bl	8001b74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012b0:	2302      	movs	r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4618      	mov	r0, r3
 80012bc:	f003 f8ee 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80012c6:	f000 fc55 	bl	8001b74 <Error_Handler>
  }
}
 80012ca:	bf00      	nop
 80012cc:	3750      	adds	r7, #80	; 0x50
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <MX_ADC1_Init+0xf0>)
 80012e6:	4a38      	ldr	r2, [pc, #224]	; (80013c8 <MX_ADC1_Init+0xf4>)
 80012e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <MX_ADC1_Init+0xf0>)
 80012ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <MX_ADC1_Init+0xf0>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <MX_ADC1_Init+0xf0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <MX_ADC1_Init+0xf0>)
 8001300:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001304:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <MX_ADC1_Init+0xf0>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_ADC1_Init+0xf0>)
 800130e:	2205      	movs	r2, #5
 8001310:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001312:	482c      	ldr	r0, [pc, #176]	; (80013c4 <MX_ADC1_Init+0xf0>)
 8001314:	f000 ffe2 	bl	80022dc <HAL_ADC_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800131e:	f000 fc29 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001326:	2301      	movs	r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800132a:	2307      	movs	r3, #7
 800132c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4824      	ldr	r0, [pc, #144]	; (80013c4 <MX_ADC1_Init+0xf0>)
 8001334:	f001 f9a4 	bl	8002680 <HAL_ADC_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800133e:	f000 fc19 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001342:	2301      	movs	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001346:	2302      	movs	r3, #2
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	481d      	ldr	r0, [pc, #116]	; (80013c4 <MX_ADC1_Init+0xf0>)
 8001350:	f001 f996 	bl	8002680 <HAL_ADC_ConfigChannel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800135a:	f000 fc0b 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800135e:	2304      	movs	r3, #4
 8001360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001362:	2303      	movs	r3, #3
 8001364:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4619      	mov	r1, r3
 800136e:	4815      	ldr	r0, [pc, #84]	; (80013c4 <MX_ADC1_Init+0xf0>)
 8001370:	f001 f986 	bl	8002680 <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800137a:	f000 fbfb 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800137e:	2306      	movs	r3, #6
 8001380:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001382:	2304      	movs	r3, #4
 8001384:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001386:	2307      	movs	r3, #7
 8001388:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_ADC1_Init+0xf0>)
 8001390:	f001 f976 	bl	8002680 <HAL_ADC_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800139a:	f000 fbeb 	bl	8001b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800139e:	2311      	movs	r3, #17
 80013a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013a2:	2305      	movs	r3, #5
 80013a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	; (80013c4 <MX_ADC1_Init+0xf0>)
 80013ac:	f001 f968 	bl	8002680 <HAL_ADC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80013b6:	f000 fbdd 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000224 	.word	0x20000224
 80013c8:	40012400 	.word	0x40012400

080013cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x50>)
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <MX_I2C1_Init+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x50>)
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_I2C1_Init+0x58>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_I2C1_Init+0x50>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C1_Init+0x50>)
 800140a:	f001 ffe3 	bl	80033d4 <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 fbae 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000298 	.word	0x20000298
 8001420:	40005400 	.word	0x40005400
 8001424:	000186a0 	.word	0x000186a0

08001428 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
 8001446:	615a      	str	r2, [r3, #20]
 8001448:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800144a:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <MX_TIM2_Init+0xac>)
 800144c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001450:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <MX_TIM2_Init+0xac>)
 8001454:	2247      	movs	r2, #71	; 0x47
 8001456:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <MX_TIM2_Init+0xac>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_TIM2_Init+0xac>)
 8001460:	2264      	movs	r2, #100	; 0x64
 8001462:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_TIM2_Init+0xac>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM2_Init+0xac>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001470:	4818      	ldr	r0, [pc, #96]	; (80014d4 <MX_TIM2_Init+0xac>)
 8001472:	f003 f96b 	bl	800474c <HAL_TIM_PWM_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800147c:	f000 fb7a 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4619      	mov	r1, r3
 800148e:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_TIM2_Init+0xac>)
 8001490:	f003 ffaa 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800149a:	f000 fb6b 	bl	8001b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149e:	2360      	movs	r3, #96	; 0x60
 80014a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80014a2:	2332      	movs	r3, #50	; 0x32
 80014a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	2200      	movs	r2, #0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM2_Init+0xac>)
 80014b6:	f003 fb43 	bl	8004b40 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80014c0:	f000 fb58 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM2_Init+0xac>)
 80014c6:	f000 fc75 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002ec 	.word	0x200002ec

080014d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f4:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_TIM3_Init+0x94>)
 80014f6:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <MX_TIM3_Init+0x98>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM3_Init+0x94>)
 80014fc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001500:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM3_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_TIM3_Init+0x94>)
 800150a:	2201      	movs	r2, #1
 800150c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM3_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM3_Init+0x94>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <MX_TIM3_Init+0x94>)
 800151c:	f003 f874 	bl	8004608 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001526:	f000 fb25 	bl	8001b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_TIM3_Init+0x94>)
 8001538:	f003 fbc0 	bl	8004cbc <HAL_TIM_ConfigClockSource>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001542:	f000 fb17 	bl	8001b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	; (800156c <MX_TIM3_Init+0x94>)
 8001554:	f003 ff48 	bl	80053e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800155e:	f000 fb09 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000334 	.word	0x20000334
 8001570:	40000400 	.word	0x40000400

08001574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <MX_USART2_UART_Init+0x50>)
 800157c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_USART2_UART_Init+0x4c>)
 80015ac:	f003 ff8c 	bl	80054c8 <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015b6:	f000 fadd 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2000037c 	.word	0x2000037c
 80015c4:	40004400 	.word	0x40004400

080015c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_DMA_Init+0x38>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <MX_DMA_Init+0x38>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6153      	str	r3, [r2, #20]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_DMA_Init+0x38>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	200b      	movs	r0, #11
 80015ec:	f001 fb19 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f0:	200b      	movs	r0, #11
 80015f2:	f001 fb32 	bl	8002c5a <HAL_NVIC_EnableIRQ>

}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <MX_GPIO_Init+0xcc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a2c      	ldr	r2, [pc, #176]	; (80016d0 <MX_GPIO_Init+0xcc>)
 800161e:	f043 0310 	orr.w	r3, r3, #16
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <MX_GPIO_Init+0xcc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001630:	4b27      	ldr	r3, [pc, #156]	; (80016d0 <MX_GPIO_Init+0xcc>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a26      	ldr	r2, [pc, #152]	; (80016d0 <MX_GPIO_Init+0xcc>)
 8001636:	f043 0320 	orr.w	r3, r3, #32
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b24      	ldr	r3, [pc, #144]	; (80016d0 <MX_GPIO_Init+0xcc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_GPIO_Init+0xcc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <MX_GPIO_Init+0xcc>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <MX_GPIO_Init+0xcc>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <MX_GPIO_Init+0xcc>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <MX_GPIO_Init+0xcc>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <MX_GPIO_Init+0xcc>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2120      	movs	r1, #32
 800167c:	4815      	ldr	r0, [pc, #84]	; (80016d4 <MX_GPIO_Init+0xd0>)
 800167e:	f001 fe79 	bl	8003374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 8001682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <MX_GPIO_Init+0xd4>)
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <MX_GPIO_Init+0xd8>)
 8001698:	f001 fce8 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : user_led_Pin */
  GPIO_InitStruct.Pin = user_led_Pin;
 800169c:	2320      	movs	r3, #32
 800169e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0310 	add.w	r3, r7, #16
 80016b0:	4619      	mov	r1, r3
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <MX_GPIO_Init+0xd0>)
 80016b4:	f001 fcda 	bl	800306c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2028      	movs	r0, #40	; 0x28
 80016be:	f001 fab0 	bl	8002c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016c2:	2028      	movs	r0, #40	; 0x28
 80016c4:	f001 fac9 	bl	8002c5a <HAL_NVIC_EnableIRQ>

}
 80016c8:	bf00      	nop
 80016ca:	3720      	adds	r7, #32
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40010800 	.word	0x40010800
 80016d8:	10110000 	.word	0x10110000
 80016dc:	40011000 	.word	0x40011000

080016e0 <print_adc>:

/* USER CODE BEGIN 4 */
void print_adc(){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af02      	add	r7, sp, #8
	if(adc_flag){
 80016e6:	4b93      	ldr	r3, [pc, #588]	; (8001934 <print_adc+0x254>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 811f 	beq.w	800192e <print_adc+0x24e>
		if(lcd_print_adc){
 80016f0:	4b91      	ldr	r3, [pc, #580]	; (8001938 <print_adc+0x258>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03b      	beq.n	8001770 <print_adc+0x90>
			lcd1602_SetCursor(0, 0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff fcde 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_1 %d", ADC_SMA_Data[0]);
 8001700:	4b8e      	ldr	r3, [pc, #568]	; (800193c <print_adc+0x25c>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	498e      	ldr	r1, [pc, #568]	; (8001940 <print_adc+0x260>)
 8001708:	488e      	ldr	r0, [pc, #568]	; (8001944 <print_adc+0x264>)
 800170a:	f004 fc4b 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800170e:	488d      	ldr	r0, [pc, #564]	; (8001944 <print_adc+0x264>)
 8001710:	f7ff fcb7 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(1, 0);
 8001714:	2100      	movs	r1, #0
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fcd0 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_2 %d", ADC_SMA_Data[1]);
 800171c:	4b87      	ldr	r3, [pc, #540]	; (800193c <print_adc+0x25c>)
 800171e:	885b      	ldrh	r3, [r3, #2]
 8001720:	461a      	mov	r2, r3
 8001722:	4989      	ldr	r1, [pc, #548]	; (8001948 <print_adc+0x268>)
 8001724:	4887      	ldr	r0, [pc, #540]	; (8001944 <print_adc+0x264>)
 8001726:	f004 fc3d 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800172a:	4886      	ldr	r0, [pc, #536]	; (8001944 <print_adc+0x264>)
 800172c:	f7ff fca9 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(2, 0);
 8001730:	2100      	movs	r1, #0
 8001732:	2002      	movs	r0, #2
 8001734:	f7ff fcc2 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_3 %d", ADC_SMA_Data[2]);
 8001738:	4b80      	ldr	r3, [pc, #512]	; (800193c <print_adc+0x25c>)
 800173a:	889b      	ldrh	r3, [r3, #4]
 800173c:	461a      	mov	r2, r3
 800173e:	4983      	ldr	r1, [pc, #524]	; (800194c <print_adc+0x26c>)
 8001740:	4880      	ldr	r0, [pc, #512]	; (8001944 <print_adc+0x264>)
 8001742:	f004 fc2f 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8001746:	487f      	ldr	r0, [pc, #508]	; (8001944 <print_adc+0x264>)
 8001748:	f7ff fc9b 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(3, 0);
 800174c:	2100      	movs	r1, #0
 800174e:	2003      	movs	r0, #3
 8001750:	f7ff fcb4 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_4 %d", ADC_SMA_Data[3]);
 8001754:	4b79      	ldr	r3, [pc, #484]	; (800193c <print_adc+0x25c>)
 8001756:	88db      	ldrh	r3, [r3, #6]
 8001758:	461a      	mov	r2, r3
 800175a:	497d      	ldr	r1, [pc, #500]	; (8001950 <print_adc+0x270>)
 800175c:	4879      	ldr	r0, [pc, #484]	; (8001944 <print_adc+0x264>)
 800175e:	f004 fc21 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8001762:	4878      	ldr	r0, [pc, #480]	; (8001944 <print_adc+0x264>)
 8001764:	f7ff fc8d 	bl	8001082 <lcd1602_Print_text>
			adc_flag = 0;
 8001768:	4b72      	ldr	r3, [pc, #456]	; (8001934 <print_adc+0x254>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
			lcd1602_Print_text(tx_buffer_lcd);
			adc_flag = 0;
		}

	}
}
 800176e:	e0de      	b.n	800192e <print_adc+0x24e>
		else if(lcd_print_voltage){
 8001770:	4b78      	ldr	r3, [pc, #480]	; (8001954 <print_adc+0x274>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05b      	beq.n	8001830 <print_adc+0x150>
			lcd1602_SetCursor(0, 0);
 8001778:	2100      	movs	r1, #0
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fc9e 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[0]));
 8001780:	4b6e      	ldr	r3, [pc, #440]	; (800193c <print_adc+0x25c>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 f8f9 	bl	800197c <adc_to_volt>
 800178a:	4603      	mov	r3, r0
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe4b 	bl	8000428 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4970      	ldr	r1, [pc, #448]	; (8001958 <print_adc+0x278>)
 8001798:	486a      	ldr	r0, [pc, #424]	; (8001944 <print_adc+0x264>)
 800179a:	f004 fc03 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800179e:	4869      	ldr	r0, [pc, #420]	; (8001944 <print_adc+0x264>)
 80017a0:	f7ff fc6f 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(1, 0);
 80017a4:	2100      	movs	r1, #0
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff fc88 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[1]));
 80017ac:	4b63      	ldr	r3, [pc, #396]	; (800193c <print_adc+0x25c>)
 80017ae:	885b      	ldrh	r3, [r3, #2]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f8e3 	bl	800197c <adc_to_volt>
 80017b6:	4603      	mov	r3, r0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe35 	bl	8000428 <__aeabi_f2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4965      	ldr	r1, [pc, #404]	; (8001958 <print_adc+0x278>)
 80017c4:	485f      	ldr	r0, [pc, #380]	; (8001944 <print_adc+0x264>)
 80017c6:	f004 fbed 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80017ca:	485e      	ldr	r0, [pc, #376]	; (8001944 <print_adc+0x264>)
 80017cc:	f7ff fc59 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(2, 0);
 80017d0:	2100      	movs	r1, #0
 80017d2:	2002      	movs	r0, #2
 80017d4:	f7ff fc72 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[2]));
 80017d8:	4b58      	ldr	r3, [pc, #352]	; (800193c <print_adc+0x25c>)
 80017da:	889b      	ldrh	r3, [r3, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f8cd 	bl	800197c <adc_to_volt>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe1f 	bl	8000428 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	495a      	ldr	r1, [pc, #360]	; (8001958 <print_adc+0x278>)
 80017f0:	4854      	ldr	r0, [pc, #336]	; (8001944 <print_adc+0x264>)
 80017f2:	f004 fbd7 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80017f6:	4853      	ldr	r0, [pc, #332]	; (8001944 <print_adc+0x264>)
 80017f8:	f7ff fc43 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(3, 0);
 80017fc:	2100      	movs	r1, #0
 80017fe:	2003      	movs	r0, #3
 8001800:	f7ff fc5c 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[3]));
 8001804:	4b4d      	ldr	r3, [pc, #308]	; (800193c <print_adc+0x25c>)
 8001806:	88db      	ldrh	r3, [r3, #6]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f8b7 	bl	800197c <adc_to_volt>
 800180e:	4603      	mov	r3, r0
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe09 	bl	8000428 <__aeabi_f2d>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	494f      	ldr	r1, [pc, #316]	; (8001958 <print_adc+0x278>)
 800181c:	4849      	ldr	r0, [pc, #292]	; (8001944 <print_adc+0x264>)
 800181e:	f004 fbc1 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8001822:	4848      	ldr	r0, [pc, #288]	; (8001944 <print_adc+0x264>)
 8001824:	f7ff fc2d 	bl	8001082 <lcd1602_Print_text>
			adc_flag = 0;
 8001828:	4b42      	ldr	r3, [pc, #264]	; (8001934 <print_adc+0x254>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
}
 800182e:	e07e      	b.n	800192e <print_adc+0x24e>
		else if(lcd_print_conversation_val){
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <print_adc+0x27c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d07a      	beq.n	800192e <print_adc+0x24e>
			lcd1602_SetCursor(0, 0);
 8001838:	2100      	movs	r1, #0
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fc3e 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_1 %.2f", conversation_adc_to_val(ADC_SMA_Data[0], MIN_VAL_ADC_1, MAX_VAL_ADC_1, 0, ADC_MAX));
 8001840:	4b3e      	ldr	r3, [pc, #248]	; (800193c <print_adc+0x25c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff f9d5 	bl	8000bf4 <__aeabi_ui2f>
 800184a:	4b45      	ldr	r3, [pc, #276]	; (8001960 <print_adc+0x280>)
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	4a44      	ldr	r2, [pc, #272]	; (8001964 <print_adc+0x284>)
 8001854:	4944      	ldr	r1, [pc, #272]	; (8001968 <print_adc+0x288>)
 8001856:	f000 f8a7 	bl	80019a8 <conversation_adc_to_val>
 800185a:	4603      	mov	r3, r0
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fde3 	bl	8000428 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4941      	ldr	r1, [pc, #260]	; (800196c <print_adc+0x28c>)
 8001868:	4836      	ldr	r0, [pc, #216]	; (8001944 <print_adc+0x264>)
 800186a:	f004 fb9b 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800186e:	4835      	ldr	r0, [pc, #212]	; (8001944 <print_adc+0x264>)
 8001870:	f7ff fc07 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(1, 0);
 8001874:	2100      	movs	r1, #0
 8001876:	2001      	movs	r0, #1
 8001878:	f7ff fc20 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_2 %.2f", conversation_adc_to_val(ADC_SMA_Data[1], MIN_VAL_ADC_2, MAX_VAL_ADC_2, 0, ADC_MAX));
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <print_adc+0x25c>)
 800187e:	885b      	ldrh	r3, [r3, #2]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f9b7 	bl	8000bf4 <__aeabi_ui2f>
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <print_adc+0x280>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	4a35      	ldr	r2, [pc, #212]	; (8001964 <print_adc+0x284>)
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <print_adc+0x288>)
 8001892:	f000 f889 	bl	80019a8 <conversation_adc_to_val>
 8001896:	4603      	mov	r3, r0
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fdc5 	bl	8000428 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4933      	ldr	r1, [pc, #204]	; (8001970 <print_adc+0x290>)
 80018a4:	4827      	ldr	r0, [pc, #156]	; (8001944 <print_adc+0x264>)
 80018a6:	f004 fb7d 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80018aa:	4826      	ldr	r0, [pc, #152]	; (8001944 <print_adc+0x264>)
 80018ac:	f7ff fbe9 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(2, 0);
 80018b0:	2100      	movs	r1, #0
 80018b2:	2002      	movs	r0, #2
 80018b4:	f7ff fc02 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_3 %.2f", conversation_adc_to_val(ADC_SMA_Data[2], MIN_VAL_ADC_3, MAX_VAL_ADC_3, 0, ADC_MAX));
 80018b8:	4b20      	ldr	r3, [pc, #128]	; (800193c <print_adc+0x25c>)
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f999 	bl	8000bf4 <__aeabi_ui2f>
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <print_adc+0x280>)
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	4a26      	ldr	r2, [pc, #152]	; (8001964 <print_adc+0x284>)
 80018cc:	4926      	ldr	r1, [pc, #152]	; (8001968 <print_adc+0x288>)
 80018ce:	f000 f86b 	bl	80019a8 <conversation_adc_to_val>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fda7 	bl	8000428 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4925      	ldr	r1, [pc, #148]	; (8001974 <print_adc+0x294>)
 80018e0:	4818      	ldr	r0, [pc, #96]	; (8001944 <print_adc+0x264>)
 80018e2:	f004 fb5f 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80018e6:	4817      	ldr	r0, [pc, #92]	; (8001944 <print_adc+0x264>)
 80018e8:	f7ff fbcb 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(3, 0);
 80018ec:	2100      	movs	r1, #0
 80018ee:	2003      	movs	r0, #3
 80018f0:	f7ff fbe4 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_4 %.2f", conversation_adc_to_val(ADC_SMA_Data[3], MIN_VAL_ADC_4, MAX_VAL_ADC_4, 0, ADC_MAX));
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <print_adc+0x25c>)
 80018f6:	88db      	ldrh	r3, [r3, #6]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff f97b 	bl	8000bf4 <__aeabi_ui2f>
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <print_adc+0x280>)
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	4a17      	ldr	r2, [pc, #92]	; (8001964 <print_adc+0x284>)
 8001908:	4917      	ldr	r1, [pc, #92]	; (8001968 <print_adc+0x288>)
 800190a:	f000 f84d 	bl	80019a8 <conversation_adc_to_val>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd89 	bl	8000428 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4917      	ldr	r1, [pc, #92]	; (8001978 <print_adc+0x298>)
 800191c:	4809      	ldr	r0, [pc, #36]	; (8001944 <print_adc+0x264>)
 800191e:	f004 fb41 	bl	8005fa4 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8001922:	4808      	ldr	r0, [pc, #32]	; (8001944 <print_adc+0x264>)
 8001924:	f7ff fbad 	bl	8001082 <lcd1602_Print_text>
			adc_flag = 0;
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <print_adc+0x254>)
 800192a:	2200      	movs	r2, #0
 800192c:	701a      	strb	r2, [r3, #0]
}
 800192e:	bf00      	nop
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000524 	.word	0x20000524
 8001938:	200003c8 	.word	0x200003c8
 800193c:	20000518 	.word	0x20000518
 8001940:	080084d0 	.word	0x080084d0
 8001944:	200001fc 	.word	0x200001fc
 8001948:	080084dc 	.word	0x080084dc
 800194c:	080084e8 	.word	0x080084e8
 8001950:	080084f4 	.word	0x080084f4
 8001954:	200003c9 	.word	0x200003c9
 8001958:	08008500 	.word	0x08008500
 800195c:	200003ca 	.word	0x200003ca
 8001960:	457ff000 	.word	0x457ff000
 8001964:	43fa0000 	.word	0x43fa0000
 8001968:	c2c80000 	.word	0xc2c80000
 800196c:	08008514 	.word	0x08008514
 8001970:	08008528 	.word	0x08008528
 8001974:	0800853c 	.word	0x0800853c
 8001978:	08008550 	.word	0x08008550

0800197c <adc_to_volt>:

float adc_to_volt(uint16_t adc_val){
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_val * vRef_volt_adc());
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff f933 	bl	8000bf4 <__aeabi_ui2f>
 800198e:	4604      	mov	r4, r0
 8001990:	f000 f890 	bl	8001ab4 <vRef_volt_adc>
 8001994:	4603      	mov	r3, r0
 8001996:	4619      	mov	r1, r3
 8001998:	4620      	mov	r0, r4
 800199a:	f7ff f983 	bl	8000ca4 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0

}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <conversation_adc_to_val>:

float conversation_adc_to_val(float x, float in_min, float in_max, float out_min, float out_max) {
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff f869 	bl	8000a90 <__aeabi_fsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	461c      	mov	r4, r3
 80019c2:	6839      	ldr	r1, [r7, #0]
 80019c4:	6a38      	ldr	r0, [r7, #32]
 80019c6:	f7ff f863 	bl	8000a90 <__aeabi_fsub>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4619      	mov	r1, r3
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff f968 	bl	8000ca4 <__aeabi_fmul>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461c      	mov	r4, r3
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7ff f858 	bl	8000a90 <__aeabi_fsub>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4619      	mov	r1, r3
 80019e4:	4620      	mov	r0, r4
 80019e6:	f7ff fa11 	bl	8000e0c <__aeabi_fdiv>
 80019ea:	4603      	mov	r3, r0
 80019ec:	6839      	ldr	r1, [r7, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f850 	bl	8000a94 <__addsf3>
 80019f4:	4603      	mov	r3, r0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
	...

08001a00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin = GPIO_PIN_13){
 8001a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0e:	80fb      	strh	r3, [r7, #6]
		mode_lcd += mode_lcd;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a22:	701a      	strb	r2, [r3, #0]
		if(mode_lcd > 2){
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d902      	bls.n	8001a34 <HAL_GPIO_EXTI_Callback+0x34>
			mode_lcd = 0;
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x40>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200003cb 	.word	0x200003cb

08001a44 <select_lcd_mode>:

void select_lcd_mode(){
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	switch (mode_lcd) {
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <select_lcd_mode+0x60>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d01a      	beq.n	8001a88 <select_lcd_mode+0x44>
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	dc22      	bgt.n	8001a9c <select_lcd_mode+0x58>
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <select_lcd_mode+0x1c>
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d00a      	beq.n	8001a74 <select_lcd_mode+0x30>
		lcd_print_adc = 0;
		lcd_print_voltage = 0;
		lcd_print_conversation_val = 1;
		break;
	}
}
 8001a5e:	e01d      	b.n	8001a9c <select_lcd_mode+0x58>
		lcd_print_adc = 1;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <select_lcd_mode+0x64>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
		lcd_print_voltage = 0;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <select_lcd_mode+0x68>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
		lcd_print_conversation_val = 0;
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <select_lcd_mode+0x6c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
		break;
 8001a72:	e013      	b.n	8001a9c <select_lcd_mode+0x58>
		lcd_print_adc = 0;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <select_lcd_mode+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
		lcd_print_voltage = 1;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <select_lcd_mode+0x68>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		lcd_print_conversation_val = 0;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <select_lcd_mode+0x6c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
		break;
 8001a86:	e009      	b.n	8001a9c <select_lcd_mode+0x58>
		lcd_print_adc = 0;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <select_lcd_mode+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
		lcd_print_voltage = 0;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	; (8001aac <select_lcd_mode+0x68>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
		lcd_print_conversation_val = 1;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <select_lcd_mode+0x6c>)
 8001a96:	2201      	movs	r2, #1
 8001a98:	701a      	strb	r2, [r3, #0]
		break;
 8001a9a:	bf00      	nop
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	200003cb 	.word	0x200003cb
 8001aa8:	200003c8 	.word	0x200003c8
 8001aac:	200003c9 	.word	0x200003c9
 8001ab0:	200003ca 	.word	0x200003ca

08001ab4 <vRef_volt_adc>:

float vRef_volt_adc(){
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	return mkRefVcc / ADC_SMA_Data[4];
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <vRef_volt_adc+0x20>)
 8001aba:	891b      	ldrh	r3, [r3, #8]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f89d 	bl	8000bfc <__aeabi_i2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4804      	ldr	r0, [pc, #16]	; (8001ad8 <vRef_volt_adc+0x24>)
 8001ac8:	f7ff f9a0 	bl	8000e0c <__aeabi_fdiv>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000518 	.word	0x20000518
 8001ad8:	3f9a3d71 	.word	0x3f9a3d71

08001adc <led_work>:

void led_work(){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - t_led > 30){
 8001ae0:	f000 fbce 	bl	8002280 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <led_work+0x8c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b1e      	cmp	r3, #30
 8001aee:	d938      	bls.n	8001b62 <led_work+0x86>
		t_led = HAL_GetTick();
 8001af0:	f000 fbc6 	bl	8002280 <HAL_GetTick>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <led_work+0x8c>)
 8001af8:	6013      	str	r3, [r2, #0]
		if(led_direction){
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <led_work+0x90>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d011      	beq.n	8001b26 <led_work+0x4a>
			led_pwm += 1;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <led_work+0x94>)
 8001b04:	f993 3000 	ldrsb.w	r3, [r3]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	b25a      	sxtb	r2, r3
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <led_work+0x94>)
 8001b12:	701a      	strb	r2, [r3, #0]
			if(led_pwm >= 100){
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <led_work+0x94>)
 8001b16:	f993 3000 	ldrsb.w	r3, [r3]
 8001b1a:	2b63      	cmp	r3, #99	; 0x63
 8001b1c:	dd1b      	ble.n	8001b56 <led_work+0x7a>
				led_direction = 0;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <led_work+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e017      	b.n	8001b56 <led_work+0x7a>
			}
		}
		else if(!led_direction){
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <led_work+0x90>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	f083 0301 	eor.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d010      	beq.n	8001b56 <led_work+0x7a>
			led_pwm -= 1;
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <led_work+0x94>)
 8001b36:	f993 3000 	ldrsb.w	r3, [r3]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	b25a      	sxtb	r2, r3
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <led_work+0x94>)
 8001b44:	701a      	strb	r2, [r3, #0]
			if(led_pwm <= 0){
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <led_work+0x94>)
 8001b48:	f993 3000 	ldrsb.w	r3, [r3]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	dc02      	bgt.n	8001b56 <led_work+0x7a>
				led_direction = 1;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <led_work+0x90>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	701a      	strb	r2, [r3, #0]
			}
		}
		TIM2->CCR1 = led_pwm;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <led_work+0x94>)
 8001b58:	f993 2000 	ldrsb.w	r2, [r3]
 8001b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34

	}
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200003c0 	.word	0x200003c0
 8001b6c:	200003c4 	.word	0x200003c4
 8001b70:	200003c5 	.word	0x200003c5

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>
	...

08001b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_MspInit+0x60>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_MspInit+0x60>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a28      	ldr	r2, [pc, #160]	; (8001ca0 <HAL_ADC_MspInit+0xbc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d149      	bne.n	8001c98 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c04:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_ADC_MspInit+0xc0>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a26      	ldr	r2, [pc, #152]	; (8001ca4 <HAL_ADC_MspInit+0xc0>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_ADC_MspInit+0xc0>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_ADC_MspInit+0xc0>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a20      	ldr	r2, [pc, #128]	; (8001ca4 <HAL_ADC_MspInit+0xc0>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_ADC_MspInit+0xc0>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 8001c34:	2353      	movs	r3, #83	; 0x53
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4619      	mov	r1, r3
 8001c42:	4819      	ldr	r0, [pc, #100]	; (8001ca8 <HAL_ADC_MspInit+0xc4>)
 8001c44:	f001 fa12 	bl	800306c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_ADC_MspInit+0xcc>)
 8001c4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c68:	4b10      	ldr	r3, [pc, #64]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c6e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c72:	2220      	movs	r2, #32
 8001c74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c7e:	f001 f807 	bl	8002c90 <HAL_DMA_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001c88:	f7ff ff74 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c90:	621a      	str	r2, [r3, #32]
 8001c92:	4a06      	ldr	r2, [pc, #24]	; (8001cac <HAL_ADC_MspInit+0xc8>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3720      	adds	r7, #32
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40012400 	.word	0x40012400
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	20000254 	.word	0x20000254
 8001cb0:	40020008 	.word	0x40020008

08001cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <HAL_I2C_MspInit+0x70>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d123      	bne.n	8001d1c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <HAL_I2C_MspInit+0x78>)
 8001d00:	f001 f9b4 	bl	800306c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001d0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0e:	61d3      	str	r3, [r2, #28]
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_I2C_MspInit+0x74>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d1c:	bf00      	nop
 8001d1e:	3720      	adds	r7, #32
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40005400 	.word	0x40005400
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010c00 	.word	0x40010c00

08001d30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d10b      	bne.n	8001d5a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_TIM_PWM_MspInit+0x34>)
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_TIM_PWM_MspInit+0x34>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	61d3      	str	r3, [r2, #28]
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_TIM_PWM_MspInit+0x34>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	40021000 	.word	0x40021000

08001d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_TIM_Base_MspInit+0x44>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d113      	bne.n	8001da2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_TIM_Base_MspInit+0x48>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <HAL_TIM_Base_MspInit+0x48>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_TIM_Base_MspInit+0x48>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	201d      	movs	r0, #29
 8001d98:	f000 ff43 	bl	8002c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d9c:	201d      	movs	r0, #29
 8001d9e:	f000 ff5c 	bl	8002c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd2:	d12a      	bne.n	8001e2a <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_TIM_MspPostInit+0x80>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_TIM_MspPostInit+0x80>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_TIM_MspPostInit+0x80>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 030c 	add.w	r3, r7, #12
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <HAL_TIM_MspPostInit+0x84>)
 8001e02:	f001 f933 	bl	800306c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_TIM_MspPostInit+0x88>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e12:	61fb      	str	r3, [r7, #28]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <HAL_TIM_MspPostInit+0x88>)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3720      	adds	r7, #32
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010000 	.word	0x40010000

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0310 	add.w	r3, r7, #16
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_UART_MspInit+0x70>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d123      	bne.n	8001ea8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_UART_MspInit+0x74>)
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <HAL_UART_MspInit+0x74>)
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6a:	61d3      	str	r3, [r2, #28]
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_UART_MspInit+0x74>)
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_UART_MspInit+0x74>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_UART_MspInit+0x74>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_UART_MspInit+0x74>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e90:	230c      	movs	r3, #12
 8001e92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_UART_MspInit+0x78>)
 8001ea4:	f001 f8e2 	bl	800306c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3720      	adds	r7, #32
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40004400 	.word	0x40004400
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010800 	.word	0x40010800

08001ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <NMI_Handler+0x4>

08001ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec6:	e7fe      	b.n	8001ec6 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	e7fe      	b.n	8001ecc <MemManage_Handler+0x4>

08001ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <BusFault_Handler+0x4>

08001ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <UsageFault_Handler+0x4>

08001eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f02:	f000 f9ab 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f10:	481e      	ldr	r0, [pc, #120]	; (8001f8c <DMA1_Channel1_IRQHandler+0x80>)
 8001f12:	f000 ff77 	bl	8002e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  Counter_DMA_IT++;
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <DMA1_Channel1_IRQHandler+0x84>)
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b1c      	ldr	r3, [pc, #112]	; (8001f90 <DMA1_Channel1_IRQHandler+0x84>)
 8001f20:	801a      	strh	r2, [r3, #0]
  if (Counter_DMA_IT == 1200) {
 8001f22:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <DMA1_Channel1_IRQHandler+0x84>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001f2a:	d12d      	bne.n	8001f88 <DMA1_Channel1_IRQHandler+0x7c>
  		Counter_DMA_IT = 0;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <DMA1_Channel1_IRQHandler+0x84>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	801a      	strh	r2, [r3, #0]
  		ADC_SMA_Data[0] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_1, &ADC_RAW_Data[0]);
 8001f32:	4918      	ldr	r1, [pc, #96]	; (8001f94 <DMA1_Channel1_IRQHandler+0x88>)
 8001f34:	4818      	ldr	r0, [pc, #96]	; (8001f98 <DMA1_Channel1_IRQHandler+0x8c>)
 8001f36:	f7ff f805 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <DMA1_Channel1_IRQHandler+0x90>)
 8001f40:	801a      	strh	r2, [r3, #0]
  		ADC_SMA_Data[1] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_2, &ADC_RAW_Data[1]);
 8001f42:	4917      	ldr	r1, [pc, #92]	; (8001fa0 <DMA1_Channel1_IRQHandler+0x94>)
 8001f44:	4817      	ldr	r0, [pc, #92]	; (8001fa4 <DMA1_Channel1_IRQHandler+0x98>)
 8001f46:	f7fe fffd 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <DMA1_Channel1_IRQHandler+0x90>)
 8001f50:	805a      	strh	r2, [r3, #2]
  		ADC_SMA_Data[2] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_3, &ADC_RAW_Data[2]);
 8001f52:	4915      	ldr	r1, [pc, #84]	; (8001fa8 <DMA1_Channel1_IRQHandler+0x9c>)
 8001f54:	4815      	ldr	r0, [pc, #84]	; (8001fac <DMA1_Channel1_IRQHandler+0xa0>)
 8001f56:	f7fe fff5 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <DMA1_Channel1_IRQHandler+0x90>)
 8001f60:	809a      	strh	r2, [r3, #4]
  		ADC_SMA_Data[3] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_4, &ADC_RAW_Data[3]);
 8001f62:	4913      	ldr	r1, [pc, #76]	; (8001fb0 <DMA1_Channel1_IRQHandler+0xa4>)
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <DMA1_Channel1_IRQHandler+0xa8>)
 8001f66:	f7fe ffed 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <DMA1_Channel1_IRQHandler+0x90>)
 8001f70:	80da      	strh	r2, [r3, #6]
  		ADC_SMA_Data[4] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_5, &ADC_RAW_Data[4]);
 8001f72:	4911      	ldr	r1, [pc, #68]	; (8001fb8 <DMA1_Channel1_IRQHandler+0xac>)
 8001f74:	4811      	ldr	r0, [pc, #68]	; (8001fbc <DMA1_Channel1_IRQHandler+0xb0>)
 8001f76:	f7fe ffe5 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <DMA1_Channel1_IRQHandler+0x90>)
 8001f80:	811a      	strh	r2, [r3, #8]
  		adc_flag = 1;
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <DMA1_Channel1_IRQHandler+0xb4>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000254 	.word	0x20000254
 8001f90:	20000522 	.word	0x20000522
 8001f94:	2000050c 	.word	0x2000050c
 8001f98:	200003cc 	.word	0x200003cc
 8001f9c:	20000518 	.word	0x20000518
 8001fa0:	2000050e 	.word	0x2000050e
 8001fa4:	2000040c 	.word	0x2000040c
 8001fa8:	20000510 	.word	0x20000510
 8001fac:	2000044c 	.word	0x2000044c
 8001fb0:	20000512 	.word	0x20000512
 8001fb4:	2000048c 	.word	0x2000048c
 8001fb8:	20000514 	.word	0x20000514
 8001fbc:	200004cc 	.word	0x200004cc
 8001fc0:	20000524 	.word	0x20000524

08001fc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <TIM3_IRQHandler+0x18>)
 8001fca:	f002 fcb1 	bl	8004930 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RAW_Data, 5);
 8001fce:	2205      	movs	r2, #5
 8001fd0:	4903      	ldr	r1, [pc, #12]	; (8001fe0 <TIM3_IRQHandler+0x1c>)
 8001fd2:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <TIM3_IRQHandler+0x20>)
 8001fd4:	f000 fa5a 	bl	800248c <HAL_ADC_Start_DMA>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000334 	.word	0x20000334
 8001fe0:	2000050c 	.word	0x2000050c
 8001fe4:	20000224 	.word	0x20000224

08001fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_button_Pin);
 8001fec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ff0:	f001 f9d8 	bl	80033a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
	return 1;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr

08002006 <_kill>:

int _kill(int pid, int sig)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002010:	f003 fb36 	bl	8005680 <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	2216      	movs	r2, #22
 8002018:	601a      	str	r2, [r3, #0]
	return -1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_exit>:

void _exit (int status)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800202e:	f04f 31ff 	mov.w	r1, #4294967295
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffe7 	bl	8002006 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002038:	e7fe      	b.n	8002038 <_exit+0x12>

0800203a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	e00a      	b.n	8002062 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800204c:	f3af 8000 	nop.w
 8002050:	4601      	mov	r1, r0
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	60ba      	str	r2, [r7, #8]
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbf0      	blt.n	800204c <_read+0x12>
	}

return len;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e009      	b.n	800209a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbf1      	blt.n	8002086 <_write+0x12>
	}
	return len;
 80020a2:	687b      	ldr	r3, [r7, #4]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_close>:

int _close(int file)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	return -1;
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020d2:	605a      	str	r2, [r3, #4]
	return 0;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_isatty>:

int _isatty(int file)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	return 1;
 80020e8:	2301      	movs	r3, #1
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <_sbrk+0x5c>)
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <_sbrk+0x60>)
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <_sbrk+0x64>)
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <_sbrk+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800213c:	f003 faa0 	bl	8005680 <__errno>
 8002140:	4603      	mov	r3, r0
 8002142:	220c      	movs	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	e009      	b.n	8002160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <_sbrk+0x64>)
 800215c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20005000 	.word	0x20005000
 800216c:	00000400 	.word	0x00000400
 8002170:	20000528 	.word	0x20000528
 8002174:	20000540 	.word	0x20000540

08002178 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	; (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	; (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	; (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	; (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021aa:	f7ff ffe5 	bl	8002178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021ae:	f003 fa6d 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021b2:	f7fe ffc9 	bl	8001148 <main>
  bx lr
 80021b6:	4770      	bx	lr
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021c0:	0800896c 	.word	0x0800896c
  ldr r2, =_sbss
 80021c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021c8:	20000540 	.word	0x20000540

080021cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC1_2_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_Init+0x28>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_Init+0x28>)
 80021da:	f043 0310 	orr.w	r3, r3, #16
 80021de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e0:	2003      	movs	r0, #3
 80021e2:	f000 fd13 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f000 f808 	bl	80021fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ec:	f7ff fcc8 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40022000 	.word	0x40022000

080021fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_InitTick+0x54>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x58>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fd2b 	bl	8002c76 <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 fcf3 	bl	8002c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_InitTick+0x5c>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000004 	.word	0x20000004
 8002254:	2000000c 	.word	0x2000000c
 8002258:	20000008 	.word	0x20000008

0800225c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_IncTick+0x1c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_IncTick+0x20>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a03      	ldr	r2, [pc, #12]	; (800227c <HAL_IncTick+0x20>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	2000000c 	.word	0x2000000c
 800227c:	2000052c 	.word	0x2000052c

08002280 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_GetTick+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	2000052c 	.word	0x2000052c

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fff0 	bl	8002280 <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_Delay+0x44>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ba:	bf00      	nop
 80022bc:	f7ff ffe0 	bl	8002280 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000000c 	.word	0x2000000c

080022dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e0be      	b.n	800247c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fc62 	bl	8001be4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 faff 	bl	8002924 <ADC_ConversionStop_Disable>
 8002326:	4603      	mov	r3, r0
 8002328:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 8099 	bne.w	800246a <HAL_ADC_Init+0x18e>
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 8095 	bne.w	800246a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002348:	f023 0302 	bic.w	r3, r3, #2
 800234c:	f043 0202 	orr.w	r2, r3, #2
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800235c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	7b1b      	ldrb	r3, [r3, #12]
 8002362:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002364:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4313      	orrs	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002374:	d003      	beq.n	800237e <HAL_ADC_Init+0xa2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d102      	bne.n	8002384 <HAL_ADC_Init+0xa8>
 800237e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002382:	e000      	b.n	8002386 <HAL_ADC_Init+0xaa>
 8002384:	2300      	movs	r3, #0
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4313      	orrs	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7d1b      	ldrb	r3, [r3, #20]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d119      	bne.n	80023c8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	7b1b      	ldrb	r3, [r3, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	035a      	lsls	r2, r3, #13
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e00b      	b.n	80023c8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_ADC_Init+0x1a8>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f8:	d003      	beq.n	8002402 <HAL_ADC_Init+0x126>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d104      	bne.n	800240c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	3b01      	subs	r3, #1
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	430a      	orrs	r2, r1
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_ADC_Init+0x1ac>)
 8002428:	4013      	ands	r3, r2
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	d10b      	bne.n	8002448 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	f023 0303 	bic.w	r3, r3, #3
 800243e:	f043 0201 	orr.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002446:	e018      	b.n	800247a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	f023 0312 	bic.w	r3, r3, #18
 8002450:	f043 0210 	orr.w	r2, r3, #16
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002468:	e007      	b.n	800247a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f043 0210 	orr.w	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800247a:	7dfb      	ldrb	r3, [r7, #23]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	ffe1f7fd 	.word	0xffe1f7fd
 8002488:	ff1f0efe 	.word	0xff1f0efe

0800248c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a64      	ldr	r2, [pc, #400]	; (8002634 <HAL_ADC_Start_DMA+0x1a8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_Start_DMA+0x24>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a63      	ldr	r2, [pc, #396]	; (8002638 <HAL_ADC_Start_DMA+0x1ac>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d106      	bne.n	80024be <HAL_ADC_Start_DMA+0x32>
 80024b0:	4b60      	ldr	r3, [pc, #384]	; (8002634 <HAL_ADC_Start_DMA+0x1a8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 80b3 	bne.w	8002624 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_Start_DMA+0x40>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0ae      	b.n	800262a <HAL_ADC_Start_DMA+0x19e>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f9cb 	bl	8002870 <ADC_Enable>
 80024da:	4603      	mov	r3, r0
 80024dc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024de:	7dfb      	ldrb	r3, [r7, #23]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f040 809a 	bne.w	800261a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <HAL_ADC_Start_DMA+0x1ac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d105      	bne.n	8002510 <HAL_ADC_Start_DMA+0x84>
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_ADC_Start_DMA+0x1a8>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d115      	bne.n	800253c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d026      	beq.n	8002578 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002532:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800253a:	e01d      	b.n	8002578 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a39      	ldr	r2, [pc, #228]	; (8002634 <HAL_ADC_Start_DMA+0x1a8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_ADC_Start_DMA+0xd0>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a38      	ldr	r2, [pc, #224]	; (8002638 <HAL_ADC_Start_DMA+0x1ac>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d10d      	bne.n	8002578 <HAL_ADC_Start_DMA+0xec>
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_ADC_Start_DMA+0x1a8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002570:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	f023 0206 	bic.w	r2, r3, #6
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002590:	e002      	b.n	8002598 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	4a25      	ldr	r2, [pc, #148]	; (800263c <HAL_ADC_Start_DMA+0x1b0>)
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	4a24      	ldr	r2, [pc, #144]	; (8002640 <HAL_ADC_Start_DMA+0x1b4>)
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a23      	ldr	r2, [pc, #140]	; (8002644 <HAL_ADC_Start_DMA+0x1b8>)
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f06f 0202 	mvn.w	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a18      	ldr	r0, [r3, #32]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	334c      	adds	r3, #76	; 0x4c
 80025dc:	4619      	mov	r1, r3
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f000 fbaf 	bl	8002d44 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025f4:	d108      	bne.n	8002608 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002604:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002606:	e00f      	b.n	8002628 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002616:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002618:	e006      	b.n	8002628 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002622:	e001      	b.n	8002628 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002628:	7dfb      	ldrb	r3, [r7, #23]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40012400 	.word	0x40012400
 8002638:	40012800 	.word	0x40012800
 800263c:	080029a7 	.word	0x080029a7
 8002640:	08002a23 	.word	0x08002a23
 8002644:	08002a3f 	.word	0x08002a3f

08002648 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
	...

08002680 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x20>
 800269c:	2302      	movs	r3, #2
 800269e:	e0dc      	b.n	800285a <HAL_ADC_ConfigChannel+0x1da>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b06      	cmp	r3, #6
 80026ae:	d81c      	bhi.n	80026ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	3b05      	subs	r3, #5
 80026c2:	221f      	movs	r2, #31
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	4019      	ands	r1, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	3b05      	subs	r3, #5
 80026dc:	fa00 f203 	lsl.w	r2, r0, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34
 80026e8:	e03c      	b.n	8002764 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d81c      	bhi.n	800272c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b23      	subs	r3, #35	; 0x23
 8002704:	221f      	movs	r2, #31
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	4019      	ands	r1, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	3b23      	subs	r3, #35	; 0x23
 800271e:	fa00 f203 	lsl.w	r2, r0, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	631a      	str	r2, [r3, #48]	; 0x30
 800272a:	e01b      	b.n	8002764 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685a      	ldr	r2, [r3, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	3b41      	subs	r3, #65	; 0x41
 800273e:	221f      	movs	r2, #31
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	4019      	ands	r1, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6818      	ldr	r0, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b41      	subs	r3, #65	; 0x41
 8002758:	fa00 f203 	lsl.w	r2, r0, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b09      	cmp	r3, #9
 800276a:	d91c      	bls.n	80027a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68d9      	ldr	r1, [r3, #12]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	3b1e      	subs	r3, #30
 800277e:	2207      	movs	r2, #7
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	4019      	ands	r1, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6898      	ldr	r0, [r3, #8]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	3b1e      	subs	r3, #30
 8002798:	fa00 f203 	lsl.w	r2, r0, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	e019      	b.n	80027da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6919      	ldr	r1, [r3, #16]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	2207      	movs	r2, #7
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	4019      	ands	r1, r3
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6898      	ldr	r0, [r3, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	fa00 f203 	lsl.w	r2, r0, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d003      	beq.n	80027ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027e6:	2b11      	cmp	r3, #17
 80027e8:	d132      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_ADC_ConfigChannel+0x1e4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d125      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d126      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002810:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b10      	cmp	r3, #16
 8002818:	d11a      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <HAL_ADC_ConfigChannel+0x1e8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <HAL_ADC_ConfigChannel+0x1ec>)
 8002820:	fba2 2303 	umull	r2, r3, r2, r3
 8002824:	0c9a      	lsrs	r2, r3, #18
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002830:	e002      	b.n	8002838 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x1b2>
 800283e:	e007      	b.n	8002850 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40012400 	.word	0x40012400
 8002868:	20000004 	.word	0x20000004
 800286c:	431bde83 	.word	0x431bde83

08002870 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d040      	beq.n	8002910 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <ADC_Enable+0xac>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a1f      	ldr	r2, [pc, #124]	; (8002920 <ADC_Enable+0xb0>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	0c9b      	lsrs	r3, r3, #18
 80028aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028ac:	e002      	b.n	80028b4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f9      	bne.n	80028ae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ba:	f7ff fce1 	bl	8002280 <HAL_GetTick>
 80028be:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028c0:	e01f      	b.n	8002902 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028c2:	f7ff fcdd 	bl	8002280 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d918      	bls.n	8002902 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d011      	beq.n	8002902 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	f043 0210 	orr.w	r2, r3, #16
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e007      	b.n	8002912 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d1d8      	bne.n	80028c2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000004 	.word	0x20000004
 8002920:	431bde83 	.word	0x431bde83

08002924 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d12e      	bne.n	800299c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800294e:	f7ff fc97 	bl	8002280 <HAL_GetTick>
 8002952:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002954:	e01b      	b.n	800298e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002956:	f7ff fc93 	bl	8002280 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d914      	bls.n	800298e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b01      	cmp	r3, #1
 8002970:	d10d      	bne.n	800298e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f043 0210 	orr.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d0dc      	beq.n	8002956 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d127      	bne.n	8002a10 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029da:	d115      	bne.n	8002a08 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff fe1d 	bl	8002648 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002a0e:	e004      	b.n	8002a1a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff fe12 	bl	800265a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	f043 0204 	orr.w	r2, r3, #4
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7ff fe01 	bl	800266c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a90:	4013      	ands	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	60d3      	str	r3, [r2, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0a1b      	lsrs	r3, r3, #8
 8002ac6:	f003 0307 	and.w	r3, r3, #7
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	e000ed00 	.word	0xe000ed00

08002ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	db0b      	blt.n	8002b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	4906      	ldr	r1, [pc, #24]	; (8002b0c <__NVIC_EnableIRQ+0x34>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	2001      	movs	r0, #1
 8002afa:	fa00 f202 	lsl.w	r2, r0, r2
 8002afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d301      	bcc.n	8002bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <SysTick_Config+0x40>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002be6:	210f      	movs	r1, #15
 8002be8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bec:	f7ff ff90 	bl	8002b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <SysTick_Config+0x40>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bf6:	4b04      	ldr	r3, [pc, #16]	; (8002c08 <SysTick_Config+0x40>)
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	e000e010 	.word	0xe000e010

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ff2d 	bl	8002a74 <__NVIC_SetPriorityGrouping>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c34:	f7ff ff42 	bl	8002abc <__NVIC_GetPriorityGrouping>
 8002c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f7ff ff90 	bl	8002b64 <NVIC_EncodePriority>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff ff5f 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff35 	bl	8002ad8 <__NVIC_EnableIRQ>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7ff ffa2 	bl	8002bc8 <SysTick_Config>
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e043      	b.n	8002d2e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <HAL_DMA_Init+0xa8>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <HAL_DMA_Init+0xac>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	009a      	lsls	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_DMA_Init+0xb0>)
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cda:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr
 8002d38:	bffdfff8 	.word	0xbffdfff8
 8002d3c:	cccccccd 	.word	0xcccccccd
 8002d40:	40020000 	.word	0x40020000

08002d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_DMA_Start_IT+0x20>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e04a      	b.n	8002dfa <HAL_DMA_Start_IT+0xb6>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d13a      	bne.n	8002dec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f938 	bl	8003010 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 020e 	orr.w	r2, r2, #14
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e00f      	b.n	8002dda <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0204 	bic.w	r2, r2, #4
 8002dc8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 020a 	orr.w	r2, r2, #10
 8002dd8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0201 	orr.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	e005      	b.n	8002df8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
 8002df6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2204      	movs	r2, #4
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d04f      	beq.n	8002ecc <HAL_DMA_IRQHandler+0xc8>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d04a      	beq.n	8002ecc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0204 	bic.w	r2, r2, #4
 8002e52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a66      	ldr	r2, [pc, #408]	; (8002ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d029      	beq.n	8002eb2 <HAL_DMA_IRQHandler+0xae>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f4>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_IRQHandler+0xaa>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a63      	ldr	r2, [pc, #396]	; (8002ffc <HAL_DMA_IRQHandler+0x1f8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01a      	beq.n	8002ea8 <HAL_DMA_IRQHandler+0xa4>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a62      	ldr	r2, [pc, #392]	; (8003000 <HAL_DMA_IRQHandler+0x1fc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d012      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0x9e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a60      	ldr	r2, [pc, #384]	; (8003004 <HAL_DMA_IRQHandler+0x200>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00a      	beq.n	8002e9c <HAL_DMA_IRQHandler+0x98>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5f      	ldr	r2, [pc, #380]	; (8003008 <HAL_DMA_IRQHandler+0x204>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d102      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x92>
 8002e90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e94:	e00e      	b.n	8002eb4 <HAL_DMA_IRQHandler+0xb0>
 8002e96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e9a:	e00b      	b.n	8002eb4 <HAL_DMA_IRQHandler+0xb0>
 8002e9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ea0:	e008      	b.n	8002eb4 <HAL_DMA_IRQHandler+0xb0>
 8002ea2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ea6:	e005      	b.n	8002eb4 <HAL_DMA_IRQHandler+0xb0>
 8002ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eac:	e002      	b.n	8002eb4 <HAL_DMA_IRQHandler+0xb0>
 8002eae:	2340      	movs	r3, #64	; 0x40
 8002eb0:	e000      	b.n	8002eb4 <HAL_DMA_IRQHandler+0xb0>
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	4a55      	ldr	r2, [pc, #340]	; (800300c <HAL_DMA_IRQHandler+0x208>)
 8002eb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8094 	beq.w	8002fea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002eca:	e08e      	b.n	8002fea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d056      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x186>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d051      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 020a 	bic.w	r2, r2, #10
 8002f02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a38      	ldr	r2, [pc, #224]	; (8002ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d029      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x166>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a37      	ldr	r2, [pc, #220]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d022      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x162>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a35      	ldr	r2, [pc, #212]	; (8002ffc <HAL_DMA_IRQHandler+0x1f8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01a      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x15c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <HAL_DMA_IRQHandler+0x1fc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d012      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x156>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a32      	ldr	r2, [pc, #200]	; (8003004 <HAL_DMA_IRQHandler+0x200>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00a      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x150>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a31      	ldr	r2, [pc, #196]	; (8003008 <HAL_DMA_IRQHandler+0x204>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d102      	bne.n	8002f4e <HAL_DMA_IRQHandler+0x14a>
 8002f48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f4c:	e00e      	b.n	8002f6c <HAL_DMA_IRQHandler+0x168>
 8002f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f52:	e00b      	b.n	8002f6c <HAL_DMA_IRQHandler+0x168>
 8002f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f58:	e008      	b.n	8002f6c <HAL_DMA_IRQHandler+0x168>
 8002f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f5e:	e005      	b.n	8002f6c <HAL_DMA_IRQHandler+0x168>
 8002f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f64:	e002      	b.n	8002f6c <HAL_DMA_IRQHandler+0x168>
 8002f66:	2320      	movs	r3, #32
 8002f68:	e000      	b.n	8002f6c <HAL_DMA_IRQHandler+0x168>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_DMA_IRQHandler+0x208>)
 8002f6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d034      	beq.n	8002fea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f88:	e02f      	b.n	8002fea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2208      	movs	r2, #8
 8002f90:	409a      	lsls	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d028      	beq.n	8002fec <HAL_DMA_IRQHandler+0x1e8>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d023      	beq.n	8002fec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020e 	bic.w	r2, r2, #14
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	4798      	blx	r3
    }
  }
  return;
 8002fea:	bf00      	nop
 8002fec:	bf00      	nop
}
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40020008 	.word	0x40020008
 8002ff8:	4002001c 	.word	0x4002001c
 8002ffc:	40020030 	.word	0x40020030
 8003000:	40020044 	.word	0x40020044
 8003004:	40020058 	.word	0x40020058
 8003008:	4002006c 	.word	0x4002006c
 800300c:	40020000 	.word	0x40020000

08003010 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b10      	cmp	r3, #16
 800303c:	d108      	bne.n	8003050 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800304e:	e007      	b.n	8003060 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
	...

0800306c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800306c:	b480      	push	{r7}
 800306e:	b08b      	sub	sp, #44	; 0x2c
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003076:	2300      	movs	r3, #0
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800307a:	2300      	movs	r3, #0
 800307c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307e:	e169      	b.n	8003354 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003080:	2201      	movs	r2, #1
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	429a      	cmp	r2, r3
 800309a:	f040 8158 	bne.w	800334e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4a9a      	ldr	r2, [pc, #616]	; (800330c <HAL_GPIO_Init+0x2a0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d05e      	beq.n	8003166 <HAL_GPIO_Init+0xfa>
 80030a8:	4a98      	ldr	r2, [pc, #608]	; (800330c <HAL_GPIO_Init+0x2a0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d875      	bhi.n	800319a <HAL_GPIO_Init+0x12e>
 80030ae:	4a98      	ldr	r2, [pc, #608]	; (8003310 <HAL_GPIO_Init+0x2a4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d058      	beq.n	8003166 <HAL_GPIO_Init+0xfa>
 80030b4:	4a96      	ldr	r2, [pc, #600]	; (8003310 <HAL_GPIO_Init+0x2a4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d86f      	bhi.n	800319a <HAL_GPIO_Init+0x12e>
 80030ba:	4a96      	ldr	r2, [pc, #600]	; (8003314 <HAL_GPIO_Init+0x2a8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d052      	beq.n	8003166 <HAL_GPIO_Init+0xfa>
 80030c0:	4a94      	ldr	r2, [pc, #592]	; (8003314 <HAL_GPIO_Init+0x2a8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d869      	bhi.n	800319a <HAL_GPIO_Init+0x12e>
 80030c6:	4a94      	ldr	r2, [pc, #592]	; (8003318 <HAL_GPIO_Init+0x2ac>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d04c      	beq.n	8003166 <HAL_GPIO_Init+0xfa>
 80030cc:	4a92      	ldr	r2, [pc, #584]	; (8003318 <HAL_GPIO_Init+0x2ac>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d863      	bhi.n	800319a <HAL_GPIO_Init+0x12e>
 80030d2:	4a92      	ldr	r2, [pc, #584]	; (800331c <HAL_GPIO_Init+0x2b0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d046      	beq.n	8003166 <HAL_GPIO_Init+0xfa>
 80030d8:	4a90      	ldr	r2, [pc, #576]	; (800331c <HAL_GPIO_Init+0x2b0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d85d      	bhi.n	800319a <HAL_GPIO_Init+0x12e>
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d82a      	bhi.n	8003138 <HAL_GPIO_Init+0xcc>
 80030e2:	2b12      	cmp	r3, #18
 80030e4:	d859      	bhi.n	800319a <HAL_GPIO_Init+0x12e>
 80030e6:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <HAL_GPIO_Init+0x80>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003167 	.word	0x08003167
 80030f0:	08003141 	.word	0x08003141
 80030f4:	08003153 	.word	0x08003153
 80030f8:	08003195 	.word	0x08003195
 80030fc:	0800319b 	.word	0x0800319b
 8003100:	0800319b 	.word	0x0800319b
 8003104:	0800319b 	.word	0x0800319b
 8003108:	0800319b 	.word	0x0800319b
 800310c:	0800319b 	.word	0x0800319b
 8003110:	0800319b 	.word	0x0800319b
 8003114:	0800319b 	.word	0x0800319b
 8003118:	0800319b 	.word	0x0800319b
 800311c:	0800319b 	.word	0x0800319b
 8003120:	0800319b 	.word	0x0800319b
 8003124:	0800319b 	.word	0x0800319b
 8003128:	0800319b 	.word	0x0800319b
 800312c:	0800319b 	.word	0x0800319b
 8003130:	08003149 	.word	0x08003149
 8003134:	0800315d 	.word	0x0800315d
 8003138:	4a79      	ldr	r2, [pc, #484]	; (8003320 <HAL_GPIO_Init+0x2b4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800313e:	e02c      	b.n	800319a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	623b      	str	r3, [r7, #32]
          break;
 8003146:	e029      	b.n	800319c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	3304      	adds	r3, #4
 800314e:	623b      	str	r3, [r7, #32]
          break;
 8003150:	e024      	b.n	800319c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	3308      	adds	r3, #8
 8003158:	623b      	str	r3, [r7, #32]
          break;
 800315a:	e01f      	b.n	800319c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	330c      	adds	r3, #12
 8003162:	623b      	str	r3, [r7, #32]
          break;
 8003164:	e01a      	b.n	800319c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800316e:	2304      	movs	r3, #4
 8003170:	623b      	str	r3, [r7, #32]
          break;
 8003172:	e013      	b.n	800319c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800317c:	2308      	movs	r3, #8
 800317e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	611a      	str	r2, [r3, #16]
          break;
 8003186:	e009      	b.n	800319c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003188:	2308      	movs	r3, #8
 800318a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	615a      	str	r2, [r3, #20]
          break;
 8003192:	e003      	b.n	800319c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003194:	2300      	movs	r3, #0
 8003196:	623b      	str	r3, [r7, #32]
          break;
 8003198:	e000      	b.n	800319c <HAL_GPIO_Init+0x130>
          break;
 800319a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2bff      	cmp	r3, #255	; 0xff
 80031a0:	d801      	bhi.n	80031a6 <HAL_GPIO_Init+0x13a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	e001      	b.n	80031aa <HAL_GPIO_Init+0x13e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	d802      	bhi.n	80031b8 <HAL_GPIO_Init+0x14c>
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	e002      	b.n	80031be <HAL_GPIO_Init+0x152>
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	3b08      	subs	r3, #8
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	210f      	movs	r1, #15
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	401a      	ands	r2, r3
 80031d0:	6a39      	ldr	r1, [r7, #32]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	431a      	orrs	r2, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80b1 	beq.w	800334e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031ec:	4b4d      	ldr	r3, [pc, #308]	; (8003324 <HAL_GPIO_Init+0x2b8>)
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	4a4c      	ldr	r2, [pc, #304]	; (8003324 <HAL_GPIO_Init+0x2b8>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6193      	str	r3, [r2, #24]
 80031f8:	4b4a      	ldr	r3, [pc, #296]	; (8003324 <HAL_GPIO_Init+0x2b8>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003204:	4a48      	ldr	r2, [pc, #288]	; (8003328 <HAL_GPIO_Init+0x2bc>)
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003210:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a40      	ldr	r2, [pc, #256]	; (800332c <HAL_GPIO_Init+0x2c0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <HAL_GPIO_Init+0x1ec>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3f      	ldr	r2, [pc, #252]	; (8003330 <HAL_GPIO_Init+0x2c4>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00d      	beq.n	8003254 <HAL_GPIO_Init+0x1e8>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a3e      	ldr	r2, [pc, #248]	; (8003334 <HAL_GPIO_Init+0x2c8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d007      	beq.n	8003250 <HAL_GPIO_Init+0x1e4>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a3d      	ldr	r2, [pc, #244]	; (8003338 <HAL_GPIO_Init+0x2cc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d101      	bne.n	800324c <HAL_GPIO_Init+0x1e0>
 8003248:	2303      	movs	r3, #3
 800324a:	e006      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 800324c:	2304      	movs	r3, #4
 800324e:	e004      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003250:	2302      	movs	r3, #2
 8003252:	e002      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_GPIO_Init+0x1ee>
 8003258:	2300      	movs	r3, #0
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	f002 0203 	and.w	r2, r2, #3
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	4093      	lsls	r3, r2
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800326a:	492f      	ldr	r1, [pc, #188]	; (8003328 <HAL_GPIO_Init+0x2bc>)
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3302      	adds	r3, #2
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d006      	beq.n	8003292 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003284:	4b2d      	ldr	r3, [pc, #180]	; (800333c <HAL_GPIO_Init+0x2d0>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	492c      	ldr	r1, [pc, #176]	; (800333c <HAL_GPIO_Init+0x2d0>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003292:	4b2a      	ldr	r3, [pc, #168]	; (800333c <HAL_GPIO_Init+0x2d0>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	43db      	mvns	r3, r3
 800329a:	4928      	ldr	r1, [pc, #160]	; (800333c <HAL_GPIO_Init+0x2d0>)
 800329c:	4013      	ands	r3, r2
 800329e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	4922      	ldr	r1, [pc, #136]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
 80032b8:	e006      	b.n	80032c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	491e      	ldr	r1, [pc, #120]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d006      	beq.n	80032e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80032d4:	4b19      	ldr	r3, [pc, #100]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	4918      	ldr	r1, [pc, #96]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	4313      	orrs	r3, r2
 80032de:	608b      	str	r3, [r1, #8]
 80032e0:	e006      	b.n	80032f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	4914      	ldr	r1, [pc, #80]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d021      	beq.n	8003340 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_GPIO_Init+0x2d0>)
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	490e      	ldr	r1, [pc, #56]	; (800333c <HAL_GPIO_Init+0x2d0>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	4313      	orrs	r3, r2
 8003306:	60cb      	str	r3, [r1, #12]
 8003308:	e021      	b.n	800334e <HAL_GPIO_Init+0x2e2>
 800330a:	bf00      	nop
 800330c:	10320000 	.word	0x10320000
 8003310:	10310000 	.word	0x10310000
 8003314:	10220000 	.word	0x10220000
 8003318:	10210000 	.word	0x10210000
 800331c:	10120000 	.word	0x10120000
 8003320:	10110000 	.word	0x10110000
 8003324:	40021000 	.word	0x40021000
 8003328:	40010000 	.word	0x40010000
 800332c:	40010800 	.word	0x40010800
 8003330:	40010c00 	.word	0x40010c00
 8003334:	40011000 	.word	0x40011000
 8003338:	40011400 	.word	0x40011400
 800333c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_GPIO_Init+0x304>)
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	43db      	mvns	r3, r3
 8003348:	4909      	ldr	r1, [pc, #36]	; (8003370 <HAL_GPIO_Init+0x304>)
 800334a:	4013      	ands	r3, r2
 800334c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	3301      	adds	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	f47f ae8e 	bne.w	8003080 <HAL_GPIO_Init+0x14>
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	372c      	adds	r7, #44	; 0x2c
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	40010400 	.word	0x40010400

08003374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	807b      	strh	r3, [r7, #2]
 8003380:	4613      	mov	r3, r2
 8003382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003384:	787b      	ldrb	r3, [r7, #1]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003390:	e003      	b.n	800339a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003392:	887b      	ldrh	r3, [r7, #2]
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	611a      	str	r2, [r3, #16]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033ae:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ba:	4a05      	ldr	r2, [pc, #20]	; (80033d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fb1c 	bl	8001a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40010400 	.word	0x40010400

080033d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e12b      	b.n	800363e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d106      	bne.n	8003400 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fc5a 	bl	8001cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2224      	movs	r2, #36	; 0x24
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0201 	bic.w	r2, r2, #1
 8003416:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003426:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003436:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003438:	f000 ffea 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 800343c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4a81      	ldr	r2, [pc, #516]	; (8003648 <HAL_I2C_Init+0x274>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d807      	bhi.n	8003458 <HAL_I2C_Init+0x84>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a80      	ldr	r2, [pc, #512]	; (800364c <HAL_I2C_Init+0x278>)
 800344c:	4293      	cmp	r3, r2
 800344e:	bf94      	ite	ls
 8003450:	2301      	movls	r3, #1
 8003452:	2300      	movhi	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e006      	b.n	8003466 <HAL_I2C_Init+0x92>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	4a7d      	ldr	r2, [pc, #500]	; (8003650 <HAL_I2C_Init+0x27c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	bf94      	ite	ls
 8003460:	2301      	movls	r3, #1
 8003462:	2300      	movhi	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0e7      	b.n	800363e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a78      	ldr	r2, [pc, #480]	; (8003654 <HAL_I2C_Init+0x280>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	0c9b      	lsrs	r3, r3, #18
 8003478:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a6a      	ldr	r2, [pc, #424]	; (8003648 <HAL_I2C_Init+0x274>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d802      	bhi.n	80034a8 <HAL_I2C_Init+0xd4>
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3301      	adds	r3, #1
 80034a6:	e009      	b.n	80034bc <HAL_I2C_Init+0xe8>
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034ae:	fb02 f303 	mul.w	r3, r2, r3
 80034b2:	4a69      	ldr	r2, [pc, #420]	; (8003658 <HAL_I2C_Init+0x284>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	099b      	lsrs	r3, r3, #6
 80034ba:	3301      	adds	r3, #1
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	495c      	ldr	r1, [pc, #368]	; (8003648 <HAL_I2C_Init+0x274>)
 80034d8:	428b      	cmp	r3, r1
 80034da:	d819      	bhi.n	8003510 <HAL_I2C_Init+0x13c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e59      	subs	r1, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ea:	1c59      	adds	r1, r3, #1
 80034ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034f0:	400b      	ands	r3, r1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_I2C_Init+0x138>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1e59      	subs	r1, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fbb1 f3f3 	udiv	r3, r1, r3
 8003504:	3301      	adds	r3, #1
 8003506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350a:	e051      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 800350c:	2304      	movs	r3, #4
 800350e:	e04f      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d111      	bne.n	800353c <HAL_I2C_Init+0x168>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e58      	subs	r0, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	440b      	add	r3, r1
 8003526:	fbb0 f3f3 	udiv	r3, r0, r3
 800352a:	3301      	adds	r3, #1
 800352c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf0c      	ite	eq
 8003534:	2301      	moveq	r3, #1
 8003536:	2300      	movne	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e012      	b.n	8003562 <HAL_I2C_Init+0x18e>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1e58      	subs	r0, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6859      	ldr	r1, [r3, #4]
 8003544:	460b      	mov	r3, r1
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	0099      	lsls	r1, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003558:	2b00      	cmp	r3, #0
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Init+0x196>
 8003566:	2301      	movs	r3, #1
 8003568:	e022      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10e      	bne.n	8003590 <HAL_I2C_Init+0x1bc>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e58      	subs	r0, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	460b      	mov	r3, r1
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	440b      	add	r3, r1
 8003580:	fbb0 f3f3 	udiv	r3, r0, r3
 8003584:	3301      	adds	r3, #1
 8003586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800358a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Init+0x1dc>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	1e58      	subs	r0, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	0099      	lsls	r1, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	6809      	ldr	r1, [r1, #0]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6911      	ldr	r1, [r2, #16]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68d2      	ldr	r2, [r2, #12]
 80035ea:	4311      	orrs	r1, r2
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	000186a0 	.word	0x000186a0
 800364c:	001e847f 	.word	0x001e847f
 8003650:	003d08ff 	.word	0x003d08ff
 8003654:	431bde83 	.word	0x431bde83
 8003658:	10624dd3 	.word	0x10624dd3

0800365c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	461a      	mov	r2, r3
 8003668:	460b      	mov	r3, r1
 800366a:	817b      	strh	r3, [r7, #10]
 800366c:	4613      	mov	r3, r2
 800366e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003670:	f7fe fe06 	bl	8002280 <HAL_GetTick>
 8003674:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b20      	cmp	r3, #32
 8003680:	f040 80e0 	bne.w	8003844 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2319      	movs	r3, #25
 800368a:	2201      	movs	r2, #1
 800368c:	4970      	ldr	r1, [pc, #448]	; (8003850 <HAL_I2C_Master_Transmit+0x1f4>)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f964 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	e0d3      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_I2C_Master_Transmit+0x50>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0cc      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d007      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2210      	movs	r2, #16
 80036ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	893a      	ldrh	r2, [r7, #8]
 8003702:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4a50      	ldr	r2, [pc, #320]	; (8003854 <HAL_I2C_Master_Transmit+0x1f8>)
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003714:	8979      	ldrh	r1, [r7, #10]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	6a3a      	ldr	r2, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f89c 	bl	8003858 <I2C_MasterRequestWrite>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e08d      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003740:	e066      	b.n	8003810 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	6a39      	ldr	r1, [r7, #32]
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f9de 	bl	8003b08 <I2C_WaitOnTXEFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b04      	cmp	r3, #4
 8003758:	d107      	bne.n	800376a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003768:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06b      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d11b      	bne.n	80037e4 <HAL_I2C_Master_Transmit+0x188>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	6a39      	ldr	r1, [r7, #32]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f9ce 	bl	8003b8a <I2C_WaitOnBTFFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e01a      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d194      	bne.n	8003742 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	00100002 	.word	0x00100002
 8003854:	ffff0000 	.word	0xffff0000

08003858 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	607a      	str	r2, [r7, #4]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	460b      	mov	r3, r1
 8003866:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d006      	beq.n	8003882 <I2C_MasterRequestWrite+0x2a>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d003      	beq.n	8003882 <I2C_MasterRequestWrite+0x2a>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003880:	d108      	bne.n	8003894 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e00b      	b.n	80038ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	2b12      	cmp	r3, #18
 800389a:	d107      	bne.n	80038ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f84f 	bl	800395c <I2C_WaitOnFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00d      	beq.n	80038e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d2:	d103      	bne.n	80038dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e035      	b.n	800394c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e8:	d108      	bne.n	80038fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	e01b      	b.n	8003934 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038fc:	897b      	ldrh	r3, [r7, #10]
 80038fe:	11db      	asrs	r3, r3, #7
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 0306 	and.w	r3, r3, #6
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f063 030f 	orn	r3, r3, #15
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	490e      	ldr	r1, [pc, #56]	; (8003954 <I2C_MasterRequestWrite+0xfc>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f875 	bl	8003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e010      	b.n	800394c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800392a:	897b      	ldrh	r3, [r7, #10]
 800392c:	b2da      	uxtb	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	4907      	ldr	r1, [pc, #28]	; (8003958 <I2C_MasterRequestWrite+0x100>)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f865 	bl	8003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e000      	b.n	800394c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010008 	.word	0x00010008
 8003958:	00010002 	.word	0x00010002

0800395c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396c:	e025      	b.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d021      	beq.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fe fc83 	bl	8002280 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d116      	bne.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e023      	b.n	8003a02 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d10d      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	43da      	mvns	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4013      	ands	r3, r2
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	e00c      	b.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d0b6      	beq.n	800396e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a18:	e051      	b.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a28:	d123      	bne.n	8003a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a38:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f043 0204 	orr.w	r2, r3, #4
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e046      	b.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d021      	beq.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7a:	f7fe fc01 	bl	8002280 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d302      	bcc.n	8003a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f043 0220 	orr.w	r2, r3, #32
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e020      	b.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10c      	bne.n	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e00b      	b.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d18d      	bne.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b14:	e02d      	b.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f878 	bl	8003c0c <I2C_IsAcknowledgeFailed>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e02d      	b.n	8003b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2c:	d021      	beq.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b2e:	f7fe fba7 	bl	8002280 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d302      	bcc.n	8003b44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d116      	bne.n	8003b72 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e007      	b.n	8003b82 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d1ca      	bne.n	8003b16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b084      	sub	sp, #16
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b96:	e02d      	b.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f837 	bl	8003c0c <I2C_IsAcknowledgeFailed>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e02d      	b.n	8003c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d021      	beq.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7fe fb66 	bl	8002280 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d116      	bne.n	8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e007      	b.n	8003c04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d1ca      	bne.n	8003b98 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c22:	d11b      	bne.n	8003c5c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c2c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f043 0204 	orr.w	r2, r3, #4
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e272      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 8087 	beq.w	8003d96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c88:	4b92      	ldr	r3, [pc, #584]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d00c      	beq.n	8003cae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c94:	4b8f      	ldr	r3, [pc, #572]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d112      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x5e>
 8003ca0:	4b8c      	ldr	r3, [pc, #560]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cac:	d10b      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cae:	4b89      	ldr	r3, [pc, #548]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d06c      	beq.n	8003d94 <HAL_RCC_OscConfig+0x12c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d168      	bne.n	8003d94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e24c      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cce:	d106      	bne.n	8003cde <HAL_RCC_OscConfig+0x76>
 8003cd0:	4b80      	ldr	r3, [pc, #512]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a7f      	ldr	r2, [pc, #508]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	e02e      	b.n	8003d3c <HAL_RCC_OscConfig+0xd4>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10c      	bne.n	8003d00 <HAL_RCC_OscConfig+0x98>
 8003ce6:	4b7b      	ldr	r3, [pc, #492]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7a      	ldr	r2, [pc, #488]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	4b78      	ldr	r3, [pc, #480]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a77      	ldr	r2, [pc, #476]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e01d      	b.n	8003d3c <HAL_RCC_OscConfig+0xd4>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0xbc>
 8003d0a:	4b72      	ldr	r3, [pc, #456]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a71      	ldr	r2, [pc, #452]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b6f      	ldr	r3, [pc, #444]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6e      	ldr	r2, [pc, #440]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0xd4>
 8003d24:	4b6b      	ldr	r3, [pc, #428]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6a      	ldr	r2, [pc, #424]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b68      	ldr	r3, [pc, #416]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a67      	ldr	r2, [pc, #412]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fe fa9c 	bl	8002280 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe fa98 	bl	8002280 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e200      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	4b5d      	ldr	r3, [pc, #372]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0xe4>
 8003d6a:	e014      	b.n	8003d96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fa88 	bl	8002280 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe fa84 	bl	8002280 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e1ec      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d86:	4b53      	ldr	r3, [pc, #332]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x10c>
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d063      	beq.n	8003e6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003da2:	4b4c      	ldr	r3, [pc, #304]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dae:	4b49      	ldr	r3, [pc, #292]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d11c      	bne.n	8003df4 <HAL_RCC_OscConfig+0x18c>
 8003dba:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d116      	bne.n	8003df4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc6:	4b43      	ldr	r3, [pc, #268]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_RCC_OscConfig+0x176>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d001      	beq.n	8003dde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e1c0      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dde:	4b3d      	ldr	r3, [pc, #244]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4939      	ldr	r1, [pc, #228]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df2:	e03a      	b.n	8003e6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dfc:	4b36      	ldr	r3, [pc, #216]	; (8003ed8 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e02:	f7fe fa3d 	bl	8002280 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0a:	f7fe fa39 	bl	8002280 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e1a1      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1c:	4b2d      	ldr	r3, [pc, #180]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e28:	4b2a      	ldr	r3, [pc, #168]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4927      	ldr	r1, [pc, #156]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	600b      	str	r3, [r1, #0]
 8003e3c:	e015      	b.n	8003e6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3e:	4b26      	ldr	r3, [pc, #152]	; (8003ed8 <HAL_RCC_OscConfig+0x270>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fe fa1c 	bl	8002280 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fa18 	bl	8002280 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e180      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d03a      	beq.n	8003eec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d019      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <HAL_RCC_OscConfig+0x274>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e84:	f7fe f9fc 	bl	8002280 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8c:	f7fe f9f8 	bl	8002280 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e160      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f000 fad8 	bl	8004460 <RCC_Delay>
 8003eb0:	e01c      	b.n	8003eec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <HAL_RCC_OscConfig+0x274>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb8:	f7fe f9e2 	bl	8002280 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebe:	e00f      	b.n	8003ee0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec0:	f7fe f9de 	bl	8002280 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d908      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e146      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	42420000 	.word	0x42420000
 8003edc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	4b92      	ldr	r3, [pc, #584]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e9      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a6 	beq.w	8004046 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003efa:	2300      	movs	r3, #0
 8003efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efe:	4b8b      	ldr	r3, [pc, #556]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10d      	bne.n	8003f26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f0a:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4a87      	ldr	r2, [pc, #540]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	61d3      	str	r3, [r2, #28]
 8003f16:	4b85      	ldr	r3, [pc, #532]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b82      	ldr	r3, [pc, #520]	; (8004130 <HAL_RCC_OscConfig+0x4c8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d118      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f32:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <HAL_RCC_OscConfig+0x4c8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a7e      	ldr	r2, [pc, #504]	; (8004130 <HAL_RCC_OscConfig+0x4c8>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fe f99f 	bl	8002280 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f46:	f7fe f99b 	bl	8002280 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b64      	cmp	r3, #100	; 0x64
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e103      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	4b75      	ldr	r3, [pc, #468]	; (8004130 <HAL_RCC_OscConfig+0x4c8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x312>
 8003f6c:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a6e      	ldr	r2, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	e02d      	b.n	8003fd6 <HAL_RCC_OscConfig+0x36e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x334>
 8003f82:	4b6a      	ldr	r3, [pc, #424]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4a69      	ldr	r2, [pc, #420]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	f023 0301 	bic.w	r3, r3, #1
 8003f8c:	6213      	str	r3, [r2, #32]
 8003f8e:	4b67      	ldr	r3, [pc, #412]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	4a66      	ldr	r2, [pc, #408]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	f023 0304 	bic.w	r3, r3, #4
 8003f98:	6213      	str	r3, [r2, #32]
 8003f9a:	e01c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x36e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RCC_OscConfig+0x356>
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	4a60      	ldr	r2, [pc, #384]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6213      	str	r3, [r2, #32]
 8003fb0:	4b5e      	ldr	r3, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	4a5d      	ldr	r2, [pc, #372]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6213      	str	r3, [r2, #32]
 8003fbc:	e00b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x36e>
 8003fbe:	4b5b      	ldr	r3, [pc, #364]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4a5a      	ldr	r2, [pc, #360]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003fc4:	f023 0301 	bic.w	r3, r3, #1
 8003fc8:	6213      	str	r3, [r2, #32]
 8003fca:	4b58      	ldr	r3, [pc, #352]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	4a57      	ldr	r2, [pc, #348]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	f023 0304 	bic.w	r3, r3, #4
 8003fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d015      	beq.n	800400a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fde:	f7fe f94f 	bl	8002280 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe6:	f7fe f94b 	bl	8002280 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e0b1      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ee      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x37e>
 8004008:	e014      	b.n	8004034 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400a:	f7fe f939 	bl	8002280 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fe f935 	bl	8002280 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e09b      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004028:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ee      	bne.n	8004012 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4b3c      	ldr	r3, [pc, #240]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	4a3b      	ldr	r2, [pc, #236]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004044:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8087 	beq.w	800415e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004050:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b08      	cmp	r3, #8
 800405a:	d061      	beq.n	8004120 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	2b02      	cmp	r3, #2
 8004062:	d146      	bne.n	80040f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004064:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_RCC_OscConfig+0x4cc>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fe f909 	bl	8002280 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004072:	f7fe f905 	bl	8002280 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e06d      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004084:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d108      	bne.n	80040ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	4921      	ldr	r1, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ac:	4b1f      	ldr	r3, [pc, #124]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a19      	ldr	r1, [r3, #32]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	430b      	orrs	r3, r1
 80040be:	491b      	ldr	r1, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c4:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x4cc>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fe f8d9 	bl	8002280 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d2:	f7fe f8d5 	bl	8002280 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e03d      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x46a>
 80040f0:	e035      	b.n	800415e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f2:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_RCC_OscConfig+0x4cc>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fe f8c2 	bl	8002280 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7fe f8be 	bl	8002280 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e026      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_OscConfig+0x4c4>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x498>
 800411e:	e01e      	b.n	800415e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d107      	bne.n	8004138 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e019      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
 8004134:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <HAL_RCC_OscConfig+0x500>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	429a      	cmp	r2, r3
 800414a:	d106      	bne.n	800415a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d001      	beq.n	800415e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000

0800416c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0d0      	b.n	8004322 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b6a      	ldr	r3, [pc, #424]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d910      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b67      	ldr	r3, [pc, #412]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 0207 	bic.w	r2, r3, #7
 8004196:	4965      	ldr	r1, [pc, #404]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b63      	ldr	r3, [pc, #396]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0b8      	b.n	8004322 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c8:	4b59      	ldr	r3, [pc, #356]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a58      	ldr	r2, [pc, #352]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e0:	4b53      	ldr	r3, [pc, #332]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b50      	ldr	r3, [pc, #320]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	494d      	ldr	r1, [pc, #308]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d040      	beq.n	800428c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b47      	ldr	r3, [pc, #284]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d115      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e07f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422a:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e073      	b.n	8004322 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423a:	4b3d      	ldr	r3, [pc, #244]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e06b      	b.n	8004322 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4936      	ldr	r1, [pc, #216]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800425c:	f7fe f810 	bl	8002280 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fe f80c 	bl	8002280 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e053      	b.n	8004322 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 020c 	and.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	429a      	cmp	r2, r3
 800428a:	d1eb      	bne.n	8004264 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	4b27      	ldr	r3, [pc, #156]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d210      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b24      	ldr	r3, [pc, #144]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 0207 	bic.w	r2, r3, #7
 80042a2:	4922      	ldr	r1, [pc, #136]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b20      	ldr	r3, [pc, #128]	; (800432c <HAL_RCC_ClockConfig+0x1c0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e032      	b.n	8004322 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b19      	ldr	r3, [pc, #100]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4916      	ldr	r1, [pc, #88]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	490e      	ldr	r1, [pc, #56]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042fa:	f000 f821 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80042fe:	4602      	mov	r2, r0
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	490a      	ldr	r1, [pc, #40]	; (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	5ccb      	ldrb	r3, [r1, r3]
 800430e:	fa22 f303 	lsr.w	r3, r2, r3
 8004312:	4a09      	ldr	r2, [pc, #36]	; (8004338 <HAL_RCC_ClockConfig+0x1cc>)
 8004314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004316:	4b09      	ldr	r3, [pc, #36]	; (800433c <HAL_RCC_ClockConfig+0x1d0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd ff6e 	bl	80021fc <HAL_InitTick>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40022000 	.word	0x40022000
 8004330:	40021000 	.word	0x40021000
 8004334:	08008574 	.word	0x08008574
 8004338:	20000004 	.word	0x20000004
 800433c:	20000008 	.word	0x20000008

08004340 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004340:	b490      	push	{r4, r7}
 8004342:	b08a      	sub	sp, #40	; 0x28
 8004344:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004346:	4b29      	ldr	r3, [pc, #164]	; (80043ec <HAL_RCC_GetSysClockFreq+0xac>)
 8004348:	1d3c      	adds	r4, r7, #4
 800434a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800434c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004350:	f240 2301 	movw	r3, #513	; 0x201
 8004354:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	2300      	movs	r3, #0
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800436a:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b04      	cmp	r3, #4
 8004378:	d002      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x40>
 800437a:	2b08      	cmp	r3, #8
 800437c:	d003      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0x46>
 800437e:	e02b      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004380:	4b1c      	ldr	r3, [pc, #112]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004382:	623b      	str	r3, [r7, #32]
      break;
 8004384:	e02b      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	0c9b      	lsrs	r3, r3, #18
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	3328      	adds	r3, #40	; 0x28
 8004390:	443b      	add	r3, r7
 8004392:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004396:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d012      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043a2:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0c5b      	lsrs	r3, r3, #17
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	3328      	adds	r3, #40	; 0x28
 80043ae:	443b      	add	r3, r7
 80043b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4a0e      	ldr	r2, [pc, #56]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043ba:	fb03 f202 	mul.w	r2, r3, r2
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	e004      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4a0b      	ldr	r2, [pc, #44]	; (80043f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	623b      	str	r3, [r7, #32]
      break;
 80043d6:	e002      	b.n	80043de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043da:	623b      	str	r3, [r7, #32]
      break;
 80043dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043de:	6a3b      	ldr	r3, [r7, #32]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc90      	pop	{r4, r7}
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	08008564 	.word	0x08008564
 80043f0:	40021000 	.word	0x40021000
 80043f4:	007a1200 	.word	0x007a1200
 80043f8:	003d0900 	.word	0x003d0900

080043fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004400:	4b02      	ldr	r3, [pc, #8]	; (800440c <HAL_RCC_GetHCLKFreq+0x10>)
 8004402:	681b      	ldr	r3, [r3, #0]
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	20000004 	.word	0x20000004

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004414:	f7ff fff2 	bl	80043fc <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4903      	ldr	r1, [pc, #12]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800442c:	4618      	mov	r0, r3
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40021000 	.word	0x40021000
 8004434:	08008584 	.word	0x08008584

08004438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800443c:	f7ff ffde 	bl	80043fc <HAL_RCC_GetHCLKFreq>
 8004440:	4602      	mov	r2, r0
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	0adb      	lsrs	r3, r3, #11
 8004448:	f003 0307 	and.w	r3, r3, #7
 800444c:	4903      	ldr	r1, [pc, #12]	; (800445c <HAL_RCC_GetPCLK2Freq+0x24>)
 800444e:	5ccb      	ldrb	r3, [r1, r3]
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000
 800445c:	08008584 	.word	0x08008584

08004460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004468:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <RCC_Delay+0x34>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <RCC_Delay+0x38>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0a5b      	lsrs	r3, r3, #9
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	fb02 f303 	mul.w	r3, r2, r3
 800447a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800447c:	bf00      	nop
  }
  while (Delay --);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1e5a      	subs	r2, r3, #1
 8004482:	60fa      	str	r2, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f9      	bne.n	800447c <RCC_Delay+0x1c>
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr
 8004494:	20000004 	.word	0x20000004
 8004498:	10624dd3 	.word	0x10624dd3

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d07d      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044b8:	2300      	movs	r3, #0
 80044ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044bc:	4b4f      	ldr	r3, [pc, #316]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	4b4c      	ldr	r3, [pc, #304]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4a4b      	ldr	r2, [pc, #300]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d2:	61d3      	str	r3, [r2, #28]
 80044d4:	4b49      	ldr	r3, [pc, #292]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d118      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a42      	ldr	r2, [pc, #264]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fc:	f7fd fec0 	bl	8002280 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004502:	e008      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004504:	f7fd febc 	bl	8002280 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e06d      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004522:	4b36      	ldr	r3, [pc, #216]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d02e      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	429a      	cmp	r2, r3
 800453e:	d027      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004540:	4b2e      	ldr	r3, [pc, #184]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800454a:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004556:	4a29      	ldr	r2, [pc, #164]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d014      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004566:	f7fd fe8b 	bl	8002280 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	e00a      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fd fe87 	bl	8002280 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	f241 3288 	movw	r2, #5000	; 0x1388
 800457c:	4293      	cmp	r3, r2
 800457e:	d901      	bls.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e036      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0ee      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004590:	4b1a      	ldr	r3, [pc, #104]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	4917      	ldr	r1, [pc, #92]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045a2:	7dfb      	ldrb	r3, [r7, #23]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d105      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045c0:	4b0e      	ldr	r3, [pc, #56]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	490b      	ldr	r1, [pc, #44]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045de:	4b07      	ldr	r3, [pc, #28]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4904      	ldr	r1, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
 8004604:	42420440 	.word	0x42420440

08004608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e041      	b.n	800469e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fb9a 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 fc2a 	bl	8004ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d001      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e03a      	b.n	8004736 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_TIM_Base_Start_IT+0x98>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x58>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d009      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x58>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a14      	ldr	r2, [pc, #80]	; (8004744 <HAL_TIM_Base_Start_IT+0x9c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_TIM_Base_Start_IT+0x58>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a13      	ldr	r2, [pc, #76]	; (8004748 <HAL_TIM_Base_Start_IT+0xa0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d111      	bne.n	8004724 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b06      	cmp	r3, #6
 8004710:	d010      	beq.n	8004734 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004722:	e007      	b.n	8004734 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40012c00 	.word	0x40012c00
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800

0800474c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e041      	b.n	80047e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd fadc 	bl	8001d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f000 fb88 	bl	8004ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <HAL_TIM_PWM_Start+0x24>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e022      	b.n	8004856 <HAL_TIM_PWM_Start+0x6a>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d109      	bne.n	800482a <HAL_TIM_PWM_Start+0x3e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	bf14      	ite	ne
 8004822:	2301      	movne	r3, #1
 8004824:	2300      	moveq	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	e015      	b.n	8004856 <HAL_TIM_PWM_Start+0x6a>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d109      	bne.n	8004844 <HAL_TIM_PWM_Start+0x58>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e008      	b.n	8004856 <HAL_TIM_PWM_Start+0x6a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b01      	cmp	r3, #1
 800484e:	bf14      	ite	ne
 8004850:	2301      	movne	r3, #1
 8004852:	2300      	moveq	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e05e      	b.n	800491c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d104      	bne.n	800486e <HAL_TIM_PWM_Start+0x82>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800486c:	e013      	b.n	8004896 <HAL_TIM_PWM_Start+0xaa>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2b04      	cmp	r3, #4
 8004872:	d104      	bne.n	800487e <HAL_TIM_PWM_Start+0x92>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487c:	e00b      	b.n	8004896 <HAL_TIM_PWM_Start+0xaa>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d104      	bne.n	800488e <HAL_TIM_PWM_Start+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800488c:	e003      	b.n	8004896 <HAL_TIM_PWM_Start+0xaa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2202      	movs	r2, #2
 8004892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2201      	movs	r2, #1
 800489c:	6839      	ldr	r1, [r7, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f000 fd7e 	bl	80053a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <HAL_TIM_PWM_Start+0x138>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d107      	bne.n	80048be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <HAL_TIM_PWM_Start+0x138>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_TIM_PWM_Start+0xfa>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	d009      	beq.n	80048e6 <HAL_TIM_PWM_Start+0xfa>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a14      	ldr	r2, [pc, #80]	; (8004928 <HAL_TIM_PWM_Start+0x13c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_TIM_PWM_Start+0xfa>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a12      	ldr	r2, [pc, #72]	; (800492c <HAL_TIM_PWM_Start+0x140>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d111      	bne.n	800490a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b06      	cmp	r3, #6
 80048f6:	d010      	beq.n	800491a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004908:	e007      	b.n	800491a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f042 0201 	orr.w	r2, r2, #1
 8004918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40012c00 	.word	0x40012c00
 8004928:	40000400 	.word	0x40000400
 800492c:	40000800 	.word	0x40000800

08004930 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b02      	cmp	r3, #2
 8004944:	d122      	bne.n	800498c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b02      	cmp	r3, #2
 8004952:	d11b      	bne.n	800498c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0202 	mvn.w	r2, #2
 800495c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa78 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa6b 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fa7a 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b04      	cmp	r3, #4
 8004998:	d122      	bne.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d11b      	bne.n	80049e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0204 	mvn.w	r2, #4
 80049b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa4e 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 80049cc:	e005      	b.n	80049da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa41 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fa50 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d122      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d11b      	bne.n	8004a34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0208 	mvn.w	r2, #8
 8004a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa24 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004a20:	e005      	b.n	8004a2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fa17 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fa26 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b10      	cmp	r3, #16
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0210 	mvn.w	r2, #16
 8004a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2208      	movs	r2, #8
 8004a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9fa 	bl	8004e68 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f9ed 	bl	8004e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f9fc 	bl	8004e7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d10e      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d107      	bne.n	8004ab4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0201 	mvn.w	r2, #1
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9c8 	bl	8004e44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abe:	2b80      	cmp	r3, #128	; 0x80
 8004ac0:	d10e      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d107      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fceb 	bl	80054b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aea:	2b40      	cmp	r3, #64	; 0x40
 8004aec:	d10e      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d107      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f9c0 	bl	8004e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0220 	mvn.w	r2, #32
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fcb6 	bl	80054a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b38:	bf00      	nop
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e0ac      	b.n	8004cb4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b0c      	cmp	r3, #12
 8004b66:	f200 809f 	bhi.w	8004ca8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004ba5 	.word	0x08004ba5
 8004b74:	08004ca9 	.word	0x08004ca9
 8004b78:	08004ca9 	.word	0x08004ca9
 8004b7c:	08004ca9 	.word	0x08004ca9
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004ca9 	.word	0x08004ca9
 8004b88:	08004ca9 	.word	0x08004ca9
 8004b8c:	08004ca9 	.word	0x08004ca9
 8004b90:	08004c27 	.word	0x08004c27
 8004b94:	08004ca9 	.word	0x08004ca9
 8004b98:	08004ca9 	.word	0x08004ca9
 8004b9c:	08004ca9 	.word	0x08004ca9
 8004ba0:	08004c67 	.word	0x08004c67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68b9      	ldr	r1, [r7, #8]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f9da 	bl	8004f64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0208 	orr.w	r2, r2, #8
 8004bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699a      	ldr	r2, [r3, #24]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0204 	bic.w	r2, r2, #4
 8004bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6999      	ldr	r1, [r3, #24]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	691a      	ldr	r2, [r3, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	619a      	str	r2, [r3, #24]
      break;
 8004be2:	e062      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fa20 	bl	8005030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6999      	ldr	r1, [r3, #24]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	619a      	str	r2, [r3, #24]
      break;
 8004c24:	e041      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fa69 	bl	8005104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0208 	orr.w	r2, r2, #8
 8004c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69da      	ldr	r2, [r3, #28]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0204 	bic.w	r2, r2, #4
 8004c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69d9      	ldr	r1, [r3, #28]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	61da      	str	r2, [r3, #28]
      break;
 8004c64:	e021      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68b9      	ldr	r1, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fab3 	bl	80051d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	021a      	lsls	r2, r3, #8
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	61da      	str	r2, [r3, #28]
      break;
 8004ca6:	e000      	b.n	8004caa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ca8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIM_ConfigClockSource+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e0b3      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x180>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0c:	d03e      	beq.n	8004d8c <HAL_TIM_ConfigClockSource+0xd0>
 8004d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d12:	f200 8087 	bhi.w	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1a:	f000 8085 	beq.w	8004e28 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d22:	d87f      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d24:	2b70      	cmp	r3, #112	; 0x70
 8004d26:	d01a      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0xa2>
 8004d28:	2b70      	cmp	r3, #112	; 0x70
 8004d2a:	d87b      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d2c:	2b60      	cmp	r3, #96	; 0x60
 8004d2e:	d050      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0x116>
 8004d30:	2b60      	cmp	r3, #96	; 0x60
 8004d32:	d877      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d34:	2b50      	cmp	r3, #80	; 0x50
 8004d36:	d03c      	beq.n	8004db2 <HAL_TIM_ConfigClockSource+0xf6>
 8004d38:	2b50      	cmp	r3, #80	; 0x50
 8004d3a:	d873      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d058      	beq.n	8004df2 <HAL_TIM_ConfigClockSource+0x136>
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d86f      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d44:	2b30      	cmp	r3, #48	; 0x30
 8004d46:	d064      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
 8004d48:	2b30      	cmp	r3, #48	; 0x30
 8004d4a:	d86b      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d4c:	2b20      	cmp	r3, #32
 8004d4e:	d060      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d867      	bhi.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d05c      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
 8004d58:	2b10      	cmp	r3, #16
 8004d5a:	d05a      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d5c:	e062      	b.n	8004e24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6899      	ldr	r1, [r3, #8]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f000 faf8 	bl	8005362 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	609a      	str	r2, [r3, #8]
      break;
 8004d8a:	e04e      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6899      	ldr	r1, [r3, #8]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f000 fae1 	bl	8005362 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dae:	609a      	str	r2, [r3, #8]
      break;
 8004db0:	e03b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	6859      	ldr	r1, [r3, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f000 fa58 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2150      	movs	r1, #80	; 0x50
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 faaf 	bl	800532e <TIM_ITRx_SetConfig>
      break;
 8004dd0:	e02b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6859      	ldr	r1, [r3, #4]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 fa76 	bl	80052d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2160      	movs	r1, #96	; 0x60
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa9f 	bl	800532e <TIM_ITRx_SetConfig>
      break;
 8004df0:	e01b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	6859      	ldr	r1, [r3, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f000 fa38 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2140      	movs	r1, #64	; 0x40
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fa8f 	bl	800532e <TIM_ITRx_SetConfig>
      break;
 8004e10:	e00b      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f000 fa86 	bl	800532e <TIM_ITRx_SetConfig>
        break;
 8004e22:	e002      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr

08004e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
	...

08004ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a29      	ldr	r2, [pc, #164]	; (8004f58 <TIM_Base_SetConfig+0xb8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00b      	beq.n	8004ed0 <TIM_Base_SetConfig+0x30>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d007      	beq.n	8004ed0 <TIM_Base_SetConfig+0x30>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <TIM_Base_SetConfig+0xbc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d003      	beq.n	8004ed0 <TIM_Base_SetConfig+0x30>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a25      	ldr	r2, [pc, #148]	; (8004f60 <TIM_Base_SetConfig+0xc0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d108      	bne.n	8004ee2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <TIM_Base_SetConfig+0xb8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0x62>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0x62>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a19      	ldr	r2, [pc, #100]	; (8004f5c <TIM_Base_SetConfig+0xbc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0x62>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <TIM_Base_SetConfig+0xc0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a07      	ldr	r2, [pc, #28]	; (8004f58 <TIM_Base_SetConfig+0xb8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d103      	bne.n	8004f48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	615a      	str	r2, [r3, #20]
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800

08004f64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b087      	sub	sp, #28
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 0302 	bic.w	r3, r3, #2
 8004fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	; (800502c <TIM_OC1_SetConfig+0xc8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10c      	bne.n	8004fda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0308 	bic.w	r3, r3, #8
 8004fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 0304 	bic.w	r3, r3, #4
 8004fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a13      	ldr	r2, [pc, #76]	; (800502c <TIM_OC1_SetConfig+0xc8>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d111      	bne.n	8005006 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	621a      	str	r2, [r3, #32]
}
 8005020:	bf00      	nop
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40012c00 	.word	0x40012c00

08005030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0210 	bic.w	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	021b      	lsls	r3, r3, #8
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4313      	orrs	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0320 	bic.w	r3, r3, #32
 800507a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <TIM_OC2_SetConfig+0xd0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a14      	ldr	r2, [pc, #80]	; (8005100 <TIM_OC2_SetConfig+0xd0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d113      	bne.n	80050dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr
 8005100:	40012c00 	.word	0x40012c00

08005104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005104:	b480      	push	{r7}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800514c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	021b      	lsls	r3, r3, #8
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <TIM_OC3_SetConfig+0xd0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10d      	bne.n	800517e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800517c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <TIM_OC3_SetConfig+0xd0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d113      	bne.n	80051ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800518c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00

080051d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800520e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	031b      	lsls	r3, r3, #12
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <TIM_OC4_SetConfig+0x98>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d109      	bne.n	800524c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800523e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	019b      	lsls	r3, r3, #6
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	40012c00 	.word	0x40012c00

08005274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0201 	bic.w	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800529e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 030a 	bic.w	r3, r3, #10
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	f023 0210 	bic.w	r2, r3, #16
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	031b      	lsls	r3, r3, #12
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800530c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	f043 0307 	orr.w	r3, r3, #7
 8005350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800537c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	021a      	lsls	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	431a      	orrs	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4313      	orrs	r3, r2
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	609a      	str	r2, [r3, #8]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 031f 	and.w	r3, r3, #31
 80053b2:	2201      	movs	r2, #1
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	401a      	ands	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e046      	b.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a16      	ldr	r2, [pc, #88]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544c:	d009      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a12      	ldr	r2, [pc, #72]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a10      	ldr	r2, [pc, #64]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10c      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	4313      	orrs	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800

080054a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bc80      	pop	{r7}
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e03f      	b.n	800555a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fc fca6 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2224      	movs	r2, #36	; 0x24
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800550a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f829 	bl	8005564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800559e:	f023 030c 	bic.w	r3, r3, #12
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2c      	ldr	r2, [pc, #176]	; (8005678 <UART_SetConfig+0x114>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d103      	bne.n	80055d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055cc:	f7fe ff34 	bl	8004438 <HAL_RCC_GetPCLK2Freq>
 80055d0:	60f8      	str	r0, [r7, #12]
 80055d2:	e002      	b.n	80055da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fe ff1c 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 80055d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	009a      	lsls	r2, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80055f0:	4a22      	ldr	r2, [pc, #136]	; (800567c <UART_SetConfig+0x118>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	095b      	lsrs	r3, r3, #5
 80055f8:	0119      	lsls	r1, r3, #4
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009a      	lsls	r2, r3, #2
 8005604:	441a      	add	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005610:	4b1a      	ldr	r3, [pc, #104]	; (800567c <UART_SetConfig+0x118>)
 8005612:	fba3 0302 	umull	r0, r3, r3, r2
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	2064      	movs	r0, #100	; 0x64
 800561a:	fb00 f303 	mul.w	r3, r0, r3
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	3332      	adds	r3, #50	; 0x32
 8005624:	4a15      	ldr	r2, [pc, #84]	; (800567c <UART_SetConfig+0x118>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005630:	4419      	add	r1, r3
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	009a      	lsls	r2, r3, #2
 800563c:	441a      	add	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	fbb2 f2f3 	udiv	r2, r2, r3
 8005648:	4b0c      	ldr	r3, [pc, #48]	; (800567c <UART_SetConfig+0x118>)
 800564a:	fba3 0302 	umull	r0, r3, r3, r2
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	2064      	movs	r0, #100	; 0x64
 8005652:	fb00 f303 	mul.w	r3, r0, r3
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	3332      	adds	r3, #50	; 0x32
 800565c:	4a07      	ldr	r2, [pc, #28]	; (800567c <UART_SetConfig+0x118>)
 800565e:	fba2 2303 	umull	r2, r3, r2, r3
 8005662:	095b      	lsrs	r3, r3, #5
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	440a      	add	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40013800 	.word	0x40013800
 800567c:	51eb851f 	.word	0x51eb851f

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000010 	.word	0x20000010

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	2600      	movs	r6, #0
 8005690:	4d0c      	ldr	r5, [pc, #48]	; (80056c4 <__libc_init_array+0x38>)
 8005692:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005694:	1b64      	subs	r4, r4, r5
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	f002 fefc 	bl	8008498 <_init>
 80056a0:	2600      	movs	r6, #0
 80056a2:	4d0a      	ldr	r5, [pc, #40]	; (80056cc <__libc_init_array+0x40>)
 80056a4:	4c0a      	ldr	r4, [pc, #40]	; (80056d0 <__libc_init_array+0x44>)
 80056a6:	1b64      	subs	r4, r4, r5
 80056a8:	10a4      	asrs	r4, r4, #2
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	08008964 	.word	0x08008964
 80056c8:	08008964 	.word	0x08008964
 80056cc:	08008964 	.word	0x08008964
 80056d0:	08008968 	.word	0x08008968

080056d4 <memset>:
 80056d4:	4603      	mov	r3, r0
 80056d6:	4402      	add	r2, r0
 80056d8:	4293      	cmp	r3, r2
 80056da:	d100      	bne.n	80056de <memset+0xa>
 80056dc:	4770      	bx	lr
 80056de:	f803 1b01 	strb.w	r1, [r3], #1
 80056e2:	e7f9      	b.n	80056d8 <memset+0x4>

080056e4 <__cvt>:
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ea:	461f      	mov	r7, r3
 80056ec:	bfbb      	ittet	lt
 80056ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056f2:	461f      	movlt	r7, r3
 80056f4:	2300      	movge	r3, #0
 80056f6:	232d      	movlt	r3, #45	; 0x2d
 80056f8:	b088      	sub	sp, #32
 80056fa:	4614      	mov	r4, r2
 80056fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005700:	7013      	strb	r3, [r2, #0]
 8005702:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005704:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005708:	f023 0820 	bic.w	r8, r3, #32
 800570c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005710:	d005      	beq.n	800571e <__cvt+0x3a>
 8005712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005716:	d100      	bne.n	800571a <__cvt+0x36>
 8005718:	3501      	adds	r5, #1
 800571a:	2302      	movs	r3, #2
 800571c:	e000      	b.n	8005720 <__cvt+0x3c>
 800571e:	2303      	movs	r3, #3
 8005720:	aa07      	add	r2, sp, #28
 8005722:	9204      	str	r2, [sp, #16]
 8005724:	aa06      	add	r2, sp, #24
 8005726:	e9cd a202 	strd	sl, r2, [sp, #8]
 800572a:	e9cd 3500 	strd	r3, r5, [sp]
 800572e:	4622      	mov	r2, r4
 8005730:	463b      	mov	r3, r7
 8005732:	f000 fce5 	bl	8006100 <_dtoa_r>
 8005736:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800573a:	4606      	mov	r6, r0
 800573c:	d102      	bne.n	8005744 <__cvt+0x60>
 800573e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005740:	07db      	lsls	r3, r3, #31
 8005742:	d522      	bpl.n	800578a <__cvt+0xa6>
 8005744:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005748:	eb06 0905 	add.w	r9, r6, r5
 800574c:	d110      	bne.n	8005770 <__cvt+0x8c>
 800574e:	7833      	ldrb	r3, [r6, #0]
 8005750:	2b30      	cmp	r3, #48	; 0x30
 8005752:	d10a      	bne.n	800576a <__cvt+0x86>
 8005754:	2200      	movs	r2, #0
 8005756:	2300      	movs	r3, #0
 8005758:	4620      	mov	r0, r4
 800575a:	4639      	mov	r1, r7
 800575c:	f7fb f924 	bl	80009a8 <__aeabi_dcmpeq>
 8005760:	b918      	cbnz	r0, 800576a <__cvt+0x86>
 8005762:	f1c5 0501 	rsb	r5, r5, #1
 8005766:	f8ca 5000 	str.w	r5, [sl]
 800576a:	f8da 3000 	ldr.w	r3, [sl]
 800576e:	4499      	add	r9, r3
 8005770:	2200      	movs	r2, #0
 8005772:	2300      	movs	r3, #0
 8005774:	4620      	mov	r0, r4
 8005776:	4639      	mov	r1, r7
 8005778:	f7fb f916 	bl	80009a8 <__aeabi_dcmpeq>
 800577c:	b108      	cbz	r0, 8005782 <__cvt+0x9e>
 800577e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005782:	2230      	movs	r2, #48	; 0x30
 8005784:	9b07      	ldr	r3, [sp, #28]
 8005786:	454b      	cmp	r3, r9
 8005788:	d307      	bcc.n	800579a <__cvt+0xb6>
 800578a:	4630      	mov	r0, r6
 800578c:	9b07      	ldr	r3, [sp, #28]
 800578e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005790:	1b9b      	subs	r3, r3, r6
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	b008      	add	sp, #32
 8005796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800579a:	1c59      	adds	r1, r3, #1
 800579c:	9107      	str	r1, [sp, #28]
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e7f0      	b.n	8005784 <__cvt+0xa0>

080057a2 <__exponent>:
 80057a2:	4603      	mov	r3, r0
 80057a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057a6:	2900      	cmp	r1, #0
 80057a8:	f803 2b02 	strb.w	r2, [r3], #2
 80057ac:	bfb6      	itet	lt
 80057ae:	222d      	movlt	r2, #45	; 0x2d
 80057b0:	222b      	movge	r2, #43	; 0x2b
 80057b2:	4249      	neglt	r1, r1
 80057b4:	2909      	cmp	r1, #9
 80057b6:	7042      	strb	r2, [r0, #1]
 80057b8:	dd2b      	ble.n	8005812 <__exponent+0x70>
 80057ba:	f10d 0407 	add.w	r4, sp, #7
 80057be:	46a4      	mov	ip, r4
 80057c0:	270a      	movs	r7, #10
 80057c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80057c6:	460a      	mov	r2, r1
 80057c8:	46a6      	mov	lr, r4
 80057ca:	fb07 1516 	mls	r5, r7, r6, r1
 80057ce:	2a63      	cmp	r2, #99	; 0x63
 80057d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80057d4:	4631      	mov	r1, r6
 80057d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80057da:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80057de:	dcf0      	bgt.n	80057c2 <__exponent+0x20>
 80057e0:	3130      	adds	r1, #48	; 0x30
 80057e2:	f1ae 0502 	sub.w	r5, lr, #2
 80057e6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80057ea:	4629      	mov	r1, r5
 80057ec:	1c44      	adds	r4, r0, #1
 80057ee:	4561      	cmp	r1, ip
 80057f0:	d30a      	bcc.n	8005808 <__exponent+0x66>
 80057f2:	f10d 0209 	add.w	r2, sp, #9
 80057f6:	eba2 020e 	sub.w	r2, r2, lr
 80057fa:	4565      	cmp	r5, ip
 80057fc:	bf88      	it	hi
 80057fe:	2200      	movhi	r2, #0
 8005800:	4413      	add	r3, r2
 8005802:	1a18      	subs	r0, r3, r0
 8005804:	b003      	add	sp, #12
 8005806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005808:	f811 2b01 	ldrb.w	r2, [r1], #1
 800580c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005810:	e7ed      	b.n	80057ee <__exponent+0x4c>
 8005812:	2330      	movs	r3, #48	; 0x30
 8005814:	3130      	adds	r1, #48	; 0x30
 8005816:	7083      	strb	r3, [r0, #2]
 8005818:	70c1      	strb	r1, [r0, #3]
 800581a:	1d03      	adds	r3, r0, #4
 800581c:	e7f1      	b.n	8005802 <__exponent+0x60>
	...

08005820 <_printf_float>:
 8005820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	b091      	sub	sp, #68	; 0x44
 8005826:	460c      	mov	r4, r1
 8005828:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800582c:	4616      	mov	r6, r2
 800582e:	461f      	mov	r7, r3
 8005830:	4605      	mov	r5, r0
 8005832:	f001 fa53 	bl	8006cdc <_localeconv_r>
 8005836:	6803      	ldr	r3, [r0, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	9309      	str	r3, [sp, #36]	; 0x24
 800583c:	f7fa fc88 	bl	8000150 <strlen>
 8005840:	2300      	movs	r3, #0
 8005842:	930e      	str	r3, [sp, #56]	; 0x38
 8005844:	f8d8 3000 	ldr.w	r3, [r8]
 8005848:	900a      	str	r0, [sp, #40]	; 0x28
 800584a:	3307      	adds	r3, #7
 800584c:	f023 0307 	bic.w	r3, r3, #7
 8005850:	f103 0208 	add.w	r2, r3, #8
 8005854:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005858:	f8d4 b000 	ldr.w	fp, [r4]
 800585c:	f8c8 2000 	str.w	r2, [r8]
 8005860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005864:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005868:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800586c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005870:	930b      	str	r3, [sp, #44]	; 0x2c
 8005872:	f04f 32ff 	mov.w	r2, #4294967295
 8005876:	4640      	mov	r0, r8
 8005878:	4b9c      	ldr	r3, [pc, #624]	; (8005aec <_printf_float+0x2cc>)
 800587a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800587c:	f7fb f8c6 	bl	8000a0c <__aeabi_dcmpun>
 8005880:	bb70      	cbnz	r0, 80058e0 <_printf_float+0xc0>
 8005882:	f04f 32ff 	mov.w	r2, #4294967295
 8005886:	4640      	mov	r0, r8
 8005888:	4b98      	ldr	r3, [pc, #608]	; (8005aec <_printf_float+0x2cc>)
 800588a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800588c:	f7fb f8a0 	bl	80009d0 <__aeabi_dcmple>
 8005890:	bb30      	cbnz	r0, 80058e0 <_printf_float+0xc0>
 8005892:	2200      	movs	r2, #0
 8005894:	2300      	movs	r3, #0
 8005896:	4640      	mov	r0, r8
 8005898:	4651      	mov	r1, sl
 800589a:	f7fb f88f 	bl	80009bc <__aeabi_dcmplt>
 800589e:	b110      	cbz	r0, 80058a6 <_printf_float+0x86>
 80058a0:	232d      	movs	r3, #45	; 0x2d
 80058a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a6:	4b92      	ldr	r3, [pc, #584]	; (8005af0 <_printf_float+0x2d0>)
 80058a8:	4892      	ldr	r0, [pc, #584]	; (8005af4 <_printf_float+0x2d4>)
 80058aa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80058ae:	bf94      	ite	ls
 80058b0:	4698      	movls	r8, r3
 80058b2:	4680      	movhi	r8, r0
 80058b4:	2303      	movs	r3, #3
 80058b6:	f04f 0a00 	mov.w	sl, #0
 80058ba:	6123      	str	r3, [r4, #16]
 80058bc:	f02b 0304 	bic.w	r3, fp, #4
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	4633      	mov	r3, r6
 80058c4:	4621      	mov	r1, r4
 80058c6:	4628      	mov	r0, r5
 80058c8:	9700      	str	r7, [sp, #0]
 80058ca:	aa0f      	add	r2, sp, #60	; 0x3c
 80058cc:	f000 f9d4 	bl	8005c78 <_printf_common>
 80058d0:	3001      	adds	r0, #1
 80058d2:	f040 8090 	bne.w	80059f6 <_printf_float+0x1d6>
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	b011      	add	sp, #68	; 0x44
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	4642      	mov	r2, r8
 80058e2:	4653      	mov	r3, sl
 80058e4:	4640      	mov	r0, r8
 80058e6:	4651      	mov	r1, sl
 80058e8:	f7fb f890 	bl	8000a0c <__aeabi_dcmpun>
 80058ec:	b148      	cbz	r0, 8005902 <_printf_float+0xe2>
 80058ee:	f1ba 0f00 	cmp.w	sl, #0
 80058f2:	bfb8      	it	lt
 80058f4:	232d      	movlt	r3, #45	; 0x2d
 80058f6:	4880      	ldr	r0, [pc, #512]	; (8005af8 <_printf_float+0x2d8>)
 80058f8:	bfb8      	it	lt
 80058fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80058fe:	4b7f      	ldr	r3, [pc, #508]	; (8005afc <_printf_float+0x2dc>)
 8005900:	e7d3      	b.n	80058aa <_printf_float+0x8a>
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	d142      	bne.n	8005992 <_printf_float+0x172>
 800590c:	2306      	movs	r3, #6
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	9206      	str	r2, [sp, #24]
 8005914:	aa0e      	add	r2, sp, #56	; 0x38
 8005916:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800591a:	aa0d      	add	r2, sp, #52	; 0x34
 800591c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005920:	9203      	str	r2, [sp, #12]
 8005922:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005926:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800592a:	6023      	str	r3, [r4, #0]
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	4642      	mov	r2, r8
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4628      	mov	r0, r5
 8005934:	4653      	mov	r3, sl
 8005936:	910b      	str	r1, [sp, #44]	; 0x2c
 8005938:	f7ff fed4 	bl	80056e4 <__cvt>
 800593c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800593e:	4680      	mov	r8, r0
 8005940:	2947      	cmp	r1, #71	; 0x47
 8005942:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005944:	d108      	bne.n	8005958 <_printf_float+0x138>
 8005946:	1cc8      	adds	r0, r1, #3
 8005948:	db02      	blt.n	8005950 <_printf_float+0x130>
 800594a:	6863      	ldr	r3, [r4, #4]
 800594c:	4299      	cmp	r1, r3
 800594e:	dd40      	ble.n	80059d2 <_printf_float+0x1b2>
 8005950:	f1a9 0902 	sub.w	r9, r9, #2
 8005954:	fa5f f989 	uxtb.w	r9, r9
 8005958:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800595c:	d81f      	bhi.n	800599e <_printf_float+0x17e>
 800595e:	464a      	mov	r2, r9
 8005960:	3901      	subs	r1, #1
 8005962:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005966:	910d      	str	r1, [sp, #52]	; 0x34
 8005968:	f7ff ff1b 	bl	80057a2 <__exponent>
 800596c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800596e:	4682      	mov	sl, r0
 8005970:	1813      	adds	r3, r2, r0
 8005972:	2a01      	cmp	r2, #1
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	dc02      	bgt.n	800597e <_printf_float+0x15e>
 8005978:	6822      	ldr	r2, [r4, #0]
 800597a:	07d2      	lsls	r2, r2, #31
 800597c:	d501      	bpl.n	8005982 <_printf_float+0x162>
 800597e:	3301      	adds	r3, #1
 8005980:	6123      	str	r3, [r4, #16]
 8005982:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005986:	2b00      	cmp	r3, #0
 8005988:	d09b      	beq.n	80058c2 <_printf_float+0xa2>
 800598a:	232d      	movs	r3, #45	; 0x2d
 800598c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005990:	e797      	b.n	80058c2 <_printf_float+0xa2>
 8005992:	2947      	cmp	r1, #71	; 0x47
 8005994:	d1bc      	bne.n	8005910 <_printf_float+0xf0>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1ba      	bne.n	8005910 <_printf_float+0xf0>
 800599a:	2301      	movs	r3, #1
 800599c:	e7b7      	b.n	800590e <_printf_float+0xee>
 800599e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80059a2:	d118      	bne.n	80059d6 <_printf_float+0x1b6>
 80059a4:	2900      	cmp	r1, #0
 80059a6:	6863      	ldr	r3, [r4, #4]
 80059a8:	dd0b      	ble.n	80059c2 <_printf_float+0x1a2>
 80059aa:	6121      	str	r1, [r4, #16]
 80059ac:	b913      	cbnz	r3, 80059b4 <_printf_float+0x194>
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	07d0      	lsls	r0, r2, #31
 80059b2:	d502      	bpl.n	80059ba <_printf_float+0x19a>
 80059b4:	3301      	adds	r3, #1
 80059b6:	440b      	add	r3, r1
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	f04f 0a00 	mov.w	sl, #0
 80059be:	65a1      	str	r1, [r4, #88]	; 0x58
 80059c0:	e7df      	b.n	8005982 <_printf_float+0x162>
 80059c2:	b913      	cbnz	r3, 80059ca <_printf_float+0x1aa>
 80059c4:	6822      	ldr	r2, [r4, #0]
 80059c6:	07d2      	lsls	r2, r2, #31
 80059c8:	d501      	bpl.n	80059ce <_printf_float+0x1ae>
 80059ca:	3302      	adds	r3, #2
 80059cc:	e7f4      	b.n	80059b8 <_printf_float+0x198>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e7f2      	b.n	80059b8 <_printf_float+0x198>
 80059d2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80059d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059d8:	4299      	cmp	r1, r3
 80059da:	db05      	blt.n	80059e8 <_printf_float+0x1c8>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	6121      	str	r1, [r4, #16]
 80059e0:	07d8      	lsls	r0, r3, #31
 80059e2:	d5ea      	bpl.n	80059ba <_printf_float+0x19a>
 80059e4:	1c4b      	adds	r3, r1, #1
 80059e6:	e7e7      	b.n	80059b8 <_printf_float+0x198>
 80059e8:	2900      	cmp	r1, #0
 80059ea:	bfcc      	ite	gt
 80059ec:	2201      	movgt	r2, #1
 80059ee:	f1c1 0202 	rsble	r2, r1, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	e7e0      	b.n	80059b8 <_printf_float+0x198>
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	055a      	lsls	r2, r3, #21
 80059fa:	d407      	bmi.n	8005a0c <_printf_float+0x1ec>
 80059fc:	6923      	ldr	r3, [r4, #16]
 80059fe:	4642      	mov	r2, r8
 8005a00:	4631      	mov	r1, r6
 8005a02:	4628      	mov	r0, r5
 8005a04:	47b8      	blx	r7
 8005a06:	3001      	adds	r0, #1
 8005a08:	d12b      	bne.n	8005a62 <_printf_float+0x242>
 8005a0a:	e764      	b.n	80058d6 <_printf_float+0xb6>
 8005a0c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a10:	f240 80dd 	bls.w	8005bce <_printf_float+0x3ae>
 8005a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f7fa ffc4 	bl	80009a8 <__aeabi_dcmpeq>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d033      	beq.n	8005a8c <_printf_float+0x26c>
 8005a24:	2301      	movs	r3, #1
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <_printf_float+0x2e0>)
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f af51 	beq.w	80058d6 <_printf_float+0xb6>
 8005a34:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	db02      	blt.n	8005a42 <_printf_float+0x222>
 8005a3c:	6823      	ldr	r3, [r4, #0]
 8005a3e:	07d8      	lsls	r0, r3, #31
 8005a40:	d50f      	bpl.n	8005a62 <_printf_float+0x242>
 8005a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a46:	4631      	mov	r1, r6
 8005a48:	4628      	mov	r0, r5
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	f43f af42 	beq.w	80058d6 <_printf_float+0xb6>
 8005a52:	f04f 0800 	mov.w	r8, #0
 8005a56:	f104 091a 	add.w	r9, r4, #26
 8005a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4543      	cmp	r3, r8
 8005a60:	dc09      	bgt.n	8005a76 <_printf_float+0x256>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	079b      	lsls	r3, r3, #30
 8005a66:	f100 8102 	bmi.w	8005c6e <_printf_float+0x44e>
 8005a6a:	68e0      	ldr	r0, [r4, #12]
 8005a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a6e:	4298      	cmp	r0, r3
 8005a70:	bfb8      	it	lt
 8005a72:	4618      	movlt	r0, r3
 8005a74:	e731      	b.n	80058da <_printf_float+0xba>
 8005a76:	2301      	movs	r3, #1
 8005a78:	464a      	mov	r2, r9
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	47b8      	blx	r7
 8005a80:	3001      	adds	r0, #1
 8005a82:	f43f af28 	beq.w	80058d6 <_printf_float+0xb6>
 8005a86:	f108 0801 	add.w	r8, r8, #1
 8005a8a:	e7e6      	b.n	8005a5a <_printf_float+0x23a>
 8005a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dc38      	bgt.n	8005b04 <_printf_float+0x2e4>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4631      	mov	r1, r6
 8005a96:	4628      	mov	r0, r5
 8005a98:	4a19      	ldr	r2, [pc, #100]	; (8005b00 <_printf_float+0x2e0>)
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f af1a 	beq.w	80058d6 <_printf_float+0xb6>
 8005aa2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	d102      	bne.n	8005ab0 <_printf_float+0x290>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	07d9      	lsls	r1, r3, #31
 8005aae:	d5d8      	bpl.n	8005a62 <_printf_float+0x242>
 8005ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	47b8      	blx	r7
 8005aba:	3001      	adds	r0, #1
 8005abc:	f43f af0b 	beq.w	80058d6 <_printf_float+0xb6>
 8005ac0:	f04f 0900 	mov.w	r9, #0
 8005ac4:	f104 0a1a 	add.w	sl, r4, #26
 8005ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aca:	425b      	negs	r3, r3
 8005acc:	454b      	cmp	r3, r9
 8005ace:	dc01      	bgt.n	8005ad4 <_printf_float+0x2b4>
 8005ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad2:	e794      	b.n	80059fe <_printf_float+0x1de>
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	4652      	mov	r2, sl
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	f43f aef9 	beq.w	80058d6 <_printf_float+0xb6>
 8005ae4:	f109 0901 	add.w	r9, r9, #1
 8005ae8:	e7ee      	b.n	8005ac8 <_printf_float+0x2a8>
 8005aea:	bf00      	nop
 8005aec:	7fefffff 	.word	0x7fefffff
 8005af0:	08008590 	.word	0x08008590
 8005af4:	08008594 	.word	0x08008594
 8005af8:	0800859c 	.word	0x0800859c
 8005afc:	08008598 	.word	0x08008598
 8005b00:	080085a0 	.word	0x080085a0
 8005b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	bfa8      	it	ge
 8005b0c:	461a      	movge	r2, r3
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	4691      	mov	r9, r2
 8005b12:	dc37      	bgt.n	8005b84 <_printf_float+0x364>
 8005b14:	f04f 0b00 	mov.w	fp, #0
 8005b18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b1c:	f104 021a 	add.w	r2, r4, #26
 8005b20:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b24:	ebaa 0309 	sub.w	r3, sl, r9
 8005b28:	455b      	cmp	r3, fp
 8005b2a:	dc33      	bgt.n	8005b94 <_printf_float+0x374>
 8005b2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b30:	429a      	cmp	r2, r3
 8005b32:	db3b      	blt.n	8005bac <_printf_float+0x38c>
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	07da      	lsls	r2, r3, #31
 8005b38:	d438      	bmi.n	8005bac <_printf_float+0x38c>
 8005b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b3c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b3e:	eba3 020a 	sub.w	r2, r3, sl
 8005b42:	eba3 0901 	sub.w	r9, r3, r1
 8005b46:	4591      	cmp	r9, r2
 8005b48:	bfa8      	it	ge
 8005b4a:	4691      	movge	r9, r2
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	dc34      	bgt.n	8005bbc <_printf_float+0x39c>
 8005b52:	f04f 0800 	mov.w	r8, #0
 8005b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b5a:	f104 0a1a 	add.w	sl, r4, #26
 8005b5e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	eba3 0309 	sub.w	r3, r3, r9
 8005b68:	4543      	cmp	r3, r8
 8005b6a:	f77f af7a 	ble.w	8005a62 <_printf_float+0x242>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4652      	mov	r2, sl
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f43f aeac 	beq.w	80058d6 <_printf_float+0xb6>
 8005b7e:	f108 0801 	add.w	r8, r8, #1
 8005b82:	e7ec      	b.n	8005b5e <_printf_float+0x33e>
 8005b84:	4613      	mov	r3, r2
 8005b86:	4631      	mov	r1, r6
 8005b88:	4642      	mov	r2, r8
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1c0      	bne.n	8005b14 <_printf_float+0x2f4>
 8005b92:	e6a0      	b.n	80058d6 <_printf_float+0xb6>
 8005b94:	2301      	movs	r3, #1
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b9c:	47b8      	blx	r7
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	f43f ae99 	beq.w	80058d6 <_printf_float+0xb6>
 8005ba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ba6:	f10b 0b01 	add.w	fp, fp, #1
 8005baa:	e7b9      	b.n	8005b20 <_printf_float+0x300>
 8005bac:	4631      	mov	r1, r6
 8005bae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d1bf      	bne.n	8005b3a <_printf_float+0x31a>
 8005bba:	e68c      	b.n	80058d6 <_printf_float+0xb6>
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	eb08 020a 	add.w	r2, r8, sl
 8005bc6:	47b8      	blx	r7
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d1c2      	bne.n	8005b52 <_printf_float+0x332>
 8005bcc:	e683      	b.n	80058d6 <_printf_float+0xb6>
 8005bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bd0:	2a01      	cmp	r2, #1
 8005bd2:	dc01      	bgt.n	8005bd8 <_printf_float+0x3b8>
 8005bd4:	07db      	lsls	r3, r3, #31
 8005bd6:	d537      	bpl.n	8005c48 <_printf_float+0x428>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4642      	mov	r2, r8
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f ae77 	beq.w	80058d6 <_printf_float+0xb6>
 8005be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f ae6f 	beq.w	80058d6 <_printf_float+0xb6>
 8005bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f7fa fed2 	bl	80009a8 <__aeabi_dcmpeq>
 8005c04:	b9d8      	cbnz	r0, 8005c3e <_printf_float+0x41e>
 8005c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c08:	f108 0201 	add.w	r2, r8, #1
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	d10e      	bne.n	8005c36 <_printf_float+0x416>
 8005c18:	e65d      	b.n	80058d6 <_printf_float+0xb6>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	464a      	mov	r2, r9
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f ae56 	beq.w	80058d6 <_printf_float+0xb6>
 8005c2a:	f108 0801 	add.w	r8, r8, #1
 8005c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c30:	3b01      	subs	r3, #1
 8005c32:	4543      	cmp	r3, r8
 8005c34:	dcf1      	bgt.n	8005c1a <_printf_float+0x3fa>
 8005c36:	4653      	mov	r3, sl
 8005c38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c3c:	e6e0      	b.n	8005a00 <_printf_float+0x1e0>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 091a 	add.w	r9, r4, #26
 8005c46:	e7f2      	b.n	8005c2e <_printf_float+0x40e>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	e7df      	b.n	8005c0e <_printf_float+0x3ee>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	464a      	mov	r2, r9
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f ae3c 	beq.w	80058d6 <_printf_float+0xb6>
 8005c5e:	f108 0801 	add.w	r8, r8, #1
 8005c62:	68e3      	ldr	r3, [r4, #12]
 8005c64:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005c66:	1a5b      	subs	r3, r3, r1
 8005c68:	4543      	cmp	r3, r8
 8005c6a:	dcf0      	bgt.n	8005c4e <_printf_float+0x42e>
 8005c6c:	e6fd      	b.n	8005a6a <_printf_float+0x24a>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	f104 0919 	add.w	r9, r4, #25
 8005c76:	e7f4      	b.n	8005c62 <_printf_float+0x442>

08005c78 <_printf_common>:
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	4699      	mov	r9, r3
 8005c80:	688a      	ldr	r2, [r1, #8]
 8005c82:	690b      	ldr	r3, [r1, #16]
 8005c84:	4607      	mov	r7, r0
 8005c86:	4293      	cmp	r3, r2
 8005c88:	bfb8      	it	lt
 8005c8a:	4613      	movlt	r3, r2
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c92:	460c      	mov	r4, r1
 8005c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c98:	b10a      	cbz	r2, 8005c9e <_printf_common+0x26>
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	6033      	str	r3, [r6, #0]
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	0699      	lsls	r1, r3, #26
 8005ca2:	bf42      	ittt	mi
 8005ca4:	6833      	ldrmi	r3, [r6, #0]
 8005ca6:	3302      	addmi	r3, #2
 8005ca8:	6033      	strmi	r3, [r6, #0]
 8005caa:	6825      	ldr	r5, [r4, #0]
 8005cac:	f015 0506 	ands.w	r5, r5, #6
 8005cb0:	d106      	bne.n	8005cc0 <_printf_common+0x48>
 8005cb2:	f104 0a19 	add.w	sl, r4, #25
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	6832      	ldr	r2, [r6, #0]
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	42ab      	cmp	r3, r5
 8005cbe:	dc28      	bgt.n	8005d12 <_printf_common+0x9a>
 8005cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cc4:	1e13      	subs	r3, r2, #0
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	bf18      	it	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	0692      	lsls	r2, r2, #26
 8005cce:	d42d      	bmi.n	8005d2c <_printf_common+0xb4>
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd8:	47c0      	blx	r8
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d020      	beq.n	8005d20 <_printf_common+0xa8>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	68e5      	ldr	r5, [r4, #12]
 8005ce2:	f003 0306 	and.w	r3, r3, #6
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	bf18      	it	ne
 8005cea:	2500      	movne	r5, #0
 8005cec:	6832      	ldr	r2, [r6, #0]
 8005cee:	f04f 0600 	mov.w	r6, #0
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	bf08      	it	eq
 8005cf6:	1aad      	subeq	r5, r5, r2
 8005cf8:	6922      	ldr	r2, [r4, #16]
 8005cfa:	bf08      	it	eq
 8005cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d00:	4293      	cmp	r3, r2
 8005d02:	bfc4      	itt	gt
 8005d04:	1a9b      	subgt	r3, r3, r2
 8005d06:	18ed      	addgt	r5, r5, r3
 8005d08:	341a      	adds	r4, #26
 8005d0a:	42b5      	cmp	r5, r6
 8005d0c:	d11a      	bne.n	8005d44 <_printf_common+0xcc>
 8005d0e:	2000      	movs	r0, #0
 8005d10:	e008      	b.n	8005d24 <_printf_common+0xac>
 8005d12:	2301      	movs	r3, #1
 8005d14:	4652      	mov	r2, sl
 8005d16:	4649      	mov	r1, r9
 8005d18:	4638      	mov	r0, r7
 8005d1a:	47c0      	blx	r8
 8005d1c:	3001      	adds	r0, #1
 8005d1e:	d103      	bne.n	8005d28 <_printf_common+0xb0>
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295
 8005d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d28:	3501      	adds	r5, #1
 8005d2a:	e7c4      	b.n	8005cb6 <_printf_common+0x3e>
 8005d2c:	2030      	movs	r0, #48	; 0x30
 8005d2e:	18e1      	adds	r1, r4, r3
 8005d30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3a:	4422      	add	r2, r4
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d42:	e7c5      	b.n	8005cd0 <_printf_common+0x58>
 8005d44:	2301      	movs	r3, #1
 8005d46:	4622      	mov	r2, r4
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	47c0      	blx	r8
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d0e6      	beq.n	8005d20 <_printf_common+0xa8>
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7d9      	b.n	8005d0a <_printf_common+0x92>
	...

08005d58 <_printf_i>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	7e0f      	ldrb	r7, [r1, #24]
 8005d5e:	4691      	mov	r9, r2
 8005d60:	2f78      	cmp	r7, #120	; 0x78
 8005d62:	4680      	mov	r8, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	469a      	mov	sl, r3
 8005d68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d6e:	d807      	bhi.n	8005d80 <_printf_i+0x28>
 8005d70:	2f62      	cmp	r7, #98	; 0x62
 8005d72:	d80a      	bhi.n	8005d8a <_printf_i+0x32>
 8005d74:	2f00      	cmp	r7, #0
 8005d76:	f000 80d9 	beq.w	8005f2c <_printf_i+0x1d4>
 8005d7a:	2f58      	cmp	r7, #88	; 0x58
 8005d7c:	f000 80a4 	beq.w	8005ec8 <_printf_i+0x170>
 8005d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d88:	e03a      	b.n	8005e00 <_printf_i+0xa8>
 8005d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d8e:	2b15      	cmp	r3, #21
 8005d90:	d8f6      	bhi.n	8005d80 <_printf_i+0x28>
 8005d92:	a101      	add	r1, pc, #4	; (adr r1, 8005d98 <_printf_i+0x40>)
 8005d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d98:	08005df1 	.word	0x08005df1
 8005d9c:	08005e05 	.word	0x08005e05
 8005da0:	08005d81 	.word	0x08005d81
 8005da4:	08005d81 	.word	0x08005d81
 8005da8:	08005d81 	.word	0x08005d81
 8005dac:	08005d81 	.word	0x08005d81
 8005db0:	08005e05 	.word	0x08005e05
 8005db4:	08005d81 	.word	0x08005d81
 8005db8:	08005d81 	.word	0x08005d81
 8005dbc:	08005d81 	.word	0x08005d81
 8005dc0:	08005d81 	.word	0x08005d81
 8005dc4:	08005f13 	.word	0x08005f13
 8005dc8:	08005e35 	.word	0x08005e35
 8005dcc:	08005ef5 	.word	0x08005ef5
 8005dd0:	08005d81 	.word	0x08005d81
 8005dd4:	08005d81 	.word	0x08005d81
 8005dd8:	08005f35 	.word	0x08005f35
 8005ddc:	08005d81 	.word	0x08005d81
 8005de0:	08005e35 	.word	0x08005e35
 8005de4:	08005d81 	.word	0x08005d81
 8005de8:	08005d81 	.word	0x08005d81
 8005dec:	08005efd 	.word	0x08005efd
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	1d1a      	adds	r2, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	602a      	str	r2, [r5, #0]
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0a4      	b.n	8005f4e <_printf_i+0x1f6>
 8005e04:	6820      	ldr	r0, [r4, #0]
 8005e06:	6829      	ldr	r1, [r5, #0]
 8005e08:	0606      	lsls	r6, r0, #24
 8005e0a:	f101 0304 	add.w	r3, r1, #4
 8005e0e:	d50a      	bpl.n	8005e26 <_printf_i+0xce>
 8005e10:	680e      	ldr	r6, [r1, #0]
 8005e12:	602b      	str	r3, [r5, #0]
 8005e14:	2e00      	cmp	r6, #0
 8005e16:	da03      	bge.n	8005e20 <_printf_i+0xc8>
 8005e18:	232d      	movs	r3, #45	; 0x2d
 8005e1a:	4276      	negs	r6, r6
 8005e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e20:	230a      	movs	r3, #10
 8005e22:	485e      	ldr	r0, [pc, #376]	; (8005f9c <_printf_i+0x244>)
 8005e24:	e019      	b.n	8005e5a <_printf_i+0x102>
 8005e26:	680e      	ldr	r6, [r1, #0]
 8005e28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	bf18      	it	ne
 8005e30:	b236      	sxthne	r6, r6
 8005e32:	e7ef      	b.n	8005e14 <_printf_i+0xbc>
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	1d19      	adds	r1, r3, #4
 8005e3a:	6029      	str	r1, [r5, #0]
 8005e3c:	0601      	lsls	r1, r0, #24
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0xec>
 8005e40:	681e      	ldr	r6, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0xf2>
 8005e44:	0646      	lsls	r6, r0, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0xe8>
 8005e48:	881e      	ldrh	r6, [r3, #0]
 8005e4a:	2f6f      	cmp	r7, #111	; 0x6f
 8005e4c:	bf0c      	ite	eq
 8005e4e:	2308      	moveq	r3, #8
 8005e50:	230a      	movne	r3, #10
 8005e52:	4852      	ldr	r0, [pc, #328]	; (8005f9c <_printf_i+0x244>)
 8005e54:	2100      	movs	r1, #0
 8005e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e5a:	6865      	ldr	r5, [r4, #4]
 8005e5c:	2d00      	cmp	r5, #0
 8005e5e:	bfa8      	it	ge
 8005e60:	6821      	ldrge	r1, [r4, #0]
 8005e62:	60a5      	str	r5, [r4, #8]
 8005e64:	bfa4      	itt	ge
 8005e66:	f021 0104 	bicge.w	r1, r1, #4
 8005e6a:	6021      	strge	r1, [r4, #0]
 8005e6c:	b90e      	cbnz	r6, 8005e72 <_printf_i+0x11a>
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	d04d      	beq.n	8005f0e <_printf_i+0x1b6>
 8005e72:	4615      	mov	r5, r2
 8005e74:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e78:	fb03 6711 	mls	r7, r3, r1, r6
 8005e7c:	5dc7      	ldrb	r7, [r0, r7]
 8005e7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e82:	4637      	mov	r7, r6
 8005e84:	42bb      	cmp	r3, r7
 8005e86:	460e      	mov	r6, r1
 8005e88:	d9f4      	bls.n	8005e74 <_printf_i+0x11c>
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d10b      	bne.n	8005ea6 <_printf_i+0x14e>
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	07de      	lsls	r6, r3, #31
 8005e92:	d508      	bpl.n	8005ea6 <_printf_i+0x14e>
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	6861      	ldr	r1, [r4, #4]
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	bfde      	ittt	le
 8005e9c:	2330      	movle	r3, #48	; 0x30
 8005e9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ea2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ea6:	1b52      	subs	r2, r2, r5
 8005ea8:	6122      	str	r2, [r4, #16]
 8005eaa:	464b      	mov	r3, r9
 8005eac:	4621      	mov	r1, r4
 8005eae:	4640      	mov	r0, r8
 8005eb0:	f8cd a000 	str.w	sl, [sp]
 8005eb4:	aa03      	add	r2, sp, #12
 8005eb6:	f7ff fedf 	bl	8005c78 <_printf_common>
 8005eba:	3001      	adds	r0, #1
 8005ebc:	d14c      	bne.n	8005f58 <_printf_i+0x200>
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	b004      	add	sp, #16
 8005ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ec8:	4834      	ldr	r0, [pc, #208]	; (8005f9c <_printf_i+0x244>)
 8005eca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ece:	6829      	ldr	r1, [r5, #0]
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ed6:	6029      	str	r1, [r5, #0]
 8005ed8:	061d      	lsls	r5, r3, #24
 8005eda:	d514      	bpl.n	8005f06 <_printf_i+0x1ae>
 8005edc:	07df      	lsls	r7, r3, #31
 8005ede:	bf44      	itt	mi
 8005ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee4:	6023      	strmi	r3, [r4, #0]
 8005ee6:	b91e      	cbnz	r6, 8005ef0 <_printf_i+0x198>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f023 0320 	bic.w	r3, r3, #32
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	e7af      	b.n	8005e54 <_printf_i+0xfc>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	f043 0320 	orr.w	r3, r3, #32
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	2378      	movs	r3, #120	; 0x78
 8005efe:	4828      	ldr	r0, [pc, #160]	; (8005fa0 <_printf_i+0x248>)
 8005f00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f04:	e7e3      	b.n	8005ece <_printf_i+0x176>
 8005f06:	0659      	lsls	r1, r3, #25
 8005f08:	bf48      	it	mi
 8005f0a:	b2b6      	uxthmi	r6, r6
 8005f0c:	e7e6      	b.n	8005edc <_printf_i+0x184>
 8005f0e:	4615      	mov	r5, r2
 8005f10:	e7bb      	b.n	8005e8a <_printf_i+0x132>
 8005f12:	682b      	ldr	r3, [r5, #0]
 8005f14:	6826      	ldr	r6, [r4, #0]
 8005f16:	1d18      	adds	r0, r3, #4
 8005f18:	6961      	ldr	r1, [r4, #20]
 8005f1a:	6028      	str	r0, [r5, #0]
 8005f1c:	0635      	lsls	r5, r6, #24
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	d501      	bpl.n	8005f26 <_printf_i+0x1ce>
 8005f22:	6019      	str	r1, [r3, #0]
 8005f24:	e002      	b.n	8005f2c <_printf_i+0x1d4>
 8005f26:	0670      	lsls	r0, r6, #25
 8005f28:	d5fb      	bpl.n	8005f22 <_printf_i+0x1ca>
 8005f2a:	8019      	strh	r1, [r3, #0]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4615      	mov	r5, r2
 8005f30:	6123      	str	r3, [r4, #16]
 8005f32:	e7ba      	b.n	8005eaa <_printf_i+0x152>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	2100      	movs	r1, #0
 8005f38:	1d1a      	adds	r2, r3, #4
 8005f3a:	602a      	str	r2, [r5, #0]
 8005f3c:	681d      	ldr	r5, [r3, #0]
 8005f3e:	6862      	ldr	r2, [r4, #4]
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 fed7 	bl	8006cf4 <memchr>
 8005f46:	b108      	cbz	r0, 8005f4c <_printf_i+0x1f4>
 8005f48:	1b40      	subs	r0, r0, r5
 8005f4a:	6060      	str	r0, [r4, #4]
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	6123      	str	r3, [r4, #16]
 8005f50:	2300      	movs	r3, #0
 8005f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f56:	e7a8      	b.n	8005eaa <_printf_i+0x152>
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4649      	mov	r1, r9
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	47d0      	blx	sl
 8005f62:	3001      	adds	r0, #1
 8005f64:	d0ab      	beq.n	8005ebe <_printf_i+0x166>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	079b      	lsls	r3, r3, #30
 8005f6a:	d413      	bmi.n	8005f94 <_printf_i+0x23c>
 8005f6c:	68e0      	ldr	r0, [r4, #12]
 8005f6e:	9b03      	ldr	r3, [sp, #12]
 8005f70:	4298      	cmp	r0, r3
 8005f72:	bfb8      	it	lt
 8005f74:	4618      	movlt	r0, r3
 8005f76:	e7a4      	b.n	8005ec2 <_printf_i+0x16a>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4632      	mov	r2, r6
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4640      	mov	r0, r8
 8005f80:	47d0      	blx	sl
 8005f82:	3001      	adds	r0, #1
 8005f84:	d09b      	beq.n	8005ebe <_printf_i+0x166>
 8005f86:	3501      	adds	r5, #1
 8005f88:	68e3      	ldr	r3, [r4, #12]
 8005f8a:	9903      	ldr	r1, [sp, #12]
 8005f8c:	1a5b      	subs	r3, r3, r1
 8005f8e:	42ab      	cmp	r3, r5
 8005f90:	dcf2      	bgt.n	8005f78 <_printf_i+0x220>
 8005f92:	e7eb      	b.n	8005f6c <_printf_i+0x214>
 8005f94:	2500      	movs	r5, #0
 8005f96:	f104 0619 	add.w	r6, r4, #25
 8005f9a:	e7f5      	b.n	8005f88 <_printf_i+0x230>
 8005f9c:	080085a2 	.word	0x080085a2
 8005fa0:	080085b3 	.word	0x080085b3

08005fa4 <siprintf>:
 8005fa4:	b40e      	push	{r1, r2, r3}
 8005fa6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005faa:	b500      	push	{lr}
 8005fac:	b09c      	sub	sp, #112	; 0x70
 8005fae:	ab1d      	add	r3, sp, #116	; 0x74
 8005fb0:	9002      	str	r0, [sp, #8]
 8005fb2:	9006      	str	r0, [sp, #24]
 8005fb4:	9107      	str	r1, [sp, #28]
 8005fb6:	9104      	str	r1, [sp, #16]
 8005fb8:	4808      	ldr	r0, [pc, #32]	; (8005fdc <siprintf+0x38>)
 8005fba:	4909      	ldr	r1, [pc, #36]	; (8005fe0 <siprintf+0x3c>)
 8005fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fc0:	9105      	str	r1, [sp, #20]
 8005fc2:	6800      	ldr	r0, [r0, #0]
 8005fc4:	a902      	add	r1, sp, #8
 8005fc6:	9301      	str	r3, [sp, #4]
 8005fc8:	f001 fb7e 	bl	80076c8 <_svfiprintf_r>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	9b02      	ldr	r3, [sp, #8]
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	b01c      	add	sp, #112	; 0x70
 8005fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fd8:	b003      	add	sp, #12
 8005fda:	4770      	bx	lr
 8005fdc:	20000010 	.word	0x20000010
 8005fe0:	ffff0208 	.word	0xffff0208

08005fe4 <quorem>:
 8005fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe8:	6903      	ldr	r3, [r0, #16]
 8005fea:	690c      	ldr	r4, [r1, #16]
 8005fec:	4607      	mov	r7, r0
 8005fee:	42a3      	cmp	r3, r4
 8005ff0:	f2c0 8082 	blt.w	80060f8 <quorem+0x114>
 8005ff4:	3c01      	subs	r4, #1
 8005ff6:	f100 0514 	add.w	r5, r0, #20
 8005ffa:	f101 0814 	add.w	r8, r1, #20
 8005ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006002:	9301      	str	r3, [sp, #4]
 8006004:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800600c:	3301      	adds	r3, #1
 800600e:	429a      	cmp	r2, r3
 8006010:	fbb2 f6f3 	udiv	r6, r2, r3
 8006014:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006018:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800601c:	d331      	bcc.n	8006082 <quorem+0x9e>
 800601e:	f04f 0e00 	mov.w	lr, #0
 8006022:	4640      	mov	r0, r8
 8006024:	46ac      	mov	ip, r5
 8006026:	46f2      	mov	sl, lr
 8006028:	f850 2b04 	ldr.w	r2, [r0], #4
 800602c:	b293      	uxth	r3, r2
 800602e:	fb06 e303 	mla	r3, r6, r3, lr
 8006032:	0c12      	lsrs	r2, r2, #16
 8006034:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006038:	b29b      	uxth	r3, r3
 800603a:	fb06 e202 	mla	r2, r6, r2, lr
 800603e:	ebaa 0303 	sub.w	r3, sl, r3
 8006042:	f8dc a000 	ldr.w	sl, [ip]
 8006046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800604a:	fa1f fa8a 	uxth.w	sl, sl
 800604e:	4453      	add	r3, sl
 8006050:	f8dc a000 	ldr.w	sl, [ip]
 8006054:	b292      	uxth	r2, r2
 8006056:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800605a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800605e:	b29b      	uxth	r3, r3
 8006060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006064:	4581      	cmp	r9, r0
 8006066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800606a:	f84c 3b04 	str.w	r3, [ip], #4
 800606e:	d2db      	bcs.n	8006028 <quorem+0x44>
 8006070:	f855 300b 	ldr.w	r3, [r5, fp]
 8006074:	b92b      	cbnz	r3, 8006082 <quorem+0x9e>
 8006076:	9b01      	ldr	r3, [sp, #4]
 8006078:	3b04      	subs	r3, #4
 800607a:	429d      	cmp	r5, r3
 800607c:	461a      	mov	r2, r3
 800607e:	d32f      	bcc.n	80060e0 <quorem+0xfc>
 8006080:	613c      	str	r4, [r7, #16]
 8006082:	4638      	mov	r0, r7
 8006084:	f001 f8d0 	bl	8007228 <__mcmp>
 8006088:	2800      	cmp	r0, #0
 800608a:	db25      	blt.n	80060d8 <quorem+0xf4>
 800608c:	4628      	mov	r0, r5
 800608e:	f04f 0c00 	mov.w	ip, #0
 8006092:	3601      	adds	r6, #1
 8006094:	f858 1b04 	ldr.w	r1, [r8], #4
 8006098:	f8d0 e000 	ldr.w	lr, [r0]
 800609c:	b28b      	uxth	r3, r1
 800609e:	ebac 0303 	sub.w	r3, ip, r3
 80060a2:	fa1f f28e 	uxth.w	r2, lr
 80060a6:	4413      	add	r3, r2
 80060a8:	0c0a      	lsrs	r2, r1, #16
 80060aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060b8:	45c1      	cmp	r9, r8
 80060ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060be:	f840 3b04 	str.w	r3, [r0], #4
 80060c2:	d2e7      	bcs.n	8006094 <quorem+0xb0>
 80060c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060cc:	b922      	cbnz	r2, 80060d8 <quorem+0xf4>
 80060ce:	3b04      	subs	r3, #4
 80060d0:	429d      	cmp	r5, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	d30a      	bcc.n	80060ec <quorem+0x108>
 80060d6:	613c      	str	r4, [r7, #16]
 80060d8:	4630      	mov	r0, r6
 80060da:	b003      	add	sp, #12
 80060dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	3b04      	subs	r3, #4
 80060e4:	2a00      	cmp	r2, #0
 80060e6:	d1cb      	bne.n	8006080 <quorem+0x9c>
 80060e8:	3c01      	subs	r4, #1
 80060ea:	e7c6      	b.n	800607a <quorem+0x96>
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	3b04      	subs	r3, #4
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d1f0      	bne.n	80060d6 <quorem+0xf2>
 80060f4:	3c01      	subs	r4, #1
 80060f6:	e7eb      	b.n	80060d0 <quorem+0xec>
 80060f8:	2000      	movs	r0, #0
 80060fa:	e7ee      	b.n	80060da <quorem+0xf6>
 80060fc:	0000      	movs	r0, r0
	...

08006100 <_dtoa_r>:
 8006100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006104:	4616      	mov	r6, r2
 8006106:	461f      	mov	r7, r3
 8006108:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800610a:	b099      	sub	sp, #100	; 0x64
 800610c:	4605      	mov	r5, r0
 800610e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006112:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006116:	b974      	cbnz	r4, 8006136 <_dtoa_r+0x36>
 8006118:	2010      	movs	r0, #16
 800611a:	f000 fde3 	bl	8006ce4 <malloc>
 800611e:	4602      	mov	r2, r0
 8006120:	6268      	str	r0, [r5, #36]	; 0x24
 8006122:	b920      	cbnz	r0, 800612e <_dtoa_r+0x2e>
 8006124:	21ea      	movs	r1, #234	; 0xea
 8006126:	4ba8      	ldr	r3, [pc, #672]	; (80063c8 <_dtoa_r+0x2c8>)
 8006128:	48a8      	ldr	r0, [pc, #672]	; (80063cc <_dtoa_r+0x2cc>)
 800612a:	f001 fbdd 	bl	80078e8 <__assert_func>
 800612e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006132:	6004      	str	r4, [r0, #0]
 8006134:	60c4      	str	r4, [r0, #12]
 8006136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006138:	6819      	ldr	r1, [r3, #0]
 800613a:	b151      	cbz	r1, 8006152 <_dtoa_r+0x52>
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	2301      	movs	r3, #1
 8006140:	4093      	lsls	r3, r2
 8006142:	604a      	str	r2, [r1, #4]
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	4628      	mov	r0, r5
 8006148:	f000 fe30 	bl	8006dac <_Bfree>
 800614c:	2200      	movs	r2, #0
 800614e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	1e3b      	subs	r3, r7, #0
 8006154:	bfaf      	iteee	ge
 8006156:	2300      	movge	r3, #0
 8006158:	2201      	movlt	r2, #1
 800615a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800615e:	9305      	strlt	r3, [sp, #20]
 8006160:	bfa8      	it	ge
 8006162:	f8c8 3000 	strge.w	r3, [r8]
 8006166:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800616a:	4b99      	ldr	r3, [pc, #612]	; (80063d0 <_dtoa_r+0x2d0>)
 800616c:	bfb8      	it	lt
 800616e:	f8c8 2000 	strlt.w	r2, [r8]
 8006172:	ea33 0309 	bics.w	r3, r3, r9
 8006176:	d119      	bne.n	80061ac <_dtoa_r+0xac>
 8006178:	f242 730f 	movw	r3, #9999	; 0x270f
 800617c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006184:	4333      	orrs	r3, r6
 8006186:	f000 857f 	beq.w	8006c88 <_dtoa_r+0xb88>
 800618a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800618c:	b953      	cbnz	r3, 80061a4 <_dtoa_r+0xa4>
 800618e:	4b91      	ldr	r3, [pc, #580]	; (80063d4 <_dtoa_r+0x2d4>)
 8006190:	e022      	b.n	80061d8 <_dtoa_r+0xd8>
 8006192:	4b91      	ldr	r3, [pc, #580]	; (80063d8 <_dtoa_r+0x2d8>)
 8006194:	9303      	str	r3, [sp, #12]
 8006196:	3308      	adds	r3, #8
 8006198:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	9803      	ldr	r0, [sp, #12]
 800619e:	b019      	add	sp, #100	; 0x64
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a4:	4b8b      	ldr	r3, [pc, #556]	; (80063d4 <_dtoa_r+0x2d4>)
 80061a6:	9303      	str	r3, [sp, #12]
 80061a8:	3303      	adds	r3, #3
 80061aa:	e7f5      	b.n	8006198 <_dtoa_r+0x98>
 80061ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80061b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80061b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061b8:	2200      	movs	r2, #0
 80061ba:	2300      	movs	r3, #0
 80061bc:	f7fa fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80061c0:	4680      	mov	r8, r0
 80061c2:	b158      	cbz	r0, 80061dc <_dtoa_r+0xdc>
 80061c4:	2301      	movs	r3, #1
 80061c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8558 	beq.w	8006c82 <_dtoa_r+0xb82>
 80061d2:	4882      	ldr	r0, [pc, #520]	; (80063dc <_dtoa_r+0x2dc>)
 80061d4:	6018      	str	r0, [r3, #0]
 80061d6:	1e43      	subs	r3, r0, #1
 80061d8:	9303      	str	r3, [sp, #12]
 80061da:	e7df      	b.n	800619c <_dtoa_r+0x9c>
 80061dc:	ab16      	add	r3, sp, #88	; 0x58
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	ab17      	add	r3, sp, #92	; 0x5c
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	4628      	mov	r0, r5
 80061e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80061ea:	f001 f8c5 	bl	8007378 <__d2b>
 80061ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061f2:	4683      	mov	fp, r0
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	d07f      	beq.n	80062f8 <_dtoa_r+0x1f8>
 80061f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80061fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006206:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800620a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800620e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006212:	2200      	movs	r2, #0
 8006214:	4b72      	ldr	r3, [pc, #456]	; (80063e0 <_dtoa_r+0x2e0>)
 8006216:	f7f9 ffa7 	bl	8000168 <__aeabi_dsub>
 800621a:	a365      	add	r3, pc, #404	; (adr r3, 80063b0 <_dtoa_r+0x2b0>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa f95a 	bl	80004d8 <__aeabi_dmul>
 8006224:	a364      	add	r3, pc, #400	; (adr r3, 80063b8 <_dtoa_r+0x2b8>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7f9 ff9f 	bl	800016c <__adddf3>
 800622e:	4606      	mov	r6, r0
 8006230:	4620      	mov	r0, r4
 8006232:	460f      	mov	r7, r1
 8006234:	f7fa f8e6 	bl	8000404 <__aeabi_i2d>
 8006238:	a361      	add	r3, pc, #388	; (adr r3, 80063c0 <_dtoa_r+0x2c0>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f94b 	bl	80004d8 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4630      	mov	r0, r6
 8006248:	4639      	mov	r1, r7
 800624a:	f7f9 ff8f 	bl	800016c <__adddf3>
 800624e:	4606      	mov	r6, r0
 8006250:	460f      	mov	r7, r1
 8006252:	f7fa fbf1 	bl	8000a38 <__aeabi_d2iz>
 8006256:	2200      	movs	r2, #0
 8006258:	4682      	mov	sl, r0
 800625a:	2300      	movs	r3, #0
 800625c:	4630      	mov	r0, r6
 800625e:	4639      	mov	r1, r7
 8006260:	f7fa fbac 	bl	80009bc <__aeabi_dcmplt>
 8006264:	b148      	cbz	r0, 800627a <_dtoa_r+0x17a>
 8006266:	4650      	mov	r0, sl
 8006268:	f7fa f8cc 	bl	8000404 <__aeabi_i2d>
 800626c:	4632      	mov	r2, r6
 800626e:	463b      	mov	r3, r7
 8006270:	f7fa fb9a 	bl	80009a8 <__aeabi_dcmpeq>
 8006274:	b908      	cbnz	r0, 800627a <_dtoa_r+0x17a>
 8006276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800627a:	f1ba 0f16 	cmp.w	sl, #22
 800627e:	d858      	bhi.n	8006332 <_dtoa_r+0x232>
 8006280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006284:	4b57      	ldr	r3, [pc, #348]	; (80063e4 <_dtoa_r+0x2e4>)
 8006286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7fa fb95 	bl	80009bc <__aeabi_dcmplt>
 8006292:	2800      	cmp	r0, #0
 8006294:	d04f      	beq.n	8006336 <_dtoa_r+0x236>
 8006296:	2300      	movs	r3, #0
 8006298:	f10a 3aff 	add.w	sl, sl, #4294967295
 800629c:	930f      	str	r3, [sp, #60]	; 0x3c
 800629e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80062a0:	1b1c      	subs	r4, r3, r4
 80062a2:	1e63      	subs	r3, r4, #1
 80062a4:	9309      	str	r3, [sp, #36]	; 0x24
 80062a6:	bf49      	itett	mi
 80062a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80062ac:	2300      	movpl	r3, #0
 80062ae:	9306      	strmi	r3, [sp, #24]
 80062b0:	2300      	movmi	r3, #0
 80062b2:	bf54      	ite	pl
 80062b4:	9306      	strpl	r3, [sp, #24]
 80062b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80062b8:	f1ba 0f00 	cmp.w	sl, #0
 80062bc:	db3d      	blt.n	800633a <_dtoa_r+0x23a>
 80062be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062c4:	4453      	add	r3, sl
 80062c6:	9309      	str	r3, [sp, #36]	; 0x24
 80062c8:	2300      	movs	r3, #0
 80062ca:	930a      	str	r3, [sp, #40]	; 0x28
 80062cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	f200 808c 	bhi.w	80063ec <_dtoa_r+0x2ec>
 80062d4:	2b05      	cmp	r3, #5
 80062d6:	bfc4      	itt	gt
 80062d8:	3b04      	subgt	r3, #4
 80062da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80062dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062de:	bfc8      	it	gt
 80062e0:	2400      	movgt	r4, #0
 80062e2:	f1a3 0302 	sub.w	r3, r3, #2
 80062e6:	bfd8      	it	le
 80062e8:	2401      	movle	r4, #1
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	f200 808a 	bhi.w	8006404 <_dtoa_r+0x304>
 80062f0:	e8df f003 	tbb	[pc, r3]
 80062f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80062f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80062fc:	441c      	add	r4, r3
 80062fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006302:	2b20      	cmp	r3, #32
 8006304:	bfc3      	ittte	gt
 8006306:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800630a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800630e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006312:	f1c3 0320 	rsble	r3, r3, #32
 8006316:	bfc6      	itte	gt
 8006318:	fa26 f000 	lsrgt.w	r0, r6, r0
 800631c:	4318      	orrgt	r0, r3
 800631e:	fa06 f003 	lslle.w	r0, r6, r3
 8006322:	f7fa f85f 	bl	80003e4 <__aeabi_ui2d>
 8006326:	2301      	movs	r3, #1
 8006328:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800632c:	3c01      	subs	r4, #1
 800632e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006330:	e76f      	b.n	8006212 <_dtoa_r+0x112>
 8006332:	2301      	movs	r3, #1
 8006334:	e7b2      	b.n	800629c <_dtoa_r+0x19c>
 8006336:	900f      	str	r0, [sp, #60]	; 0x3c
 8006338:	e7b1      	b.n	800629e <_dtoa_r+0x19e>
 800633a:	9b06      	ldr	r3, [sp, #24]
 800633c:	eba3 030a 	sub.w	r3, r3, sl
 8006340:	9306      	str	r3, [sp, #24]
 8006342:	f1ca 0300 	rsb	r3, sl, #0
 8006346:	930a      	str	r3, [sp, #40]	; 0x28
 8006348:	2300      	movs	r3, #0
 800634a:	930e      	str	r3, [sp, #56]	; 0x38
 800634c:	e7be      	b.n	80062cc <_dtoa_r+0x1cc>
 800634e:	2300      	movs	r3, #0
 8006350:	930b      	str	r3, [sp, #44]	; 0x2c
 8006352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006354:	2b00      	cmp	r3, #0
 8006356:	dc58      	bgt.n	800640a <_dtoa_r+0x30a>
 8006358:	f04f 0901 	mov.w	r9, #1
 800635c:	464b      	mov	r3, r9
 800635e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006362:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006366:	2200      	movs	r2, #0
 8006368:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800636a:	6042      	str	r2, [r0, #4]
 800636c:	2204      	movs	r2, #4
 800636e:	f102 0614 	add.w	r6, r2, #20
 8006372:	429e      	cmp	r6, r3
 8006374:	6841      	ldr	r1, [r0, #4]
 8006376:	d94e      	bls.n	8006416 <_dtoa_r+0x316>
 8006378:	4628      	mov	r0, r5
 800637a:	f000 fcd7 	bl	8006d2c <_Balloc>
 800637e:	9003      	str	r0, [sp, #12]
 8006380:	2800      	cmp	r0, #0
 8006382:	d14c      	bne.n	800641e <_dtoa_r+0x31e>
 8006384:	4602      	mov	r2, r0
 8006386:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800638a:	4b17      	ldr	r3, [pc, #92]	; (80063e8 <_dtoa_r+0x2e8>)
 800638c:	e6cc      	b.n	8006128 <_dtoa_r+0x28>
 800638e:	2301      	movs	r3, #1
 8006390:	e7de      	b.n	8006350 <_dtoa_r+0x250>
 8006392:	2300      	movs	r3, #0
 8006394:	930b      	str	r3, [sp, #44]	; 0x2c
 8006396:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006398:	eb0a 0903 	add.w	r9, sl, r3
 800639c:	f109 0301 	add.w	r3, r9, #1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	9308      	str	r3, [sp, #32]
 80063a4:	bfb8      	it	lt
 80063a6:	2301      	movlt	r3, #1
 80063a8:	e7dd      	b.n	8006366 <_dtoa_r+0x266>
 80063aa:	2301      	movs	r3, #1
 80063ac:	e7f2      	b.n	8006394 <_dtoa_r+0x294>
 80063ae:	bf00      	nop
 80063b0:	636f4361 	.word	0x636f4361
 80063b4:	3fd287a7 	.word	0x3fd287a7
 80063b8:	8b60c8b3 	.word	0x8b60c8b3
 80063bc:	3fc68a28 	.word	0x3fc68a28
 80063c0:	509f79fb 	.word	0x509f79fb
 80063c4:	3fd34413 	.word	0x3fd34413
 80063c8:	080085d1 	.word	0x080085d1
 80063cc:	080085e8 	.word	0x080085e8
 80063d0:	7ff00000 	.word	0x7ff00000
 80063d4:	080085cd 	.word	0x080085cd
 80063d8:	080085c4 	.word	0x080085c4
 80063dc:	080085a1 	.word	0x080085a1
 80063e0:	3ff80000 	.word	0x3ff80000
 80063e4:	080086d8 	.word	0x080086d8
 80063e8:	08008643 	.word	0x08008643
 80063ec:	2401      	movs	r4, #1
 80063ee:	2300      	movs	r3, #0
 80063f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80063f2:	9322      	str	r3, [sp, #136]	; 0x88
 80063f4:	f04f 39ff 	mov.w	r9, #4294967295
 80063f8:	2200      	movs	r2, #0
 80063fa:	2312      	movs	r3, #18
 80063fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8006400:	9223      	str	r2, [sp, #140]	; 0x8c
 8006402:	e7b0      	b.n	8006366 <_dtoa_r+0x266>
 8006404:	2301      	movs	r3, #1
 8006406:	930b      	str	r3, [sp, #44]	; 0x2c
 8006408:	e7f4      	b.n	80063f4 <_dtoa_r+0x2f4>
 800640a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800640e:	464b      	mov	r3, r9
 8006410:	f8cd 9020 	str.w	r9, [sp, #32]
 8006414:	e7a7      	b.n	8006366 <_dtoa_r+0x266>
 8006416:	3101      	adds	r1, #1
 8006418:	6041      	str	r1, [r0, #4]
 800641a:	0052      	lsls	r2, r2, #1
 800641c:	e7a7      	b.n	800636e <_dtoa_r+0x26e>
 800641e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006420:	9a03      	ldr	r2, [sp, #12]
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	9b08      	ldr	r3, [sp, #32]
 8006426:	2b0e      	cmp	r3, #14
 8006428:	f200 80a8 	bhi.w	800657c <_dtoa_r+0x47c>
 800642c:	2c00      	cmp	r4, #0
 800642e:	f000 80a5 	beq.w	800657c <_dtoa_r+0x47c>
 8006432:	f1ba 0f00 	cmp.w	sl, #0
 8006436:	dd34      	ble.n	80064a2 <_dtoa_r+0x3a2>
 8006438:	4a9a      	ldr	r2, [pc, #616]	; (80066a4 <_dtoa_r+0x5a4>)
 800643a:	f00a 030f 	and.w	r3, sl, #15
 800643e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006442:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800644a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800644e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006452:	d016      	beq.n	8006482 <_dtoa_r+0x382>
 8006454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006458:	4b93      	ldr	r3, [pc, #588]	; (80066a8 <_dtoa_r+0x5a8>)
 800645a:	2703      	movs	r7, #3
 800645c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006460:	f7fa f964 	bl	800072c <__aeabi_ddiv>
 8006464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006468:	f004 040f 	and.w	r4, r4, #15
 800646c:	4e8e      	ldr	r6, [pc, #568]	; (80066a8 <_dtoa_r+0x5a8>)
 800646e:	b954      	cbnz	r4, 8006486 <_dtoa_r+0x386>
 8006470:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006478:	f7fa f958 	bl	800072c <__aeabi_ddiv>
 800647c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006480:	e029      	b.n	80064d6 <_dtoa_r+0x3d6>
 8006482:	2702      	movs	r7, #2
 8006484:	e7f2      	b.n	800646c <_dtoa_r+0x36c>
 8006486:	07e1      	lsls	r1, r4, #31
 8006488:	d508      	bpl.n	800649c <_dtoa_r+0x39c>
 800648a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800648e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006492:	f7fa f821 	bl	80004d8 <__aeabi_dmul>
 8006496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800649a:	3701      	adds	r7, #1
 800649c:	1064      	asrs	r4, r4, #1
 800649e:	3608      	adds	r6, #8
 80064a0:	e7e5      	b.n	800646e <_dtoa_r+0x36e>
 80064a2:	f000 80a5 	beq.w	80065f0 <_dtoa_r+0x4f0>
 80064a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064aa:	f1ca 0400 	rsb	r4, sl, #0
 80064ae:	4b7d      	ldr	r3, [pc, #500]	; (80066a4 <_dtoa_r+0x5a4>)
 80064b0:	f004 020f 	and.w	r2, r4, #15
 80064b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	f7fa f80c 	bl	80004d8 <__aeabi_dmul>
 80064c0:	2702      	movs	r7, #2
 80064c2:	2300      	movs	r3, #0
 80064c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064c8:	4e77      	ldr	r6, [pc, #476]	; (80066a8 <_dtoa_r+0x5a8>)
 80064ca:	1124      	asrs	r4, r4, #4
 80064cc:	2c00      	cmp	r4, #0
 80064ce:	f040 8084 	bne.w	80065da <_dtoa_r+0x4da>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1d2      	bne.n	800647c <_dtoa_r+0x37c>
 80064d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 808b 	beq.w	80065f4 <_dtoa_r+0x4f4>
 80064de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80064e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80064e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064ea:	2200      	movs	r2, #0
 80064ec:	4b6f      	ldr	r3, [pc, #444]	; (80066ac <_dtoa_r+0x5ac>)
 80064ee:	f7fa fa65 	bl	80009bc <__aeabi_dcmplt>
 80064f2:	2800      	cmp	r0, #0
 80064f4:	d07e      	beq.n	80065f4 <_dtoa_r+0x4f4>
 80064f6:	9b08      	ldr	r3, [sp, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d07b      	beq.n	80065f4 <_dtoa_r+0x4f4>
 80064fc:	f1b9 0f00 	cmp.w	r9, #0
 8006500:	dd38      	ble.n	8006574 <_dtoa_r+0x474>
 8006502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006506:	2200      	movs	r2, #0
 8006508:	4b69      	ldr	r3, [pc, #420]	; (80066b0 <_dtoa_r+0x5b0>)
 800650a:	f7f9 ffe5 	bl	80004d8 <__aeabi_dmul>
 800650e:	464c      	mov	r4, r9
 8006510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006514:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006518:	3701      	adds	r7, #1
 800651a:	4638      	mov	r0, r7
 800651c:	f7f9 ff72 	bl	8000404 <__aeabi_i2d>
 8006520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006524:	f7f9 ffd8 	bl	80004d8 <__aeabi_dmul>
 8006528:	2200      	movs	r2, #0
 800652a:	4b62      	ldr	r3, [pc, #392]	; (80066b4 <_dtoa_r+0x5b4>)
 800652c:	f7f9 fe1e 	bl	800016c <__adddf3>
 8006530:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006534:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006538:	9611      	str	r6, [sp, #68]	; 0x44
 800653a:	2c00      	cmp	r4, #0
 800653c:	d15d      	bne.n	80065fa <_dtoa_r+0x4fa>
 800653e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006542:	2200      	movs	r2, #0
 8006544:	4b5c      	ldr	r3, [pc, #368]	; (80066b8 <_dtoa_r+0x5b8>)
 8006546:	f7f9 fe0f 	bl	8000168 <__aeabi_dsub>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006552:	4633      	mov	r3, r6
 8006554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006556:	f7fa fa4f 	bl	80009f8 <__aeabi_dcmpgt>
 800655a:	2800      	cmp	r0, #0
 800655c:	f040 829c 	bne.w	8006a98 <_dtoa_r+0x998>
 8006560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006566:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800656a:	f7fa fa27 	bl	80009bc <__aeabi_dcmplt>
 800656e:	2800      	cmp	r0, #0
 8006570:	f040 8290 	bne.w	8006a94 <_dtoa_r+0x994>
 8006574:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006578:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800657c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800657e:	2b00      	cmp	r3, #0
 8006580:	f2c0 8152 	blt.w	8006828 <_dtoa_r+0x728>
 8006584:	f1ba 0f0e 	cmp.w	sl, #14
 8006588:	f300 814e 	bgt.w	8006828 <_dtoa_r+0x728>
 800658c:	4b45      	ldr	r3, [pc, #276]	; (80066a4 <_dtoa_r+0x5a4>)
 800658e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006596:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800659a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800659c:	2b00      	cmp	r3, #0
 800659e:	f280 80db 	bge.w	8006758 <_dtoa_r+0x658>
 80065a2:	9b08      	ldr	r3, [sp, #32]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f300 80d7 	bgt.w	8006758 <_dtoa_r+0x658>
 80065aa:	f040 8272 	bne.w	8006a92 <_dtoa_r+0x992>
 80065ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065b2:	2200      	movs	r2, #0
 80065b4:	4b40      	ldr	r3, [pc, #256]	; (80066b8 <_dtoa_r+0x5b8>)
 80065b6:	f7f9 ff8f 	bl	80004d8 <__aeabi_dmul>
 80065ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065be:	f7fa fa11 	bl	80009e4 <__aeabi_dcmpge>
 80065c2:	9c08      	ldr	r4, [sp, #32]
 80065c4:	4626      	mov	r6, r4
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f040 8248 	bne.w	8006a5c <_dtoa_r+0x95c>
 80065cc:	2331      	movs	r3, #49	; 0x31
 80065ce:	9f03      	ldr	r7, [sp, #12]
 80065d0:	f10a 0a01 	add.w	sl, sl, #1
 80065d4:	f807 3b01 	strb.w	r3, [r7], #1
 80065d8:	e244      	b.n	8006a64 <_dtoa_r+0x964>
 80065da:	07e2      	lsls	r2, r4, #31
 80065dc:	d505      	bpl.n	80065ea <_dtoa_r+0x4ea>
 80065de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065e2:	f7f9 ff79 	bl	80004d8 <__aeabi_dmul>
 80065e6:	2301      	movs	r3, #1
 80065e8:	3701      	adds	r7, #1
 80065ea:	1064      	asrs	r4, r4, #1
 80065ec:	3608      	adds	r6, #8
 80065ee:	e76d      	b.n	80064cc <_dtoa_r+0x3cc>
 80065f0:	2702      	movs	r7, #2
 80065f2:	e770      	b.n	80064d6 <_dtoa_r+0x3d6>
 80065f4:	46d0      	mov	r8, sl
 80065f6:	9c08      	ldr	r4, [sp, #32]
 80065f8:	e78f      	b.n	800651a <_dtoa_r+0x41a>
 80065fa:	9903      	ldr	r1, [sp, #12]
 80065fc:	4b29      	ldr	r3, [pc, #164]	; (80066a4 <_dtoa_r+0x5a4>)
 80065fe:	4421      	add	r1, r4
 8006600:	9112      	str	r1, [sp, #72]	; 0x48
 8006602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006608:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800660c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006610:	2900      	cmp	r1, #0
 8006612:	d055      	beq.n	80066c0 <_dtoa_r+0x5c0>
 8006614:	2000      	movs	r0, #0
 8006616:	4929      	ldr	r1, [pc, #164]	; (80066bc <_dtoa_r+0x5bc>)
 8006618:	f7fa f888 	bl	800072c <__aeabi_ddiv>
 800661c:	463b      	mov	r3, r7
 800661e:	4632      	mov	r2, r6
 8006620:	f7f9 fda2 	bl	8000168 <__aeabi_dsub>
 8006624:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006628:	9f03      	ldr	r7, [sp, #12]
 800662a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800662e:	f7fa fa03 	bl	8000a38 <__aeabi_d2iz>
 8006632:	4604      	mov	r4, r0
 8006634:	f7f9 fee6 	bl	8000404 <__aeabi_i2d>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006640:	f7f9 fd92 	bl	8000168 <__aeabi_dsub>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	3430      	adds	r4, #48	; 0x30
 800664a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800664e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006652:	f807 4b01 	strb.w	r4, [r7], #1
 8006656:	f7fa f9b1 	bl	80009bc <__aeabi_dcmplt>
 800665a:	2800      	cmp	r0, #0
 800665c:	d174      	bne.n	8006748 <_dtoa_r+0x648>
 800665e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006662:	2000      	movs	r0, #0
 8006664:	4911      	ldr	r1, [pc, #68]	; (80066ac <_dtoa_r+0x5ac>)
 8006666:	f7f9 fd7f 	bl	8000168 <__aeabi_dsub>
 800666a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800666e:	f7fa f9a5 	bl	80009bc <__aeabi_dcmplt>
 8006672:	2800      	cmp	r0, #0
 8006674:	f040 80b7 	bne.w	80067e6 <_dtoa_r+0x6e6>
 8006678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800667a:	429f      	cmp	r7, r3
 800667c:	f43f af7a 	beq.w	8006574 <_dtoa_r+0x474>
 8006680:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006684:	2200      	movs	r2, #0
 8006686:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <_dtoa_r+0x5b0>)
 8006688:	f7f9 ff26 	bl	80004d8 <__aeabi_dmul>
 800668c:	2200      	movs	r2, #0
 800668e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006696:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <_dtoa_r+0x5b0>)
 8006698:	f7f9 ff1e 	bl	80004d8 <__aeabi_dmul>
 800669c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066a0:	e7c3      	b.n	800662a <_dtoa_r+0x52a>
 80066a2:	bf00      	nop
 80066a4:	080086d8 	.word	0x080086d8
 80066a8:	080086b0 	.word	0x080086b0
 80066ac:	3ff00000 	.word	0x3ff00000
 80066b0:	40240000 	.word	0x40240000
 80066b4:	401c0000 	.word	0x401c0000
 80066b8:	40140000 	.word	0x40140000
 80066bc:	3fe00000 	.word	0x3fe00000
 80066c0:	4630      	mov	r0, r6
 80066c2:	4639      	mov	r1, r7
 80066c4:	f7f9 ff08 	bl	80004d8 <__aeabi_dmul>
 80066c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066ce:	9c03      	ldr	r4, [sp, #12]
 80066d0:	9314      	str	r3, [sp, #80]	; 0x50
 80066d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066d6:	f7fa f9af 	bl	8000a38 <__aeabi_d2iz>
 80066da:	9015      	str	r0, [sp, #84]	; 0x54
 80066dc:	f7f9 fe92 	bl	8000404 <__aeabi_i2d>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066e8:	f7f9 fd3e 	bl	8000168 <__aeabi_dsub>
 80066ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80066ee:	4606      	mov	r6, r0
 80066f0:	3330      	adds	r3, #48	; 0x30
 80066f2:	f804 3b01 	strb.w	r3, [r4], #1
 80066f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80066f8:	460f      	mov	r7, r1
 80066fa:	429c      	cmp	r4, r3
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	d124      	bne.n	800674c <_dtoa_r+0x64c>
 8006702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006706:	4bb0      	ldr	r3, [pc, #704]	; (80069c8 <_dtoa_r+0x8c8>)
 8006708:	f7f9 fd30 	bl	800016c <__adddf3>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4630      	mov	r0, r6
 8006712:	4639      	mov	r1, r7
 8006714:	f7fa f970 	bl	80009f8 <__aeabi_dcmpgt>
 8006718:	2800      	cmp	r0, #0
 800671a:	d163      	bne.n	80067e4 <_dtoa_r+0x6e4>
 800671c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006720:	2000      	movs	r0, #0
 8006722:	49a9      	ldr	r1, [pc, #676]	; (80069c8 <_dtoa_r+0x8c8>)
 8006724:	f7f9 fd20 	bl	8000168 <__aeabi_dsub>
 8006728:	4602      	mov	r2, r0
 800672a:	460b      	mov	r3, r1
 800672c:	4630      	mov	r0, r6
 800672e:	4639      	mov	r1, r7
 8006730:	f7fa f944 	bl	80009bc <__aeabi_dcmplt>
 8006734:	2800      	cmp	r0, #0
 8006736:	f43f af1d 	beq.w	8006574 <_dtoa_r+0x474>
 800673a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800673c:	1e7b      	subs	r3, r7, #1
 800673e:	9314      	str	r3, [sp, #80]	; 0x50
 8006740:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d0f8      	beq.n	800673a <_dtoa_r+0x63a>
 8006748:	46c2      	mov	sl, r8
 800674a:	e03b      	b.n	80067c4 <_dtoa_r+0x6c4>
 800674c:	4b9f      	ldr	r3, [pc, #636]	; (80069cc <_dtoa_r+0x8cc>)
 800674e:	f7f9 fec3 	bl	80004d8 <__aeabi_dmul>
 8006752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006756:	e7bc      	b.n	80066d2 <_dtoa_r+0x5d2>
 8006758:	9f03      	ldr	r7, [sp, #12]
 800675a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800675e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006762:	4640      	mov	r0, r8
 8006764:	4649      	mov	r1, r9
 8006766:	f7f9 ffe1 	bl	800072c <__aeabi_ddiv>
 800676a:	f7fa f965 	bl	8000a38 <__aeabi_d2iz>
 800676e:	4604      	mov	r4, r0
 8006770:	f7f9 fe48 	bl	8000404 <__aeabi_i2d>
 8006774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006778:	f7f9 feae 	bl	80004d8 <__aeabi_dmul>
 800677c:	4602      	mov	r2, r0
 800677e:	460b      	mov	r3, r1
 8006780:	4640      	mov	r0, r8
 8006782:	4649      	mov	r1, r9
 8006784:	f7f9 fcf0 	bl	8000168 <__aeabi_dsub>
 8006788:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800678c:	f807 6b01 	strb.w	r6, [r7], #1
 8006790:	9e03      	ldr	r6, [sp, #12]
 8006792:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006796:	1bbe      	subs	r6, r7, r6
 8006798:	45b4      	cmp	ip, r6
 800679a:	4602      	mov	r2, r0
 800679c:	460b      	mov	r3, r1
 800679e:	d136      	bne.n	800680e <_dtoa_r+0x70e>
 80067a0:	f7f9 fce4 	bl	800016c <__adddf3>
 80067a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067a8:	4680      	mov	r8, r0
 80067aa:	4689      	mov	r9, r1
 80067ac:	f7fa f924 	bl	80009f8 <__aeabi_dcmpgt>
 80067b0:	bb58      	cbnz	r0, 800680a <_dtoa_r+0x70a>
 80067b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067b6:	4640      	mov	r0, r8
 80067b8:	4649      	mov	r1, r9
 80067ba:	f7fa f8f5 	bl	80009a8 <__aeabi_dcmpeq>
 80067be:	b108      	cbz	r0, 80067c4 <_dtoa_r+0x6c4>
 80067c0:	07e1      	lsls	r1, r4, #31
 80067c2:	d422      	bmi.n	800680a <_dtoa_r+0x70a>
 80067c4:	4628      	mov	r0, r5
 80067c6:	4659      	mov	r1, fp
 80067c8:	f000 faf0 	bl	8006dac <_Bfree>
 80067cc:	2300      	movs	r3, #0
 80067ce:	703b      	strb	r3, [r7, #0]
 80067d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067d2:	f10a 0001 	add.w	r0, sl, #1
 80067d6:	6018      	str	r0, [r3, #0]
 80067d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f43f acde 	beq.w	800619c <_dtoa_r+0x9c>
 80067e0:	601f      	str	r7, [r3, #0]
 80067e2:	e4db      	b.n	800619c <_dtoa_r+0x9c>
 80067e4:	4627      	mov	r7, r4
 80067e6:	463b      	mov	r3, r7
 80067e8:	461f      	mov	r7, r3
 80067ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ee:	2a39      	cmp	r2, #57	; 0x39
 80067f0:	d107      	bne.n	8006802 <_dtoa_r+0x702>
 80067f2:	9a03      	ldr	r2, [sp, #12]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d1f7      	bne.n	80067e8 <_dtoa_r+0x6e8>
 80067f8:	2230      	movs	r2, #48	; 0x30
 80067fa:	9903      	ldr	r1, [sp, #12]
 80067fc:	f108 0801 	add.w	r8, r8, #1
 8006800:	700a      	strb	r2, [r1, #0]
 8006802:	781a      	ldrb	r2, [r3, #0]
 8006804:	3201      	adds	r2, #1
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e79e      	b.n	8006748 <_dtoa_r+0x648>
 800680a:	46d0      	mov	r8, sl
 800680c:	e7eb      	b.n	80067e6 <_dtoa_r+0x6e6>
 800680e:	2200      	movs	r2, #0
 8006810:	4b6e      	ldr	r3, [pc, #440]	; (80069cc <_dtoa_r+0x8cc>)
 8006812:	f7f9 fe61 	bl	80004d8 <__aeabi_dmul>
 8006816:	2200      	movs	r2, #0
 8006818:	2300      	movs	r3, #0
 800681a:	4680      	mov	r8, r0
 800681c:	4689      	mov	r9, r1
 800681e:	f7fa f8c3 	bl	80009a8 <__aeabi_dcmpeq>
 8006822:	2800      	cmp	r0, #0
 8006824:	d09b      	beq.n	800675e <_dtoa_r+0x65e>
 8006826:	e7cd      	b.n	80067c4 <_dtoa_r+0x6c4>
 8006828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800682a:	2a00      	cmp	r2, #0
 800682c:	f000 80d0 	beq.w	80069d0 <_dtoa_r+0x8d0>
 8006830:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006832:	2a01      	cmp	r2, #1
 8006834:	f300 80ae 	bgt.w	8006994 <_dtoa_r+0x894>
 8006838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800683a:	2a00      	cmp	r2, #0
 800683c:	f000 80a6 	beq.w	800698c <_dtoa_r+0x88c>
 8006840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006846:	9f06      	ldr	r7, [sp, #24]
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	2101      	movs	r1, #1
 800684c:	441a      	add	r2, r3
 800684e:	9206      	str	r2, [sp, #24]
 8006850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006852:	4628      	mov	r0, r5
 8006854:	441a      	add	r2, r3
 8006856:	9209      	str	r2, [sp, #36]	; 0x24
 8006858:	f000 fb5e 	bl	8006f18 <__i2b>
 800685c:	4606      	mov	r6, r0
 800685e:	2f00      	cmp	r7, #0
 8006860:	dd0c      	ble.n	800687c <_dtoa_r+0x77c>
 8006862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd09      	ble.n	800687c <_dtoa_r+0x77c>
 8006868:	42bb      	cmp	r3, r7
 800686a:	bfa8      	it	ge
 800686c:	463b      	movge	r3, r7
 800686e:	9a06      	ldr	r2, [sp, #24]
 8006870:	1aff      	subs	r7, r7, r3
 8006872:	1ad2      	subs	r2, r2, r3
 8006874:	9206      	str	r2, [sp, #24]
 8006876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	9309      	str	r3, [sp, #36]	; 0x24
 800687c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800687e:	b1f3      	cbz	r3, 80068be <_dtoa_r+0x7be>
 8006880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a8 	beq.w	80069d8 <_dtoa_r+0x8d8>
 8006888:	2c00      	cmp	r4, #0
 800688a:	dd10      	ble.n	80068ae <_dtoa_r+0x7ae>
 800688c:	4631      	mov	r1, r6
 800688e:	4622      	mov	r2, r4
 8006890:	4628      	mov	r0, r5
 8006892:	f000 fbff 	bl	8007094 <__pow5mult>
 8006896:	465a      	mov	r2, fp
 8006898:	4601      	mov	r1, r0
 800689a:	4606      	mov	r6, r0
 800689c:	4628      	mov	r0, r5
 800689e:	f000 fb51 	bl	8006f44 <__multiply>
 80068a2:	4680      	mov	r8, r0
 80068a4:	4659      	mov	r1, fp
 80068a6:	4628      	mov	r0, r5
 80068a8:	f000 fa80 	bl	8006dac <_Bfree>
 80068ac:	46c3      	mov	fp, r8
 80068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b0:	1b1a      	subs	r2, r3, r4
 80068b2:	d004      	beq.n	80068be <_dtoa_r+0x7be>
 80068b4:	4659      	mov	r1, fp
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fbec 	bl	8007094 <__pow5mult>
 80068bc:	4683      	mov	fp, r0
 80068be:	2101      	movs	r1, #1
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 fb29 	bl	8006f18 <__i2b>
 80068c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068c8:	4604      	mov	r4, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f340 8086 	ble.w	80069dc <_dtoa_r+0x8dc>
 80068d0:	461a      	mov	r2, r3
 80068d2:	4601      	mov	r1, r0
 80068d4:	4628      	mov	r0, r5
 80068d6:	f000 fbdd 	bl	8007094 <__pow5mult>
 80068da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068dc:	4604      	mov	r4, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	dd7f      	ble.n	80069e2 <_dtoa_r+0x8e2>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068ec:	6918      	ldr	r0, [r3, #16]
 80068ee:	f000 fac5 	bl	8006e7c <__hi0bits>
 80068f2:	f1c0 0020 	rsb	r0, r0, #32
 80068f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f8:	4418      	add	r0, r3
 80068fa:	f010 001f 	ands.w	r0, r0, #31
 80068fe:	f000 8092 	beq.w	8006a26 <_dtoa_r+0x926>
 8006902:	f1c0 0320 	rsb	r3, r0, #32
 8006906:	2b04      	cmp	r3, #4
 8006908:	f340 808a 	ble.w	8006a20 <_dtoa_r+0x920>
 800690c:	f1c0 001c 	rsb	r0, r0, #28
 8006910:	9b06      	ldr	r3, [sp, #24]
 8006912:	4407      	add	r7, r0
 8006914:	4403      	add	r3, r0
 8006916:	9306      	str	r3, [sp, #24]
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	4403      	add	r3, r0
 800691c:	9309      	str	r3, [sp, #36]	; 0x24
 800691e:	9b06      	ldr	r3, [sp, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	dd05      	ble.n	8006930 <_dtoa_r+0x830>
 8006924:	4659      	mov	r1, fp
 8006926:	461a      	mov	r2, r3
 8006928:	4628      	mov	r0, r5
 800692a:	f000 fc0d 	bl	8007148 <__lshift>
 800692e:	4683      	mov	fp, r0
 8006930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006932:	2b00      	cmp	r3, #0
 8006934:	dd05      	ble.n	8006942 <_dtoa_r+0x842>
 8006936:	4621      	mov	r1, r4
 8006938:	461a      	mov	r2, r3
 800693a:	4628      	mov	r0, r5
 800693c:	f000 fc04 	bl	8007148 <__lshift>
 8006940:	4604      	mov	r4, r0
 8006942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006944:	2b00      	cmp	r3, #0
 8006946:	d070      	beq.n	8006a2a <_dtoa_r+0x92a>
 8006948:	4621      	mov	r1, r4
 800694a:	4658      	mov	r0, fp
 800694c:	f000 fc6c 	bl	8007228 <__mcmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	da6a      	bge.n	8006a2a <_dtoa_r+0x92a>
 8006954:	2300      	movs	r3, #0
 8006956:	4659      	mov	r1, fp
 8006958:	220a      	movs	r2, #10
 800695a:	4628      	mov	r0, r5
 800695c:	f000 fa48 	bl	8006df0 <__multadd>
 8006960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006962:	4683      	mov	fp, r0
 8006964:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8194 	beq.w	8006c96 <_dtoa_r+0xb96>
 800696e:	4631      	mov	r1, r6
 8006970:	2300      	movs	r3, #0
 8006972:	220a      	movs	r2, #10
 8006974:	4628      	mov	r0, r5
 8006976:	f000 fa3b 	bl	8006df0 <__multadd>
 800697a:	f1b9 0f00 	cmp.w	r9, #0
 800697e:	4606      	mov	r6, r0
 8006980:	f300 8093 	bgt.w	8006aaa <_dtoa_r+0x9aa>
 8006984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006986:	2b02      	cmp	r3, #2
 8006988:	dc57      	bgt.n	8006a3a <_dtoa_r+0x93a>
 800698a:	e08e      	b.n	8006aaa <_dtoa_r+0x9aa>
 800698c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800698e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006992:	e757      	b.n	8006844 <_dtoa_r+0x744>
 8006994:	9b08      	ldr	r3, [sp, #32]
 8006996:	1e5c      	subs	r4, r3, #1
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	42a3      	cmp	r3, r4
 800699c:	bfb7      	itett	lt
 800699e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069a0:	1b1c      	subge	r4, r3, r4
 80069a2:	1ae2      	sublt	r2, r4, r3
 80069a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80069a6:	bfbe      	ittt	lt
 80069a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80069aa:	189b      	addlt	r3, r3, r2
 80069ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80069ae:	9b08      	ldr	r3, [sp, #32]
 80069b0:	bfb8      	it	lt
 80069b2:	2400      	movlt	r4, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bfbb      	ittet	lt
 80069b8:	9b06      	ldrlt	r3, [sp, #24]
 80069ba:	9a08      	ldrlt	r2, [sp, #32]
 80069bc:	9f06      	ldrge	r7, [sp, #24]
 80069be:	1a9f      	sublt	r7, r3, r2
 80069c0:	bfac      	ite	ge
 80069c2:	9b08      	ldrge	r3, [sp, #32]
 80069c4:	2300      	movlt	r3, #0
 80069c6:	e73f      	b.n	8006848 <_dtoa_r+0x748>
 80069c8:	3fe00000 	.word	0x3fe00000
 80069cc:	40240000 	.word	0x40240000
 80069d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80069d2:	9f06      	ldr	r7, [sp, #24]
 80069d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80069d6:	e742      	b.n	800685e <_dtoa_r+0x75e>
 80069d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069da:	e76b      	b.n	80068b4 <_dtoa_r+0x7b4>
 80069dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069de:	2b01      	cmp	r3, #1
 80069e0:	dc19      	bgt.n	8006a16 <_dtoa_r+0x916>
 80069e2:	9b04      	ldr	r3, [sp, #16]
 80069e4:	b9bb      	cbnz	r3, 8006a16 <_dtoa_r+0x916>
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069ec:	b99b      	cbnz	r3, 8006a16 <_dtoa_r+0x916>
 80069ee:	9b05      	ldr	r3, [sp, #20]
 80069f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	0d1b      	lsrs	r3, r3, #20
 80069f6:	051b      	lsls	r3, r3, #20
 80069f8:	b183      	cbz	r3, 8006a1c <_dtoa_r+0x91c>
 80069fa:	f04f 0801 	mov.w	r8, #1
 80069fe:	9b06      	ldr	r3, [sp, #24]
 8006a00:	3301      	adds	r3, #1
 8006a02:	9306      	str	r3, [sp, #24]
 8006a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a06:	3301      	adds	r3, #1
 8006a08:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f47f af6a 	bne.w	80068e6 <_dtoa_r+0x7e6>
 8006a12:	2001      	movs	r0, #1
 8006a14:	e76f      	b.n	80068f6 <_dtoa_r+0x7f6>
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	e7f6      	b.n	8006a0a <_dtoa_r+0x90a>
 8006a1c:	4698      	mov	r8, r3
 8006a1e:	e7f4      	b.n	8006a0a <_dtoa_r+0x90a>
 8006a20:	f43f af7d 	beq.w	800691e <_dtoa_r+0x81e>
 8006a24:	4618      	mov	r0, r3
 8006a26:	301c      	adds	r0, #28
 8006a28:	e772      	b.n	8006910 <_dtoa_r+0x810>
 8006a2a:	9b08      	ldr	r3, [sp, #32]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc36      	bgt.n	8006a9e <_dtoa_r+0x99e>
 8006a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	dd33      	ble.n	8006a9e <_dtoa_r+0x99e>
 8006a36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a3a:	f1b9 0f00 	cmp.w	r9, #0
 8006a3e:	d10d      	bne.n	8006a5c <_dtoa_r+0x95c>
 8006a40:	4621      	mov	r1, r4
 8006a42:	464b      	mov	r3, r9
 8006a44:	2205      	movs	r2, #5
 8006a46:	4628      	mov	r0, r5
 8006a48:	f000 f9d2 	bl	8006df0 <__multadd>
 8006a4c:	4601      	mov	r1, r0
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4658      	mov	r0, fp
 8006a52:	f000 fbe9 	bl	8007228 <__mcmp>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f73f adb8 	bgt.w	80065cc <_dtoa_r+0x4cc>
 8006a5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a5e:	9f03      	ldr	r7, [sp, #12]
 8006a60:	ea6f 0a03 	mvn.w	sl, r3
 8006a64:	f04f 0800 	mov.w	r8, #0
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	f000 f99e 	bl	8006dac <_Bfree>
 8006a70:	2e00      	cmp	r6, #0
 8006a72:	f43f aea7 	beq.w	80067c4 <_dtoa_r+0x6c4>
 8006a76:	f1b8 0f00 	cmp.w	r8, #0
 8006a7a:	d005      	beq.n	8006a88 <_dtoa_r+0x988>
 8006a7c:	45b0      	cmp	r8, r6
 8006a7e:	d003      	beq.n	8006a88 <_dtoa_r+0x988>
 8006a80:	4641      	mov	r1, r8
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 f992 	bl	8006dac <_Bfree>
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f000 f98e 	bl	8006dac <_Bfree>
 8006a90:	e698      	b.n	80067c4 <_dtoa_r+0x6c4>
 8006a92:	2400      	movs	r4, #0
 8006a94:	4626      	mov	r6, r4
 8006a96:	e7e1      	b.n	8006a5c <_dtoa_r+0x95c>
 8006a98:	46c2      	mov	sl, r8
 8006a9a:	4626      	mov	r6, r4
 8006a9c:	e596      	b.n	80065cc <_dtoa_r+0x4cc>
 8006a9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 80fd 	beq.w	8006ca4 <_dtoa_r+0xba4>
 8006aaa:	2f00      	cmp	r7, #0
 8006aac:	dd05      	ble.n	8006aba <_dtoa_r+0x9ba>
 8006aae:	4631      	mov	r1, r6
 8006ab0:	463a      	mov	r2, r7
 8006ab2:	4628      	mov	r0, r5
 8006ab4:	f000 fb48 	bl	8007148 <__lshift>
 8006ab8:	4606      	mov	r6, r0
 8006aba:	f1b8 0f00 	cmp.w	r8, #0
 8006abe:	d05c      	beq.n	8006b7a <_dtoa_r+0xa7a>
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	6871      	ldr	r1, [r6, #4]
 8006ac4:	f000 f932 	bl	8006d2c <_Balloc>
 8006ac8:	4607      	mov	r7, r0
 8006aca:	b928      	cbnz	r0, 8006ad8 <_dtoa_r+0x9d8>
 8006acc:	4602      	mov	r2, r0
 8006ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ad2:	4b7f      	ldr	r3, [pc, #508]	; (8006cd0 <_dtoa_r+0xbd0>)
 8006ad4:	f7ff bb28 	b.w	8006128 <_dtoa_r+0x28>
 8006ad8:	6932      	ldr	r2, [r6, #16]
 8006ada:	f106 010c 	add.w	r1, r6, #12
 8006ade:	3202      	adds	r2, #2
 8006ae0:	0092      	lsls	r2, r2, #2
 8006ae2:	300c      	adds	r0, #12
 8006ae4:	f000 f914 	bl	8006d10 <memcpy>
 8006ae8:	2201      	movs	r2, #1
 8006aea:	4639      	mov	r1, r7
 8006aec:	4628      	mov	r0, r5
 8006aee:	f000 fb2b 	bl	8007148 <__lshift>
 8006af2:	46b0      	mov	r8, r6
 8006af4:	4606      	mov	r6, r0
 8006af6:	9b03      	ldr	r3, [sp, #12]
 8006af8:	3301      	adds	r3, #1
 8006afa:	9308      	str	r3, [sp, #32]
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	444b      	add	r3, r9
 8006b00:	930a      	str	r3, [sp, #40]	; 0x28
 8006b02:	9b04      	ldr	r3, [sp, #16]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	4621      	mov	r1, r4
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	4658      	mov	r0, fp
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	f7ff fa66 	bl	8005fe4 <quorem>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	4641      	mov	r1, r8
 8006b1c:	3330      	adds	r3, #48	; 0x30
 8006b1e:	9006      	str	r0, [sp, #24]
 8006b20:	4658      	mov	r0, fp
 8006b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b24:	f000 fb80 	bl	8007228 <__mcmp>
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4681      	mov	r9, r0
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fb96 	bl	8007260 <__mdiff>
 8006b34:	68c2      	ldr	r2, [r0, #12]
 8006b36:	4607      	mov	r7, r0
 8006b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b3a:	bb02      	cbnz	r2, 8006b7e <_dtoa_r+0xa7e>
 8006b3c:	4601      	mov	r1, r0
 8006b3e:	4658      	mov	r0, fp
 8006b40:	f000 fb72 	bl	8007228 <__mcmp>
 8006b44:	4602      	mov	r2, r0
 8006b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006b50:	f000 f92c 	bl	8006dac <_Bfree>
 8006b54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b58:	9f08      	ldr	r7, [sp, #32]
 8006b5a:	ea43 0102 	orr.w	r1, r3, r2
 8006b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b60:	430b      	orrs	r3, r1
 8006b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b64:	d10d      	bne.n	8006b82 <_dtoa_r+0xa82>
 8006b66:	2b39      	cmp	r3, #57	; 0x39
 8006b68:	d029      	beq.n	8006bbe <_dtoa_r+0xabe>
 8006b6a:	f1b9 0f00 	cmp.w	r9, #0
 8006b6e:	dd01      	ble.n	8006b74 <_dtoa_r+0xa74>
 8006b70:	9b06      	ldr	r3, [sp, #24]
 8006b72:	3331      	adds	r3, #49	; 0x31
 8006b74:	9a04      	ldr	r2, [sp, #16]
 8006b76:	7013      	strb	r3, [r2, #0]
 8006b78:	e776      	b.n	8006a68 <_dtoa_r+0x968>
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	e7b9      	b.n	8006af2 <_dtoa_r+0x9f2>
 8006b7e:	2201      	movs	r2, #1
 8006b80:	e7e2      	b.n	8006b48 <_dtoa_r+0xa48>
 8006b82:	f1b9 0f00 	cmp.w	r9, #0
 8006b86:	db06      	blt.n	8006b96 <_dtoa_r+0xa96>
 8006b88:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006b8a:	ea41 0909 	orr.w	r9, r1, r9
 8006b8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b90:	ea59 0101 	orrs.w	r1, r9, r1
 8006b94:	d120      	bne.n	8006bd8 <_dtoa_r+0xad8>
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	ddec      	ble.n	8006b74 <_dtoa_r+0xa74>
 8006b9a:	4659      	mov	r1, fp
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	f000 fad1 	bl	8007148 <__lshift>
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4683      	mov	fp, r0
 8006baa:	f000 fb3d 	bl	8007228 <__mcmp>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	dc02      	bgt.n	8006bba <_dtoa_r+0xaba>
 8006bb4:	d1de      	bne.n	8006b74 <_dtoa_r+0xa74>
 8006bb6:	07da      	lsls	r2, r3, #31
 8006bb8:	d5dc      	bpl.n	8006b74 <_dtoa_r+0xa74>
 8006bba:	2b39      	cmp	r3, #57	; 0x39
 8006bbc:	d1d8      	bne.n	8006b70 <_dtoa_r+0xa70>
 8006bbe:	2339      	movs	r3, #57	; 0x39
 8006bc0:	9a04      	ldr	r2, [sp, #16]
 8006bc2:	7013      	strb	r3, [r2, #0]
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	461f      	mov	r7, r3
 8006bc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	2a39      	cmp	r2, #57	; 0x39
 8006bd0:	d050      	beq.n	8006c74 <_dtoa_r+0xb74>
 8006bd2:	3201      	adds	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e747      	b.n	8006a68 <_dtoa_r+0x968>
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	dd03      	ble.n	8006be4 <_dtoa_r+0xae4>
 8006bdc:	2b39      	cmp	r3, #57	; 0x39
 8006bde:	d0ee      	beq.n	8006bbe <_dtoa_r+0xabe>
 8006be0:	3301      	adds	r3, #1
 8006be2:	e7c7      	b.n	8006b74 <_dtoa_r+0xa74>
 8006be4:	9a08      	ldr	r2, [sp, #32]
 8006be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006be8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006bec:	428a      	cmp	r2, r1
 8006bee:	d02a      	beq.n	8006c46 <_dtoa_r+0xb46>
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	220a      	movs	r2, #10
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	f000 f8fa 	bl	8006df0 <__multadd>
 8006bfc:	45b0      	cmp	r8, r6
 8006bfe:	4683      	mov	fp, r0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	f04f 020a 	mov.w	r2, #10
 8006c08:	4641      	mov	r1, r8
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	d107      	bne.n	8006c1e <_dtoa_r+0xb1e>
 8006c0e:	f000 f8ef 	bl	8006df0 <__multadd>
 8006c12:	4680      	mov	r8, r0
 8006c14:	4606      	mov	r6, r0
 8006c16:	9b08      	ldr	r3, [sp, #32]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	9308      	str	r3, [sp, #32]
 8006c1c:	e775      	b.n	8006b0a <_dtoa_r+0xa0a>
 8006c1e:	f000 f8e7 	bl	8006df0 <__multadd>
 8006c22:	4631      	mov	r1, r6
 8006c24:	4680      	mov	r8, r0
 8006c26:	2300      	movs	r3, #0
 8006c28:	220a      	movs	r2, #10
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f8e0 	bl	8006df0 <__multadd>
 8006c30:	4606      	mov	r6, r0
 8006c32:	e7f0      	b.n	8006c16 <_dtoa_r+0xb16>
 8006c34:	f1b9 0f00 	cmp.w	r9, #0
 8006c38:	bfcc      	ite	gt
 8006c3a:	464f      	movgt	r7, r9
 8006c3c:	2701      	movle	r7, #1
 8006c3e:	f04f 0800 	mov.w	r8, #0
 8006c42:	9a03      	ldr	r2, [sp, #12]
 8006c44:	4417      	add	r7, r2
 8006c46:	4659      	mov	r1, fp
 8006c48:	2201      	movs	r2, #1
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	9308      	str	r3, [sp, #32]
 8006c4e:	f000 fa7b 	bl	8007148 <__lshift>
 8006c52:	4621      	mov	r1, r4
 8006c54:	4683      	mov	fp, r0
 8006c56:	f000 fae7 	bl	8007228 <__mcmp>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	dcb2      	bgt.n	8006bc4 <_dtoa_r+0xac4>
 8006c5e:	d102      	bne.n	8006c66 <_dtoa_r+0xb66>
 8006c60:	9b08      	ldr	r3, [sp, #32]
 8006c62:	07db      	lsls	r3, r3, #31
 8006c64:	d4ae      	bmi.n	8006bc4 <_dtoa_r+0xac4>
 8006c66:	463b      	mov	r3, r7
 8006c68:	461f      	mov	r7, r3
 8006c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c6e:	2a30      	cmp	r2, #48	; 0x30
 8006c70:	d0fa      	beq.n	8006c68 <_dtoa_r+0xb68>
 8006c72:	e6f9      	b.n	8006a68 <_dtoa_r+0x968>
 8006c74:	9a03      	ldr	r2, [sp, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d1a5      	bne.n	8006bc6 <_dtoa_r+0xac6>
 8006c7a:	2331      	movs	r3, #49	; 0x31
 8006c7c:	f10a 0a01 	add.w	sl, sl, #1
 8006c80:	e779      	b.n	8006b76 <_dtoa_r+0xa76>
 8006c82:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <_dtoa_r+0xbd4>)
 8006c84:	f7ff baa8 	b.w	80061d8 <_dtoa_r+0xd8>
 8006c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f47f aa81 	bne.w	8006192 <_dtoa_r+0x92>
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <_dtoa_r+0xbd8>)
 8006c92:	f7ff baa1 	b.w	80061d8 <_dtoa_r+0xd8>
 8006c96:	f1b9 0f00 	cmp.w	r9, #0
 8006c9a:	dc03      	bgt.n	8006ca4 <_dtoa_r+0xba4>
 8006c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	f73f aecb 	bgt.w	8006a3a <_dtoa_r+0x93a>
 8006ca4:	9f03      	ldr	r7, [sp, #12]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4658      	mov	r0, fp
 8006caa:	f7ff f99b 	bl	8005fe4 <quorem>
 8006cae:	9a03      	ldr	r2, [sp, #12]
 8006cb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006cb4:	f807 3b01 	strb.w	r3, [r7], #1
 8006cb8:	1aba      	subs	r2, r7, r2
 8006cba:	4591      	cmp	r9, r2
 8006cbc:	ddba      	ble.n	8006c34 <_dtoa_r+0xb34>
 8006cbe:	4659      	mov	r1, fp
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	220a      	movs	r2, #10
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 f893 	bl	8006df0 <__multadd>
 8006cca:	4683      	mov	fp, r0
 8006ccc:	e7eb      	b.n	8006ca6 <_dtoa_r+0xba6>
 8006cce:	bf00      	nop
 8006cd0:	08008643 	.word	0x08008643
 8006cd4:	080085a0 	.word	0x080085a0
 8006cd8:	080085c4 	.word	0x080085c4

08006cdc <_localeconv_r>:
 8006cdc:	4800      	ldr	r0, [pc, #0]	; (8006ce0 <_localeconv_r+0x4>)
 8006cde:	4770      	bx	lr
 8006ce0:	20000164 	.word	0x20000164

08006ce4 <malloc>:
 8006ce4:	4b02      	ldr	r3, [pc, #8]	; (8006cf0 <malloc+0xc>)
 8006ce6:	4601      	mov	r1, r0
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	f000 bc1d 	b.w	8007528 <_malloc_r>
 8006cee:	bf00      	nop
 8006cf0:	20000010 	.word	0x20000010

08006cf4 <memchr>:
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	b2c9      	uxtb	r1, r1
 8006cfa:	4402      	add	r2, r0
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	d101      	bne.n	8006d06 <memchr+0x12>
 8006d02:	2000      	movs	r0, #0
 8006d04:	e003      	b.n	8006d0e <memchr+0x1a>
 8006d06:	7804      	ldrb	r4, [r0, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	428c      	cmp	r4, r1
 8006d0c:	d1f6      	bne.n	8006cfc <memchr+0x8>
 8006d0e:	bd10      	pop	{r4, pc}

08006d10 <memcpy>:
 8006d10:	440a      	add	r2, r1
 8006d12:	4291      	cmp	r1, r2
 8006d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d18:	d100      	bne.n	8006d1c <memcpy+0xc>
 8006d1a:	4770      	bx	lr
 8006d1c:	b510      	push	{r4, lr}
 8006d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d22:	4291      	cmp	r1, r2
 8006d24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d28:	d1f9      	bne.n	8006d1e <memcpy+0xe>
 8006d2a:	bd10      	pop	{r4, pc}

08006d2c <_Balloc>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d30:	4604      	mov	r4, r0
 8006d32:	460d      	mov	r5, r1
 8006d34:	b976      	cbnz	r6, 8006d54 <_Balloc+0x28>
 8006d36:	2010      	movs	r0, #16
 8006d38:	f7ff ffd4 	bl	8006ce4 <malloc>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	6260      	str	r0, [r4, #36]	; 0x24
 8006d40:	b920      	cbnz	r0, 8006d4c <_Balloc+0x20>
 8006d42:	2166      	movs	r1, #102	; 0x66
 8006d44:	4b17      	ldr	r3, [pc, #92]	; (8006da4 <_Balloc+0x78>)
 8006d46:	4818      	ldr	r0, [pc, #96]	; (8006da8 <_Balloc+0x7c>)
 8006d48:	f000 fdce 	bl	80078e8 <__assert_func>
 8006d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d50:	6006      	str	r6, [r0, #0]
 8006d52:	60c6      	str	r6, [r0, #12]
 8006d54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d56:	68f3      	ldr	r3, [r6, #12]
 8006d58:	b183      	cbz	r3, 8006d7c <_Balloc+0x50>
 8006d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d62:	b9b8      	cbnz	r0, 8006d94 <_Balloc+0x68>
 8006d64:	2101      	movs	r1, #1
 8006d66:	fa01 f605 	lsl.w	r6, r1, r5
 8006d6a:	1d72      	adds	r2, r6, #5
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	0092      	lsls	r2, r2, #2
 8006d70:	f000 fb5e 	bl	8007430 <_calloc_r>
 8006d74:	b160      	cbz	r0, 8006d90 <_Balloc+0x64>
 8006d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d7a:	e00e      	b.n	8006d9a <_Balloc+0x6e>
 8006d7c:	2221      	movs	r2, #33	; 0x21
 8006d7e:	2104      	movs	r1, #4
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 fb55 	bl	8007430 <_calloc_r>
 8006d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d88:	60f0      	str	r0, [r6, #12]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e4      	bne.n	8006d5a <_Balloc+0x2e>
 8006d90:	2000      	movs	r0, #0
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	6802      	ldr	r2, [r0, #0]
 8006d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006da0:	e7f7      	b.n	8006d92 <_Balloc+0x66>
 8006da2:	bf00      	nop
 8006da4:	080085d1 	.word	0x080085d1
 8006da8:	08008654 	.word	0x08008654

08006dac <_Bfree>:
 8006dac:	b570      	push	{r4, r5, r6, lr}
 8006dae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006db0:	4605      	mov	r5, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	b976      	cbnz	r6, 8006dd4 <_Bfree+0x28>
 8006db6:	2010      	movs	r0, #16
 8006db8:	f7ff ff94 	bl	8006ce4 <malloc>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6268      	str	r0, [r5, #36]	; 0x24
 8006dc0:	b920      	cbnz	r0, 8006dcc <_Bfree+0x20>
 8006dc2:	218a      	movs	r1, #138	; 0x8a
 8006dc4:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <_Bfree+0x3c>)
 8006dc6:	4809      	ldr	r0, [pc, #36]	; (8006dec <_Bfree+0x40>)
 8006dc8:	f000 fd8e 	bl	80078e8 <__assert_func>
 8006dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dd0:	6006      	str	r6, [r0, #0]
 8006dd2:	60c6      	str	r6, [r0, #12]
 8006dd4:	b13c      	cbz	r4, 8006de6 <_Bfree+0x3a>
 8006dd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dd8:	6862      	ldr	r2, [r4, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006de0:	6021      	str	r1, [r4, #0]
 8006de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	080085d1 	.word	0x080085d1
 8006dec:	08008654 	.word	0x08008654

08006df0 <__multadd>:
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	4607      	mov	r7, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	461e      	mov	r6, r3
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	690d      	ldr	r5, [r1, #16]
 8006dfe:	f101 0c14 	add.w	ip, r1, #20
 8006e02:	f8dc 3000 	ldr.w	r3, [ip]
 8006e06:	3001      	adds	r0, #1
 8006e08:	b299      	uxth	r1, r3
 8006e0a:	fb02 6101 	mla	r1, r2, r1, r6
 8006e0e:	0c1e      	lsrs	r6, r3, #16
 8006e10:	0c0b      	lsrs	r3, r1, #16
 8006e12:	fb02 3306 	mla	r3, r2, r6, r3
 8006e16:	b289      	uxth	r1, r1
 8006e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e1c:	4285      	cmp	r5, r0
 8006e1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e22:	f84c 1b04 	str.w	r1, [ip], #4
 8006e26:	dcec      	bgt.n	8006e02 <__multadd+0x12>
 8006e28:	b30e      	cbz	r6, 8006e6e <__multadd+0x7e>
 8006e2a:	68a3      	ldr	r3, [r4, #8]
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dc19      	bgt.n	8006e64 <__multadd+0x74>
 8006e30:	6861      	ldr	r1, [r4, #4]
 8006e32:	4638      	mov	r0, r7
 8006e34:	3101      	adds	r1, #1
 8006e36:	f7ff ff79 	bl	8006d2c <_Balloc>
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	b928      	cbnz	r0, 8006e4a <__multadd+0x5a>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	21b5      	movs	r1, #181	; 0xb5
 8006e42:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <__multadd+0x84>)
 8006e44:	480c      	ldr	r0, [pc, #48]	; (8006e78 <__multadd+0x88>)
 8006e46:	f000 fd4f 	bl	80078e8 <__assert_func>
 8006e4a:	6922      	ldr	r2, [r4, #16]
 8006e4c:	f104 010c 	add.w	r1, r4, #12
 8006e50:	3202      	adds	r2, #2
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	300c      	adds	r0, #12
 8006e56:	f7ff ff5b 	bl	8006d10 <memcpy>
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	f7ff ffa5 	bl	8006dac <_Bfree>
 8006e62:	4644      	mov	r4, r8
 8006e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e68:	3501      	adds	r5, #1
 8006e6a:	615e      	str	r6, [r3, #20]
 8006e6c:	6125      	str	r5, [r4, #16]
 8006e6e:	4620      	mov	r0, r4
 8006e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e74:	08008643 	.word	0x08008643
 8006e78:	08008654 	.word	0x08008654

08006e7c <__hi0bits>:
 8006e7c:	0c02      	lsrs	r2, r0, #16
 8006e7e:	0412      	lsls	r2, r2, #16
 8006e80:	4603      	mov	r3, r0
 8006e82:	b9ca      	cbnz	r2, 8006eb8 <__hi0bits+0x3c>
 8006e84:	0403      	lsls	r3, r0, #16
 8006e86:	2010      	movs	r0, #16
 8006e88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006e8c:	bf04      	itt	eq
 8006e8e:	021b      	lsleq	r3, r3, #8
 8006e90:	3008      	addeq	r0, #8
 8006e92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006e96:	bf04      	itt	eq
 8006e98:	011b      	lsleq	r3, r3, #4
 8006e9a:	3004      	addeq	r0, #4
 8006e9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ea0:	bf04      	itt	eq
 8006ea2:	009b      	lsleq	r3, r3, #2
 8006ea4:	3002      	addeq	r0, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	db05      	blt.n	8006eb6 <__hi0bits+0x3a>
 8006eaa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006eae:	f100 0001 	add.w	r0, r0, #1
 8006eb2:	bf08      	it	eq
 8006eb4:	2020      	moveq	r0, #32
 8006eb6:	4770      	bx	lr
 8006eb8:	2000      	movs	r0, #0
 8006eba:	e7e5      	b.n	8006e88 <__hi0bits+0xc>

08006ebc <__lo0bits>:
 8006ebc:	6803      	ldr	r3, [r0, #0]
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	f013 0007 	ands.w	r0, r3, #7
 8006ec4:	d00b      	beq.n	8006ede <__lo0bits+0x22>
 8006ec6:	07d9      	lsls	r1, r3, #31
 8006ec8:	d421      	bmi.n	8006f0e <__lo0bits+0x52>
 8006eca:	0798      	lsls	r0, r3, #30
 8006ecc:	bf49      	itett	mi
 8006ece:	085b      	lsrmi	r3, r3, #1
 8006ed0:	089b      	lsrpl	r3, r3, #2
 8006ed2:	2001      	movmi	r0, #1
 8006ed4:	6013      	strmi	r3, [r2, #0]
 8006ed6:	bf5c      	itt	pl
 8006ed8:	2002      	movpl	r0, #2
 8006eda:	6013      	strpl	r3, [r2, #0]
 8006edc:	4770      	bx	lr
 8006ede:	b299      	uxth	r1, r3
 8006ee0:	b909      	cbnz	r1, 8006ee6 <__lo0bits+0x2a>
 8006ee2:	2010      	movs	r0, #16
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	b2d9      	uxtb	r1, r3
 8006ee8:	b909      	cbnz	r1, 8006eee <__lo0bits+0x32>
 8006eea:	3008      	adds	r0, #8
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	0719      	lsls	r1, r3, #28
 8006ef0:	bf04      	itt	eq
 8006ef2:	091b      	lsreq	r3, r3, #4
 8006ef4:	3004      	addeq	r0, #4
 8006ef6:	0799      	lsls	r1, r3, #30
 8006ef8:	bf04      	itt	eq
 8006efa:	089b      	lsreq	r3, r3, #2
 8006efc:	3002      	addeq	r0, #2
 8006efe:	07d9      	lsls	r1, r3, #31
 8006f00:	d403      	bmi.n	8006f0a <__lo0bits+0x4e>
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	f100 0001 	add.w	r0, r0, #1
 8006f08:	d003      	beq.n	8006f12 <__lo0bits+0x56>
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	4770      	bx	lr
 8006f0e:	2000      	movs	r0, #0
 8006f10:	4770      	bx	lr
 8006f12:	2020      	movs	r0, #32
 8006f14:	4770      	bx	lr
	...

08006f18 <__i2b>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	f7ff ff05 	bl	8006d2c <_Balloc>
 8006f22:	4602      	mov	r2, r0
 8006f24:	b928      	cbnz	r0, 8006f32 <__i2b+0x1a>
 8006f26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006f2a:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <__i2b+0x24>)
 8006f2c:	4804      	ldr	r0, [pc, #16]	; (8006f40 <__i2b+0x28>)
 8006f2e:	f000 fcdb 	bl	80078e8 <__assert_func>
 8006f32:	2301      	movs	r3, #1
 8006f34:	6144      	str	r4, [r0, #20]
 8006f36:	6103      	str	r3, [r0, #16]
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	bf00      	nop
 8006f3c:	08008643 	.word	0x08008643
 8006f40:	08008654 	.word	0x08008654

08006f44 <__multiply>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	4691      	mov	r9, r2
 8006f4a:	690a      	ldr	r2, [r1, #16]
 8006f4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f50:	460c      	mov	r4, r1
 8006f52:	429a      	cmp	r2, r3
 8006f54:	bfbe      	ittt	lt
 8006f56:	460b      	movlt	r3, r1
 8006f58:	464c      	movlt	r4, r9
 8006f5a:	4699      	movlt	r9, r3
 8006f5c:	6927      	ldr	r7, [r4, #16]
 8006f5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006f62:	68a3      	ldr	r3, [r4, #8]
 8006f64:	6861      	ldr	r1, [r4, #4]
 8006f66:	eb07 060a 	add.w	r6, r7, sl
 8006f6a:	42b3      	cmp	r3, r6
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	bfb8      	it	lt
 8006f70:	3101      	addlt	r1, #1
 8006f72:	f7ff fedb 	bl	8006d2c <_Balloc>
 8006f76:	b930      	cbnz	r0, 8006f86 <__multiply+0x42>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	f240 115d 	movw	r1, #349	; 0x15d
 8006f7e:	4b43      	ldr	r3, [pc, #268]	; (800708c <__multiply+0x148>)
 8006f80:	4843      	ldr	r0, [pc, #268]	; (8007090 <__multiply+0x14c>)
 8006f82:	f000 fcb1 	bl	80078e8 <__assert_func>
 8006f86:	f100 0514 	add.w	r5, r0, #20
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f92:	4543      	cmp	r3, r8
 8006f94:	d321      	bcc.n	8006fda <__multiply+0x96>
 8006f96:	f104 0314 	add.w	r3, r4, #20
 8006f9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006f9e:	f109 0314 	add.w	r3, r9, #20
 8006fa2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006fa6:	9202      	str	r2, [sp, #8]
 8006fa8:	1b3a      	subs	r2, r7, r4
 8006faa:	3a15      	subs	r2, #21
 8006fac:	f022 0203 	bic.w	r2, r2, #3
 8006fb0:	3204      	adds	r2, #4
 8006fb2:	f104 0115 	add.w	r1, r4, #21
 8006fb6:	428f      	cmp	r7, r1
 8006fb8:	bf38      	it	cc
 8006fba:	2204      	movcc	r2, #4
 8006fbc:	9201      	str	r2, [sp, #4]
 8006fbe:	9a02      	ldr	r2, [sp, #8]
 8006fc0:	9303      	str	r3, [sp, #12]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d80c      	bhi.n	8006fe0 <__multiply+0x9c>
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	dd03      	ble.n	8006fd2 <__multiply+0x8e>
 8006fca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d059      	beq.n	8007086 <__multiply+0x142>
 8006fd2:	6106      	str	r6, [r0, #16]
 8006fd4:	b005      	add	sp, #20
 8006fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fda:	f843 2b04 	str.w	r2, [r3], #4
 8006fde:	e7d8      	b.n	8006f92 <__multiply+0x4e>
 8006fe0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006fe4:	f1ba 0f00 	cmp.w	sl, #0
 8006fe8:	d023      	beq.n	8007032 <__multiply+0xee>
 8006fea:	46a9      	mov	r9, r5
 8006fec:	f04f 0c00 	mov.w	ip, #0
 8006ff0:	f104 0e14 	add.w	lr, r4, #20
 8006ff4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006ff8:	f8d9 1000 	ldr.w	r1, [r9]
 8006ffc:	fa1f fb82 	uxth.w	fp, r2
 8007000:	b289      	uxth	r1, r1
 8007002:	fb0a 110b 	mla	r1, sl, fp, r1
 8007006:	4461      	add	r1, ip
 8007008:	f8d9 c000 	ldr.w	ip, [r9]
 800700c:	0c12      	lsrs	r2, r2, #16
 800700e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007012:	fb0a c202 	mla	r2, sl, r2, ip
 8007016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800701a:	b289      	uxth	r1, r1
 800701c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007020:	4577      	cmp	r7, lr
 8007022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007026:	f849 1b04 	str.w	r1, [r9], #4
 800702a:	d8e3      	bhi.n	8006ff4 <__multiply+0xb0>
 800702c:	9a01      	ldr	r2, [sp, #4]
 800702e:	f845 c002 	str.w	ip, [r5, r2]
 8007032:	9a03      	ldr	r2, [sp, #12]
 8007034:	3304      	adds	r3, #4
 8007036:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800703a:	f1b9 0f00 	cmp.w	r9, #0
 800703e:	d020      	beq.n	8007082 <__multiply+0x13e>
 8007040:	46ae      	mov	lr, r5
 8007042:	f04f 0a00 	mov.w	sl, #0
 8007046:	6829      	ldr	r1, [r5, #0]
 8007048:	f104 0c14 	add.w	ip, r4, #20
 800704c:	f8bc b000 	ldrh.w	fp, [ip]
 8007050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007054:	b289      	uxth	r1, r1
 8007056:	fb09 220b 	mla	r2, r9, fp, r2
 800705a:	4492      	add	sl, r2
 800705c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007060:	f84e 1b04 	str.w	r1, [lr], #4
 8007064:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007068:	f8be 1000 	ldrh.w	r1, [lr]
 800706c:	0c12      	lsrs	r2, r2, #16
 800706e:	fb09 1102 	mla	r1, r9, r2, r1
 8007072:	4567      	cmp	r7, ip
 8007074:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007078:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800707c:	d8e6      	bhi.n	800704c <__multiply+0x108>
 800707e:	9a01      	ldr	r2, [sp, #4]
 8007080:	50a9      	str	r1, [r5, r2]
 8007082:	3504      	adds	r5, #4
 8007084:	e79b      	b.n	8006fbe <__multiply+0x7a>
 8007086:	3e01      	subs	r6, #1
 8007088:	e79d      	b.n	8006fc6 <__multiply+0x82>
 800708a:	bf00      	nop
 800708c:	08008643 	.word	0x08008643
 8007090:	08008654 	.word	0x08008654

08007094 <__pow5mult>:
 8007094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007098:	4615      	mov	r5, r2
 800709a:	f012 0203 	ands.w	r2, r2, #3
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	d007      	beq.n	80070b4 <__pow5mult+0x20>
 80070a4:	4c25      	ldr	r4, [pc, #148]	; (800713c <__pow5mult+0xa8>)
 80070a6:	3a01      	subs	r2, #1
 80070a8:	2300      	movs	r3, #0
 80070aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80070ae:	f7ff fe9f 	bl	8006df0 <__multadd>
 80070b2:	4607      	mov	r7, r0
 80070b4:	10ad      	asrs	r5, r5, #2
 80070b6:	d03d      	beq.n	8007134 <__pow5mult+0xa0>
 80070b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80070ba:	b97c      	cbnz	r4, 80070dc <__pow5mult+0x48>
 80070bc:	2010      	movs	r0, #16
 80070be:	f7ff fe11 	bl	8006ce4 <malloc>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6270      	str	r0, [r6, #36]	; 0x24
 80070c6:	b928      	cbnz	r0, 80070d4 <__pow5mult+0x40>
 80070c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80070cc:	4b1c      	ldr	r3, [pc, #112]	; (8007140 <__pow5mult+0xac>)
 80070ce:	481d      	ldr	r0, [pc, #116]	; (8007144 <__pow5mult+0xb0>)
 80070d0:	f000 fc0a 	bl	80078e8 <__assert_func>
 80070d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80070d8:	6004      	str	r4, [r0, #0]
 80070da:	60c4      	str	r4, [r0, #12]
 80070dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80070e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80070e4:	b94c      	cbnz	r4, 80070fa <__pow5mult+0x66>
 80070e6:	f240 2171 	movw	r1, #625	; 0x271
 80070ea:	4630      	mov	r0, r6
 80070ec:	f7ff ff14 	bl	8006f18 <__i2b>
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80070f8:	6003      	str	r3, [r0, #0]
 80070fa:	f04f 0900 	mov.w	r9, #0
 80070fe:	07eb      	lsls	r3, r5, #31
 8007100:	d50a      	bpl.n	8007118 <__pow5mult+0x84>
 8007102:	4639      	mov	r1, r7
 8007104:	4622      	mov	r2, r4
 8007106:	4630      	mov	r0, r6
 8007108:	f7ff ff1c 	bl	8006f44 <__multiply>
 800710c:	4680      	mov	r8, r0
 800710e:	4639      	mov	r1, r7
 8007110:	4630      	mov	r0, r6
 8007112:	f7ff fe4b 	bl	8006dac <_Bfree>
 8007116:	4647      	mov	r7, r8
 8007118:	106d      	asrs	r5, r5, #1
 800711a:	d00b      	beq.n	8007134 <__pow5mult+0xa0>
 800711c:	6820      	ldr	r0, [r4, #0]
 800711e:	b938      	cbnz	r0, 8007130 <__pow5mult+0x9c>
 8007120:	4622      	mov	r2, r4
 8007122:	4621      	mov	r1, r4
 8007124:	4630      	mov	r0, r6
 8007126:	f7ff ff0d 	bl	8006f44 <__multiply>
 800712a:	6020      	str	r0, [r4, #0]
 800712c:	f8c0 9000 	str.w	r9, [r0]
 8007130:	4604      	mov	r4, r0
 8007132:	e7e4      	b.n	80070fe <__pow5mult+0x6a>
 8007134:	4638      	mov	r0, r7
 8007136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713a:	bf00      	nop
 800713c:	080087a0 	.word	0x080087a0
 8007140:	080085d1 	.word	0x080085d1
 8007144:	08008654 	.word	0x08008654

08007148 <__lshift>:
 8007148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	460c      	mov	r4, r1
 800714e:	4607      	mov	r7, r0
 8007150:	4691      	mov	r9, r2
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	6849      	ldr	r1, [r1, #4]
 8007156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007160:	f108 0601 	add.w	r6, r8, #1
 8007164:	42b3      	cmp	r3, r6
 8007166:	db0b      	blt.n	8007180 <__lshift+0x38>
 8007168:	4638      	mov	r0, r7
 800716a:	f7ff fddf 	bl	8006d2c <_Balloc>
 800716e:	4605      	mov	r5, r0
 8007170:	b948      	cbnz	r0, 8007186 <__lshift+0x3e>
 8007172:	4602      	mov	r2, r0
 8007174:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007178:	4b29      	ldr	r3, [pc, #164]	; (8007220 <__lshift+0xd8>)
 800717a:	482a      	ldr	r0, [pc, #168]	; (8007224 <__lshift+0xdc>)
 800717c:	f000 fbb4 	bl	80078e8 <__assert_func>
 8007180:	3101      	adds	r1, #1
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	e7ee      	b.n	8007164 <__lshift+0x1c>
 8007186:	2300      	movs	r3, #0
 8007188:	f100 0114 	add.w	r1, r0, #20
 800718c:	f100 0210 	add.w	r2, r0, #16
 8007190:	4618      	mov	r0, r3
 8007192:	4553      	cmp	r3, sl
 8007194:	db37      	blt.n	8007206 <__lshift+0xbe>
 8007196:	6920      	ldr	r0, [r4, #16]
 8007198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800719c:	f104 0314 	add.w	r3, r4, #20
 80071a0:	f019 091f 	ands.w	r9, r9, #31
 80071a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80071a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80071ac:	d02f      	beq.n	800720e <__lshift+0xc6>
 80071ae:	468a      	mov	sl, r1
 80071b0:	f04f 0c00 	mov.w	ip, #0
 80071b4:	f1c9 0e20 	rsb	lr, r9, #32
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	fa02 f209 	lsl.w	r2, r2, r9
 80071be:	ea42 020c 	orr.w	r2, r2, ip
 80071c2:	f84a 2b04 	str.w	r2, [sl], #4
 80071c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ca:	4298      	cmp	r0, r3
 80071cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80071d0:	d8f2      	bhi.n	80071b8 <__lshift+0x70>
 80071d2:	1b03      	subs	r3, r0, r4
 80071d4:	3b15      	subs	r3, #21
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	3304      	adds	r3, #4
 80071dc:	f104 0215 	add.w	r2, r4, #21
 80071e0:	4290      	cmp	r0, r2
 80071e2:	bf38      	it	cc
 80071e4:	2304      	movcc	r3, #4
 80071e6:	f841 c003 	str.w	ip, [r1, r3]
 80071ea:	f1bc 0f00 	cmp.w	ip, #0
 80071ee:	d001      	beq.n	80071f4 <__lshift+0xac>
 80071f0:	f108 0602 	add.w	r6, r8, #2
 80071f4:	3e01      	subs	r6, #1
 80071f6:	4638      	mov	r0, r7
 80071f8:	4621      	mov	r1, r4
 80071fa:	612e      	str	r6, [r5, #16]
 80071fc:	f7ff fdd6 	bl	8006dac <_Bfree>
 8007200:	4628      	mov	r0, r5
 8007202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007206:	f842 0f04 	str.w	r0, [r2, #4]!
 800720a:	3301      	adds	r3, #1
 800720c:	e7c1      	b.n	8007192 <__lshift+0x4a>
 800720e:	3904      	subs	r1, #4
 8007210:	f853 2b04 	ldr.w	r2, [r3], #4
 8007214:	4298      	cmp	r0, r3
 8007216:	f841 2f04 	str.w	r2, [r1, #4]!
 800721a:	d8f9      	bhi.n	8007210 <__lshift+0xc8>
 800721c:	e7ea      	b.n	80071f4 <__lshift+0xac>
 800721e:	bf00      	nop
 8007220:	08008643 	.word	0x08008643
 8007224:	08008654 	.word	0x08008654

08007228 <__mcmp>:
 8007228:	4603      	mov	r3, r0
 800722a:	690a      	ldr	r2, [r1, #16]
 800722c:	6900      	ldr	r0, [r0, #16]
 800722e:	b530      	push	{r4, r5, lr}
 8007230:	1a80      	subs	r0, r0, r2
 8007232:	d10d      	bne.n	8007250 <__mcmp+0x28>
 8007234:	3314      	adds	r3, #20
 8007236:	3114      	adds	r1, #20
 8007238:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800723c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007240:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007248:	4295      	cmp	r5, r2
 800724a:	d002      	beq.n	8007252 <__mcmp+0x2a>
 800724c:	d304      	bcc.n	8007258 <__mcmp+0x30>
 800724e:	2001      	movs	r0, #1
 8007250:	bd30      	pop	{r4, r5, pc}
 8007252:	42a3      	cmp	r3, r4
 8007254:	d3f4      	bcc.n	8007240 <__mcmp+0x18>
 8007256:	e7fb      	b.n	8007250 <__mcmp+0x28>
 8007258:	f04f 30ff 	mov.w	r0, #4294967295
 800725c:	e7f8      	b.n	8007250 <__mcmp+0x28>
	...

08007260 <__mdiff>:
 8007260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	460d      	mov	r5, r1
 8007266:	4607      	mov	r7, r0
 8007268:	4611      	mov	r1, r2
 800726a:	4628      	mov	r0, r5
 800726c:	4614      	mov	r4, r2
 800726e:	f7ff ffdb 	bl	8007228 <__mcmp>
 8007272:	1e06      	subs	r6, r0, #0
 8007274:	d111      	bne.n	800729a <__mdiff+0x3a>
 8007276:	4631      	mov	r1, r6
 8007278:	4638      	mov	r0, r7
 800727a:	f7ff fd57 	bl	8006d2c <_Balloc>
 800727e:	4602      	mov	r2, r0
 8007280:	b928      	cbnz	r0, 800728e <__mdiff+0x2e>
 8007282:	f240 2132 	movw	r1, #562	; 0x232
 8007286:	4b3a      	ldr	r3, [pc, #232]	; (8007370 <__mdiff+0x110>)
 8007288:	483a      	ldr	r0, [pc, #232]	; (8007374 <__mdiff+0x114>)
 800728a:	f000 fb2d 	bl	80078e8 <__assert_func>
 800728e:	2301      	movs	r3, #1
 8007290:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007294:	4610      	mov	r0, r2
 8007296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729a:	bfa4      	itt	ge
 800729c:	4623      	movge	r3, r4
 800729e:	462c      	movge	r4, r5
 80072a0:	4638      	mov	r0, r7
 80072a2:	6861      	ldr	r1, [r4, #4]
 80072a4:	bfa6      	itte	ge
 80072a6:	461d      	movge	r5, r3
 80072a8:	2600      	movge	r6, #0
 80072aa:	2601      	movlt	r6, #1
 80072ac:	f7ff fd3e 	bl	8006d2c <_Balloc>
 80072b0:	4602      	mov	r2, r0
 80072b2:	b918      	cbnz	r0, 80072bc <__mdiff+0x5c>
 80072b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80072b8:	4b2d      	ldr	r3, [pc, #180]	; (8007370 <__mdiff+0x110>)
 80072ba:	e7e5      	b.n	8007288 <__mdiff+0x28>
 80072bc:	f102 0814 	add.w	r8, r2, #20
 80072c0:	46c2      	mov	sl, r8
 80072c2:	f04f 0c00 	mov.w	ip, #0
 80072c6:	6927      	ldr	r7, [r4, #16]
 80072c8:	60c6      	str	r6, [r0, #12]
 80072ca:	692e      	ldr	r6, [r5, #16]
 80072cc:	f104 0014 	add.w	r0, r4, #20
 80072d0:	f105 0914 	add.w	r9, r5, #20
 80072d4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80072d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80072dc:	3410      	adds	r4, #16
 80072de:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80072e2:	f859 3b04 	ldr.w	r3, [r9], #4
 80072e6:	fa1f f18b 	uxth.w	r1, fp
 80072ea:	448c      	add	ip, r1
 80072ec:	b299      	uxth	r1, r3
 80072ee:	0c1b      	lsrs	r3, r3, #16
 80072f0:	ebac 0101 	sub.w	r1, ip, r1
 80072f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80072f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80072fc:	b289      	uxth	r1, r1
 80072fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007302:	454e      	cmp	r6, r9
 8007304:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007308:	f84a 3b04 	str.w	r3, [sl], #4
 800730c:	d8e7      	bhi.n	80072de <__mdiff+0x7e>
 800730e:	1b73      	subs	r3, r6, r5
 8007310:	3b15      	subs	r3, #21
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	3515      	adds	r5, #21
 8007318:	3304      	adds	r3, #4
 800731a:	42ae      	cmp	r6, r5
 800731c:	bf38      	it	cc
 800731e:	2304      	movcc	r3, #4
 8007320:	4418      	add	r0, r3
 8007322:	4443      	add	r3, r8
 8007324:	461e      	mov	r6, r3
 8007326:	4605      	mov	r5, r0
 8007328:	4575      	cmp	r5, lr
 800732a:	d30e      	bcc.n	800734a <__mdiff+0xea>
 800732c:	f10e 0103 	add.w	r1, lr, #3
 8007330:	1a09      	subs	r1, r1, r0
 8007332:	f021 0103 	bic.w	r1, r1, #3
 8007336:	3803      	subs	r0, #3
 8007338:	4586      	cmp	lr, r0
 800733a:	bf38      	it	cc
 800733c:	2100      	movcc	r1, #0
 800733e:	4419      	add	r1, r3
 8007340:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007344:	b18b      	cbz	r3, 800736a <__mdiff+0x10a>
 8007346:	6117      	str	r7, [r2, #16]
 8007348:	e7a4      	b.n	8007294 <__mdiff+0x34>
 800734a:	f855 8b04 	ldr.w	r8, [r5], #4
 800734e:	fa1f f188 	uxth.w	r1, r8
 8007352:	4461      	add	r1, ip
 8007354:	140c      	asrs	r4, r1, #16
 8007356:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800735a:	b289      	uxth	r1, r1
 800735c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007360:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007364:	f846 1b04 	str.w	r1, [r6], #4
 8007368:	e7de      	b.n	8007328 <__mdiff+0xc8>
 800736a:	3f01      	subs	r7, #1
 800736c:	e7e8      	b.n	8007340 <__mdiff+0xe0>
 800736e:	bf00      	nop
 8007370:	08008643 	.word	0x08008643
 8007374:	08008654 	.word	0x08008654

08007378 <__d2b>:
 8007378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800737c:	2101      	movs	r1, #1
 800737e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007382:	4690      	mov	r8, r2
 8007384:	461d      	mov	r5, r3
 8007386:	f7ff fcd1 	bl	8006d2c <_Balloc>
 800738a:	4604      	mov	r4, r0
 800738c:	b930      	cbnz	r0, 800739c <__d2b+0x24>
 800738e:	4602      	mov	r2, r0
 8007390:	f240 310a 	movw	r1, #778	; 0x30a
 8007394:	4b24      	ldr	r3, [pc, #144]	; (8007428 <__d2b+0xb0>)
 8007396:	4825      	ldr	r0, [pc, #148]	; (800742c <__d2b+0xb4>)
 8007398:	f000 faa6 	bl	80078e8 <__assert_func>
 800739c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80073a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80073a4:	bb2d      	cbnz	r5, 80073f2 <__d2b+0x7a>
 80073a6:	9301      	str	r3, [sp, #4]
 80073a8:	f1b8 0300 	subs.w	r3, r8, #0
 80073ac:	d026      	beq.n	80073fc <__d2b+0x84>
 80073ae:	4668      	mov	r0, sp
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	f7ff fd83 	bl	8006ebc <__lo0bits>
 80073b6:	9900      	ldr	r1, [sp, #0]
 80073b8:	b1f0      	cbz	r0, 80073f8 <__d2b+0x80>
 80073ba:	9a01      	ldr	r2, [sp, #4]
 80073bc:	f1c0 0320 	rsb	r3, r0, #32
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	430b      	orrs	r3, r1
 80073c6:	40c2      	lsrs	r2, r0
 80073c8:	6163      	str	r3, [r4, #20]
 80073ca:	9201      	str	r2, [sp, #4]
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	bf14      	ite	ne
 80073d2:	2102      	movne	r1, #2
 80073d4:	2101      	moveq	r1, #1
 80073d6:	61a3      	str	r3, [r4, #24]
 80073d8:	6121      	str	r1, [r4, #16]
 80073da:	b1c5      	cbz	r5, 800740e <__d2b+0x96>
 80073dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80073e0:	4405      	add	r5, r0
 80073e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80073e6:	603d      	str	r5, [r7, #0]
 80073e8:	6030      	str	r0, [r6, #0]
 80073ea:	4620      	mov	r0, r4
 80073ec:	b002      	add	sp, #8
 80073ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f6:	e7d6      	b.n	80073a6 <__d2b+0x2e>
 80073f8:	6161      	str	r1, [r4, #20]
 80073fa:	e7e7      	b.n	80073cc <__d2b+0x54>
 80073fc:	a801      	add	r0, sp, #4
 80073fe:	f7ff fd5d 	bl	8006ebc <__lo0bits>
 8007402:	2101      	movs	r1, #1
 8007404:	9b01      	ldr	r3, [sp, #4]
 8007406:	6121      	str	r1, [r4, #16]
 8007408:	6163      	str	r3, [r4, #20]
 800740a:	3020      	adds	r0, #32
 800740c:	e7e5      	b.n	80073da <__d2b+0x62>
 800740e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007412:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007416:	6038      	str	r0, [r7, #0]
 8007418:	6918      	ldr	r0, [r3, #16]
 800741a:	f7ff fd2f 	bl	8006e7c <__hi0bits>
 800741e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007422:	6031      	str	r1, [r6, #0]
 8007424:	e7e1      	b.n	80073ea <__d2b+0x72>
 8007426:	bf00      	nop
 8007428:	08008643 	.word	0x08008643
 800742c:	08008654 	.word	0x08008654

08007430 <_calloc_r>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	fba1 5402 	umull	r5, r4, r1, r2
 8007436:	b934      	cbnz	r4, 8007446 <_calloc_r+0x16>
 8007438:	4629      	mov	r1, r5
 800743a:	f000 f875 	bl	8007528 <_malloc_r>
 800743e:	4606      	mov	r6, r0
 8007440:	b928      	cbnz	r0, 800744e <_calloc_r+0x1e>
 8007442:	4630      	mov	r0, r6
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	220c      	movs	r2, #12
 8007448:	2600      	movs	r6, #0
 800744a:	6002      	str	r2, [r0, #0]
 800744c:	e7f9      	b.n	8007442 <_calloc_r+0x12>
 800744e:	462a      	mov	r2, r5
 8007450:	4621      	mov	r1, r4
 8007452:	f7fe f93f 	bl	80056d4 <memset>
 8007456:	e7f4      	b.n	8007442 <_calloc_r+0x12>

08007458 <_free_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4605      	mov	r5, r0
 800745c:	2900      	cmp	r1, #0
 800745e:	d040      	beq.n	80074e2 <_free_r+0x8a>
 8007460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007464:	1f0c      	subs	r4, r1, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfb8      	it	lt
 800746a:	18e4      	addlt	r4, r4, r3
 800746c:	f000 fa98 	bl	80079a0 <__malloc_lock>
 8007470:	4a1c      	ldr	r2, [pc, #112]	; (80074e4 <_free_r+0x8c>)
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	b933      	cbnz	r3, 8007484 <_free_r+0x2c>
 8007476:	6063      	str	r3, [r4, #4]
 8007478:	6014      	str	r4, [r2, #0]
 800747a:	4628      	mov	r0, r5
 800747c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007480:	f000 ba94 	b.w	80079ac <__malloc_unlock>
 8007484:	42a3      	cmp	r3, r4
 8007486:	d908      	bls.n	800749a <_free_r+0x42>
 8007488:	6820      	ldr	r0, [r4, #0]
 800748a:	1821      	adds	r1, r4, r0
 800748c:	428b      	cmp	r3, r1
 800748e:	bf01      	itttt	eq
 8007490:	6819      	ldreq	r1, [r3, #0]
 8007492:	685b      	ldreq	r3, [r3, #4]
 8007494:	1809      	addeq	r1, r1, r0
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	e7ed      	b.n	8007476 <_free_r+0x1e>
 800749a:	461a      	mov	r2, r3
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	b10b      	cbz	r3, 80074a4 <_free_r+0x4c>
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d9fa      	bls.n	800749a <_free_r+0x42>
 80074a4:	6811      	ldr	r1, [r2, #0]
 80074a6:	1850      	adds	r0, r2, r1
 80074a8:	42a0      	cmp	r0, r4
 80074aa:	d10b      	bne.n	80074c4 <_free_r+0x6c>
 80074ac:	6820      	ldr	r0, [r4, #0]
 80074ae:	4401      	add	r1, r0
 80074b0:	1850      	adds	r0, r2, r1
 80074b2:	4283      	cmp	r3, r0
 80074b4:	6011      	str	r1, [r2, #0]
 80074b6:	d1e0      	bne.n	800747a <_free_r+0x22>
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	4401      	add	r1, r0
 80074be:	6011      	str	r1, [r2, #0]
 80074c0:	6053      	str	r3, [r2, #4]
 80074c2:	e7da      	b.n	800747a <_free_r+0x22>
 80074c4:	d902      	bls.n	80074cc <_free_r+0x74>
 80074c6:	230c      	movs	r3, #12
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	e7d6      	b.n	800747a <_free_r+0x22>
 80074cc:	6820      	ldr	r0, [r4, #0]
 80074ce:	1821      	adds	r1, r4, r0
 80074d0:	428b      	cmp	r3, r1
 80074d2:	bf01      	itttt	eq
 80074d4:	6819      	ldreq	r1, [r3, #0]
 80074d6:	685b      	ldreq	r3, [r3, #4]
 80074d8:	1809      	addeq	r1, r1, r0
 80074da:	6021      	streq	r1, [r4, #0]
 80074dc:	6063      	str	r3, [r4, #4]
 80074de:	6054      	str	r4, [r2, #4]
 80074e0:	e7cb      	b.n	800747a <_free_r+0x22>
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	20000530 	.word	0x20000530

080074e8 <sbrk_aligned>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	4e0e      	ldr	r6, [pc, #56]	; (8007524 <sbrk_aligned+0x3c>)
 80074ec:	460c      	mov	r4, r1
 80074ee:	6831      	ldr	r1, [r6, #0]
 80074f0:	4605      	mov	r5, r0
 80074f2:	b911      	cbnz	r1, 80074fa <sbrk_aligned+0x12>
 80074f4:	f000 f9e8 	bl	80078c8 <_sbrk_r>
 80074f8:	6030      	str	r0, [r6, #0]
 80074fa:	4621      	mov	r1, r4
 80074fc:	4628      	mov	r0, r5
 80074fe:	f000 f9e3 	bl	80078c8 <_sbrk_r>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	d00a      	beq.n	800751c <sbrk_aligned+0x34>
 8007506:	1cc4      	adds	r4, r0, #3
 8007508:	f024 0403 	bic.w	r4, r4, #3
 800750c:	42a0      	cmp	r0, r4
 800750e:	d007      	beq.n	8007520 <sbrk_aligned+0x38>
 8007510:	1a21      	subs	r1, r4, r0
 8007512:	4628      	mov	r0, r5
 8007514:	f000 f9d8 	bl	80078c8 <_sbrk_r>
 8007518:	3001      	adds	r0, #1
 800751a:	d101      	bne.n	8007520 <sbrk_aligned+0x38>
 800751c:	f04f 34ff 	mov.w	r4, #4294967295
 8007520:	4620      	mov	r0, r4
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	20000534 	.word	0x20000534

08007528 <_malloc_r>:
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	1ccd      	adds	r5, r1, #3
 800752e:	f025 0503 	bic.w	r5, r5, #3
 8007532:	3508      	adds	r5, #8
 8007534:	2d0c      	cmp	r5, #12
 8007536:	bf38      	it	cc
 8007538:	250c      	movcc	r5, #12
 800753a:	2d00      	cmp	r5, #0
 800753c:	4607      	mov	r7, r0
 800753e:	db01      	blt.n	8007544 <_malloc_r+0x1c>
 8007540:	42a9      	cmp	r1, r5
 8007542:	d905      	bls.n	8007550 <_malloc_r+0x28>
 8007544:	230c      	movs	r3, #12
 8007546:	2600      	movs	r6, #0
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	4630      	mov	r0, r6
 800754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007550:	4e2e      	ldr	r6, [pc, #184]	; (800760c <_malloc_r+0xe4>)
 8007552:	f000 fa25 	bl	80079a0 <__malloc_lock>
 8007556:	6833      	ldr	r3, [r6, #0]
 8007558:	461c      	mov	r4, r3
 800755a:	bb34      	cbnz	r4, 80075aa <_malloc_r+0x82>
 800755c:	4629      	mov	r1, r5
 800755e:	4638      	mov	r0, r7
 8007560:	f7ff ffc2 	bl	80074e8 <sbrk_aligned>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	4604      	mov	r4, r0
 8007568:	d14d      	bne.n	8007606 <_malloc_r+0xde>
 800756a:	6834      	ldr	r4, [r6, #0]
 800756c:	4626      	mov	r6, r4
 800756e:	2e00      	cmp	r6, #0
 8007570:	d140      	bne.n	80075f4 <_malloc_r+0xcc>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	4631      	mov	r1, r6
 8007576:	4638      	mov	r0, r7
 8007578:	eb04 0803 	add.w	r8, r4, r3
 800757c:	f000 f9a4 	bl	80078c8 <_sbrk_r>
 8007580:	4580      	cmp	r8, r0
 8007582:	d13a      	bne.n	80075fa <_malloc_r+0xd2>
 8007584:	6821      	ldr	r1, [r4, #0]
 8007586:	3503      	adds	r5, #3
 8007588:	1a6d      	subs	r5, r5, r1
 800758a:	f025 0503 	bic.w	r5, r5, #3
 800758e:	3508      	adds	r5, #8
 8007590:	2d0c      	cmp	r5, #12
 8007592:	bf38      	it	cc
 8007594:	250c      	movcc	r5, #12
 8007596:	4638      	mov	r0, r7
 8007598:	4629      	mov	r1, r5
 800759a:	f7ff ffa5 	bl	80074e8 <sbrk_aligned>
 800759e:	3001      	adds	r0, #1
 80075a0:	d02b      	beq.n	80075fa <_malloc_r+0xd2>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	442b      	add	r3, r5
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	e00e      	b.n	80075c8 <_malloc_r+0xa0>
 80075aa:	6822      	ldr	r2, [r4, #0]
 80075ac:	1b52      	subs	r2, r2, r5
 80075ae:	d41e      	bmi.n	80075ee <_malloc_r+0xc6>
 80075b0:	2a0b      	cmp	r2, #11
 80075b2:	d916      	bls.n	80075e2 <_malloc_r+0xba>
 80075b4:	1961      	adds	r1, r4, r5
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	6025      	str	r5, [r4, #0]
 80075ba:	bf18      	it	ne
 80075bc:	6059      	strne	r1, [r3, #4]
 80075be:	6863      	ldr	r3, [r4, #4]
 80075c0:	bf08      	it	eq
 80075c2:	6031      	streq	r1, [r6, #0]
 80075c4:	5162      	str	r2, [r4, r5]
 80075c6:	604b      	str	r3, [r1, #4]
 80075c8:	4638      	mov	r0, r7
 80075ca:	f104 060b 	add.w	r6, r4, #11
 80075ce:	f000 f9ed 	bl	80079ac <__malloc_unlock>
 80075d2:	f026 0607 	bic.w	r6, r6, #7
 80075d6:	1d23      	adds	r3, r4, #4
 80075d8:	1af2      	subs	r2, r6, r3
 80075da:	d0b6      	beq.n	800754a <_malloc_r+0x22>
 80075dc:	1b9b      	subs	r3, r3, r6
 80075de:	50a3      	str	r3, [r4, r2]
 80075e0:	e7b3      	b.n	800754a <_malloc_r+0x22>
 80075e2:	6862      	ldr	r2, [r4, #4]
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	bf0c      	ite	eq
 80075e8:	6032      	streq	r2, [r6, #0]
 80075ea:	605a      	strne	r2, [r3, #4]
 80075ec:	e7ec      	b.n	80075c8 <_malloc_r+0xa0>
 80075ee:	4623      	mov	r3, r4
 80075f0:	6864      	ldr	r4, [r4, #4]
 80075f2:	e7b2      	b.n	800755a <_malloc_r+0x32>
 80075f4:	4634      	mov	r4, r6
 80075f6:	6876      	ldr	r6, [r6, #4]
 80075f8:	e7b9      	b.n	800756e <_malloc_r+0x46>
 80075fa:	230c      	movs	r3, #12
 80075fc:	4638      	mov	r0, r7
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	f000 f9d4 	bl	80079ac <__malloc_unlock>
 8007604:	e7a1      	b.n	800754a <_malloc_r+0x22>
 8007606:	6025      	str	r5, [r4, #0]
 8007608:	e7de      	b.n	80075c8 <_malloc_r+0xa0>
 800760a:	bf00      	nop
 800760c:	20000530 	.word	0x20000530

08007610 <__ssputs_r>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	688e      	ldr	r6, [r1, #8]
 8007616:	4682      	mov	sl, r0
 8007618:	429e      	cmp	r6, r3
 800761a:	460c      	mov	r4, r1
 800761c:	4690      	mov	r8, r2
 800761e:	461f      	mov	r7, r3
 8007620:	d838      	bhi.n	8007694 <__ssputs_r+0x84>
 8007622:	898a      	ldrh	r2, [r1, #12]
 8007624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007628:	d032      	beq.n	8007690 <__ssputs_r+0x80>
 800762a:	6825      	ldr	r5, [r4, #0]
 800762c:	6909      	ldr	r1, [r1, #16]
 800762e:	3301      	adds	r3, #1
 8007630:	eba5 0901 	sub.w	r9, r5, r1
 8007634:	6965      	ldr	r5, [r4, #20]
 8007636:	444b      	add	r3, r9
 8007638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800763c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007640:	106d      	asrs	r5, r5, #1
 8007642:	429d      	cmp	r5, r3
 8007644:	bf38      	it	cc
 8007646:	461d      	movcc	r5, r3
 8007648:	0553      	lsls	r3, r2, #21
 800764a:	d531      	bpl.n	80076b0 <__ssputs_r+0xa0>
 800764c:	4629      	mov	r1, r5
 800764e:	f7ff ff6b 	bl	8007528 <_malloc_r>
 8007652:	4606      	mov	r6, r0
 8007654:	b950      	cbnz	r0, 800766c <__ssputs_r+0x5c>
 8007656:	230c      	movs	r3, #12
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	f8ca 3000 	str.w	r3, [sl]
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007666:	81a3      	strh	r3, [r4, #12]
 8007668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800766c:	464a      	mov	r2, r9
 800766e:	6921      	ldr	r1, [r4, #16]
 8007670:	f7ff fb4e 	bl	8006d10 <memcpy>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800767a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	6126      	str	r6, [r4, #16]
 8007682:	444e      	add	r6, r9
 8007684:	6026      	str	r6, [r4, #0]
 8007686:	463e      	mov	r6, r7
 8007688:	6165      	str	r5, [r4, #20]
 800768a:	eba5 0509 	sub.w	r5, r5, r9
 800768e:	60a5      	str	r5, [r4, #8]
 8007690:	42be      	cmp	r6, r7
 8007692:	d900      	bls.n	8007696 <__ssputs_r+0x86>
 8007694:	463e      	mov	r6, r7
 8007696:	4632      	mov	r2, r6
 8007698:	4641      	mov	r1, r8
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	f000 f966 	bl	800796c <memmove>
 80076a0:	68a3      	ldr	r3, [r4, #8]
 80076a2:	2000      	movs	r0, #0
 80076a4:	1b9b      	subs	r3, r3, r6
 80076a6:	60a3      	str	r3, [r4, #8]
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	4433      	add	r3, r6
 80076ac:	6023      	str	r3, [r4, #0]
 80076ae:	e7db      	b.n	8007668 <__ssputs_r+0x58>
 80076b0:	462a      	mov	r2, r5
 80076b2:	f000 f981 	bl	80079b8 <_realloc_r>
 80076b6:	4606      	mov	r6, r0
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d1e1      	bne.n	8007680 <__ssputs_r+0x70>
 80076bc:	4650      	mov	r0, sl
 80076be:	6921      	ldr	r1, [r4, #16]
 80076c0:	f7ff feca 	bl	8007458 <_free_r>
 80076c4:	e7c7      	b.n	8007656 <__ssputs_r+0x46>
	...

080076c8 <_svfiprintf_r>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	4698      	mov	r8, r3
 80076ce:	898b      	ldrh	r3, [r1, #12]
 80076d0:	4607      	mov	r7, r0
 80076d2:	061b      	lsls	r3, r3, #24
 80076d4:	460d      	mov	r5, r1
 80076d6:	4614      	mov	r4, r2
 80076d8:	b09d      	sub	sp, #116	; 0x74
 80076da:	d50e      	bpl.n	80076fa <_svfiprintf_r+0x32>
 80076dc:	690b      	ldr	r3, [r1, #16]
 80076de:	b963      	cbnz	r3, 80076fa <_svfiprintf_r+0x32>
 80076e0:	2140      	movs	r1, #64	; 0x40
 80076e2:	f7ff ff21 	bl	8007528 <_malloc_r>
 80076e6:	6028      	str	r0, [r5, #0]
 80076e8:	6128      	str	r0, [r5, #16]
 80076ea:	b920      	cbnz	r0, 80076f6 <_svfiprintf_r+0x2e>
 80076ec:	230c      	movs	r3, #12
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	e0d1      	b.n	800789a <_svfiprintf_r+0x1d2>
 80076f6:	2340      	movs	r3, #64	; 0x40
 80076f8:	616b      	str	r3, [r5, #20]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9309      	str	r3, [sp, #36]	; 0x24
 80076fe:	2320      	movs	r3, #32
 8007700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007704:	2330      	movs	r3, #48	; 0x30
 8007706:	f04f 0901 	mov.w	r9, #1
 800770a:	f8cd 800c 	str.w	r8, [sp, #12]
 800770e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078b4 <_svfiprintf_r+0x1ec>
 8007712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007716:	4623      	mov	r3, r4
 8007718:	469a      	mov	sl, r3
 800771a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800771e:	b10a      	cbz	r2, 8007724 <_svfiprintf_r+0x5c>
 8007720:	2a25      	cmp	r2, #37	; 0x25
 8007722:	d1f9      	bne.n	8007718 <_svfiprintf_r+0x50>
 8007724:	ebba 0b04 	subs.w	fp, sl, r4
 8007728:	d00b      	beq.n	8007742 <_svfiprintf_r+0x7a>
 800772a:	465b      	mov	r3, fp
 800772c:	4622      	mov	r2, r4
 800772e:	4629      	mov	r1, r5
 8007730:	4638      	mov	r0, r7
 8007732:	f7ff ff6d 	bl	8007610 <__ssputs_r>
 8007736:	3001      	adds	r0, #1
 8007738:	f000 80aa 	beq.w	8007890 <_svfiprintf_r+0x1c8>
 800773c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800773e:	445a      	add	r2, fp
 8007740:	9209      	str	r2, [sp, #36]	; 0x24
 8007742:	f89a 3000 	ldrb.w	r3, [sl]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 80a2 	beq.w	8007890 <_svfiprintf_r+0x1c8>
 800774c:	2300      	movs	r3, #0
 800774e:	f04f 32ff 	mov.w	r2, #4294967295
 8007752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007756:	f10a 0a01 	add.w	sl, sl, #1
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	9307      	str	r3, [sp, #28]
 800775e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007762:	931a      	str	r3, [sp, #104]	; 0x68
 8007764:	4654      	mov	r4, sl
 8007766:	2205      	movs	r2, #5
 8007768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776c:	4851      	ldr	r0, [pc, #324]	; (80078b4 <_svfiprintf_r+0x1ec>)
 800776e:	f7ff fac1 	bl	8006cf4 <memchr>
 8007772:	9a04      	ldr	r2, [sp, #16]
 8007774:	b9d8      	cbnz	r0, 80077ae <_svfiprintf_r+0xe6>
 8007776:	06d0      	lsls	r0, r2, #27
 8007778:	bf44      	itt	mi
 800777a:	2320      	movmi	r3, #32
 800777c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007780:	0711      	lsls	r1, r2, #28
 8007782:	bf44      	itt	mi
 8007784:	232b      	movmi	r3, #43	; 0x2b
 8007786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800778a:	f89a 3000 	ldrb.w	r3, [sl]
 800778e:	2b2a      	cmp	r3, #42	; 0x2a
 8007790:	d015      	beq.n	80077be <_svfiprintf_r+0xf6>
 8007792:	4654      	mov	r4, sl
 8007794:	2000      	movs	r0, #0
 8007796:	f04f 0c0a 	mov.w	ip, #10
 800779a:	9a07      	ldr	r2, [sp, #28]
 800779c:	4621      	mov	r1, r4
 800779e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a2:	3b30      	subs	r3, #48	; 0x30
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	d94e      	bls.n	8007846 <_svfiprintf_r+0x17e>
 80077a8:	b1b0      	cbz	r0, 80077d8 <_svfiprintf_r+0x110>
 80077aa:	9207      	str	r2, [sp, #28]
 80077ac:	e014      	b.n	80077d8 <_svfiprintf_r+0x110>
 80077ae:	eba0 0308 	sub.w	r3, r0, r8
 80077b2:	fa09 f303 	lsl.w	r3, r9, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	46a2      	mov	sl, r4
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	e7d2      	b.n	8007764 <_svfiprintf_r+0x9c>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	1d19      	adds	r1, r3, #4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	9103      	str	r1, [sp, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfbb      	ittet	lt
 80077ca:	425b      	neglt	r3, r3
 80077cc:	f042 0202 	orrlt.w	r2, r2, #2
 80077d0:	9307      	strge	r3, [sp, #28]
 80077d2:	9307      	strlt	r3, [sp, #28]
 80077d4:	bfb8      	it	lt
 80077d6:	9204      	strlt	r2, [sp, #16]
 80077d8:	7823      	ldrb	r3, [r4, #0]
 80077da:	2b2e      	cmp	r3, #46	; 0x2e
 80077dc:	d10c      	bne.n	80077f8 <_svfiprintf_r+0x130>
 80077de:	7863      	ldrb	r3, [r4, #1]
 80077e0:	2b2a      	cmp	r3, #42	; 0x2a
 80077e2:	d135      	bne.n	8007850 <_svfiprintf_r+0x188>
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	3402      	adds	r4, #2
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9203      	str	r2, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfb8      	it	lt
 80077f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80077f6:	9305      	str	r3, [sp, #20]
 80077f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80078b8 <_svfiprintf_r+0x1f0>
 80077fc:	2203      	movs	r2, #3
 80077fe:	4650      	mov	r0, sl
 8007800:	7821      	ldrb	r1, [r4, #0]
 8007802:	f7ff fa77 	bl	8006cf4 <memchr>
 8007806:	b140      	cbz	r0, 800781a <_svfiprintf_r+0x152>
 8007808:	2340      	movs	r3, #64	; 0x40
 800780a:	eba0 000a 	sub.w	r0, r0, sl
 800780e:	fa03 f000 	lsl.w	r0, r3, r0
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	3401      	adds	r4, #1
 8007816:	4303      	orrs	r3, r0
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781e:	2206      	movs	r2, #6
 8007820:	4826      	ldr	r0, [pc, #152]	; (80078bc <_svfiprintf_r+0x1f4>)
 8007822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007826:	f7ff fa65 	bl	8006cf4 <memchr>
 800782a:	2800      	cmp	r0, #0
 800782c:	d038      	beq.n	80078a0 <_svfiprintf_r+0x1d8>
 800782e:	4b24      	ldr	r3, [pc, #144]	; (80078c0 <_svfiprintf_r+0x1f8>)
 8007830:	bb1b      	cbnz	r3, 800787a <_svfiprintf_r+0x1b2>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	3307      	adds	r3, #7
 8007836:	f023 0307 	bic.w	r3, r3, #7
 800783a:	3308      	adds	r3, #8
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007840:	4433      	add	r3, r6
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	e767      	b.n	8007716 <_svfiprintf_r+0x4e>
 8007846:	460c      	mov	r4, r1
 8007848:	2001      	movs	r0, #1
 800784a:	fb0c 3202 	mla	r2, ip, r2, r3
 800784e:	e7a5      	b.n	800779c <_svfiprintf_r+0xd4>
 8007850:	2300      	movs	r3, #0
 8007852:	f04f 0c0a 	mov.w	ip, #10
 8007856:	4619      	mov	r1, r3
 8007858:	3401      	adds	r4, #1
 800785a:	9305      	str	r3, [sp, #20]
 800785c:	4620      	mov	r0, r4
 800785e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007862:	3a30      	subs	r2, #48	; 0x30
 8007864:	2a09      	cmp	r2, #9
 8007866:	d903      	bls.n	8007870 <_svfiprintf_r+0x1a8>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d0c5      	beq.n	80077f8 <_svfiprintf_r+0x130>
 800786c:	9105      	str	r1, [sp, #20]
 800786e:	e7c3      	b.n	80077f8 <_svfiprintf_r+0x130>
 8007870:	4604      	mov	r4, r0
 8007872:	2301      	movs	r3, #1
 8007874:	fb0c 2101 	mla	r1, ip, r1, r2
 8007878:	e7f0      	b.n	800785c <_svfiprintf_r+0x194>
 800787a:	ab03      	add	r3, sp, #12
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	462a      	mov	r2, r5
 8007880:	4638      	mov	r0, r7
 8007882:	4b10      	ldr	r3, [pc, #64]	; (80078c4 <_svfiprintf_r+0x1fc>)
 8007884:	a904      	add	r1, sp, #16
 8007886:	f7fd ffcb 	bl	8005820 <_printf_float>
 800788a:	1c42      	adds	r2, r0, #1
 800788c:	4606      	mov	r6, r0
 800788e:	d1d6      	bne.n	800783e <_svfiprintf_r+0x176>
 8007890:	89ab      	ldrh	r3, [r5, #12]
 8007892:	065b      	lsls	r3, r3, #25
 8007894:	f53f af2c 	bmi.w	80076f0 <_svfiprintf_r+0x28>
 8007898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800789a:	b01d      	add	sp, #116	; 0x74
 800789c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a0:	ab03      	add	r3, sp, #12
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	462a      	mov	r2, r5
 80078a6:	4638      	mov	r0, r7
 80078a8:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <_svfiprintf_r+0x1fc>)
 80078aa:	a904      	add	r1, sp, #16
 80078ac:	f7fe fa54 	bl	8005d58 <_printf_i>
 80078b0:	e7eb      	b.n	800788a <_svfiprintf_r+0x1c2>
 80078b2:	bf00      	nop
 80078b4:	080087ac 	.word	0x080087ac
 80078b8:	080087b2 	.word	0x080087b2
 80078bc:	080087b6 	.word	0x080087b6
 80078c0:	08005821 	.word	0x08005821
 80078c4:	08007611 	.word	0x08007611

080078c8 <_sbrk_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	2300      	movs	r3, #0
 80078cc:	4d05      	ldr	r5, [pc, #20]	; (80078e4 <_sbrk_r+0x1c>)
 80078ce:	4604      	mov	r4, r0
 80078d0:	4608      	mov	r0, r1
 80078d2:	602b      	str	r3, [r5, #0]
 80078d4:	f7fa fc1a 	bl	800210c <_sbrk>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_sbrk_r+0x1a>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_sbrk_r+0x1a>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20000538 	.word	0x20000538

080078e8 <__assert_func>:
 80078e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ea:	4614      	mov	r4, r2
 80078ec:	461a      	mov	r2, r3
 80078ee:	4b09      	ldr	r3, [pc, #36]	; (8007914 <__assert_func+0x2c>)
 80078f0:	4605      	mov	r5, r0
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68d8      	ldr	r0, [r3, #12]
 80078f6:	b14c      	cbz	r4, 800790c <__assert_func+0x24>
 80078f8:	4b07      	ldr	r3, [pc, #28]	; (8007918 <__assert_func+0x30>)
 80078fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078fe:	9100      	str	r1, [sp, #0]
 8007900:	462b      	mov	r3, r5
 8007902:	4906      	ldr	r1, [pc, #24]	; (800791c <__assert_func+0x34>)
 8007904:	f000 f80e 	bl	8007924 <fiprintf>
 8007908:	f000 faaa 	bl	8007e60 <abort>
 800790c:	4b04      	ldr	r3, [pc, #16]	; (8007920 <__assert_func+0x38>)
 800790e:	461c      	mov	r4, r3
 8007910:	e7f3      	b.n	80078fa <__assert_func+0x12>
 8007912:	bf00      	nop
 8007914:	20000010 	.word	0x20000010
 8007918:	080087bd 	.word	0x080087bd
 800791c:	080087ca 	.word	0x080087ca
 8007920:	080087f8 	.word	0x080087f8

08007924 <fiprintf>:
 8007924:	b40e      	push	{r1, r2, r3}
 8007926:	b503      	push	{r0, r1, lr}
 8007928:	4601      	mov	r1, r0
 800792a:	ab03      	add	r3, sp, #12
 800792c:	4805      	ldr	r0, [pc, #20]	; (8007944 <fiprintf+0x20>)
 800792e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007932:	6800      	ldr	r0, [r0, #0]
 8007934:	9301      	str	r3, [sp, #4]
 8007936:	f000 f895 	bl	8007a64 <_vfiprintf_r>
 800793a:	b002      	add	sp, #8
 800793c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007940:	b003      	add	sp, #12
 8007942:	4770      	bx	lr
 8007944:	20000010 	.word	0x20000010

08007948 <__ascii_mbtowc>:
 8007948:	b082      	sub	sp, #8
 800794a:	b901      	cbnz	r1, 800794e <__ascii_mbtowc+0x6>
 800794c:	a901      	add	r1, sp, #4
 800794e:	b142      	cbz	r2, 8007962 <__ascii_mbtowc+0x1a>
 8007950:	b14b      	cbz	r3, 8007966 <__ascii_mbtowc+0x1e>
 8007952:	7813      	ldrb	r3, [r2, #0]
 8007954:	600b      	str	r3, [r1, #0]
 8007956:	7812      	ldrb	r2, [r2, #0]
 8007958:	1e10      	subs	r0, r2, #0
 800795a:	bf18      	it	ne
 800795c:	2001      	movne	r0, #1
 800795e:	b002      	add	sp, #8
 8007960:	4770      	bx	lr
 8007962:	4610      	mov	r0, r2
 8007964:	e7fb      	b.n	800795e <__ascii_mbtowc+0x16>
 8007966:	f06f 0001 	mvn.w	r0, #1
 800796a:	e7f8      	b.n	800795e <__ascii_mbtowc+0x16>

0800796c <memmove>:
 800796c:	4288      	cmp	r0, r1
 800796e:	b510      	push	{r4, lr}
 8007970:	eb01 0402 	add.w	r4, r1, r2
 8007974:	d902      	bls.n	800797c <memmove+0x10>
 8007976:	4284      	cmp	r4, r0
 8007978:	4623      	mov	r3, r4
 800797a:	d807      	bhi.n	800798c <memmove+0x20>
 800797c:	1e43      	subs	r3, r0, #1
 800797e:	42a1      	cmp	r1, r4
 8007980:	d008      	beq.n	8007994 <memmove+0x28>
 8007982:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800798a:	e7f8      	b.n	800797e <memmove+0x12>
 800798c:	4601      	mov	r1, r0
 800798e:	4402      	add	r2, r0
 8007990:	428a      	cmp	r2, r1
 8007992:	d100      	bne.n	8007996 <memmove+0x2a>
 8007994:	bd10      	pop	{r4, pc}
 8007996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800799a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800799e:	e7f7      	b.n	8007990 <memmove+0x24>

080079a0 <__malloc_lock>:
 80079a0:	4801      	ldr	r0, [pc, #4]	; (80079a8 <__malloc_lock+0x8>)
 80079a2:	f000 bc19 	b.w	80081d8 <__retarget_lock_acquire_recursive>
 80079a6:	bf00      	nop
 80079a8:	2000053c 	.word	0x2000053c

080079ac <__malloc_unlock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_unlock+0x8>)
 80079ae:	f000 bc14 	b.w	80081da <__retarget_lock_release_recursive>
 80079b2:	bf00      	nop
 80079b4:	2000053c 	.word	0x2000053c

080079b8 <_realloc_r>:
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	4680      	mov	r8, r0
 80079be:	4614      	mov	r4, r2
 80079c0:	460e      	mov	r6, r1
 80079c2:	b921      	cbnz	r1, 80079ce <_realloc_r+0x16>
 80079c4:	4611      	mov	r1, r2
 80079c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	f7ff bdad 	b.w	8007528 <_malloc_r>
 80079ce:	b92a      	cbnz	r2, 80079dc <_realloc_r+0x24>
 80079d0:	f7ff fd42 	bl	8007458 <_free_r>
 80079d4:	4625      	mov	r5, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079dc:	f000 fc64 	bl	80082a8 <_malloc_usable_size_r>
 80079e0:	4284      	cmp	r4, r0
 80079e2:	4607      	mov	r7, r0
 80079e4:	d802      	bhi.n	80079ec <_realloc_r+0x34>
 80079e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079ea:	d812      	bhi.n	8007a12 <_realloc_r+0x5a>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4640      	mov	r0, r8
 80079f0:	f7ff fd9a 	bl	8007528 <_malloc_r>
 80079f4:	4605      	mov	r5, r0
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d0ed      	beq.n	80079d6 <_realloc_r+0x1e>
 80079fa:	42bc      	cmp	r4, r7
 80079fc:	4622      	mov	r2, r4
 80079fe:	4631      	mov	r1, r6
 8007a00:	bf28      	it	cs
 8007a02:	463a      	movcs	r2, r7
 8007a04:	f7ff f984 	bl	8006d10 <memcpy>
 8007a08:	4631      	mov	r1, r6
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	f7ff fd24 	bl	8007458 <_free_r>
 8007a10:	e7e1      	b.n	80079d6 <_realloc_r+0x1e>
 8007a12:	4635      	mov	r5, r6
 8007a14:	e7df      	b.n	80079d6 <_realloc_r+0x1e>

08007a16 <__sfputc_r>:
 8007a16:	6893      	ldr	r3, [r2, #8]
 8007a18:	b410      	push	{r4}
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	6093      	str	r3, [r2, #8]
 8007a20:	da07      	bge.n	8007a32 <__sfputc_r+0x1c>
 8007a22:	6994      	ldr	r4, [r2, #24]
 8007a24:	42a3      	cmp	r3, r4
 8007a26:	db01      	blt.n	8007a2c <__sfputc_r+0x16>
 8007a28:	290a      	cmp	r1, #10
 8007a2a:	d102      	bne.n	8007a32 <__sfputc_r+0x1c>
 8007a2c:	bc10      	pop	{r4}
 8007a2e:	f000 b949 	b.w	8007cc4 <__swbuf_r>
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	1c58      	adds	r0, r3, #1
 8007a36:	6010      	str	r0, [r2, #0]
 8007a38:	7019      	strb	r1, [r3, #0]
 8007a3a:	4608      	mov	r0, r1
 8007a3c:	bc10      	pop	{r4}
 8007a3e:	4770      	bx	lr

08007a40 <__sfputs_r>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	4606      	mov	r6, r0
 8007a44:	460f      	mov	r7, r1
 8007a46:	4614      	mov	r4, r2
 8007a48:	18d5      	adds	r5, r2, r3
 8007a4a:	42ac      	cmp	r4, r5
 8007a4c:	d101      	bne.n	8007a52 <__sfputs_r+0x12>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e007      	b.n	8007a62 <__sfputs_r+0x22>
 8007a52:	463a      	mov	r2, r7
 8007a54:	4630      	mov	r0, r6
 8007a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a5a:	f7ff ffdc 	bl	8007a16 <__sfputc_r>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d1f3      	bne.n	8007a4a <__sfputs_r+0xa>
 8007a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007a64 <_vfiprintf_r>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	460d      	mov	r5, r1
 8007a6a:	4614      	mov	r4, r2
 8007a6c:	4698      	mov	r8, r3
 8007a6e:	4606      	mov	r6, r0
 8007a70:	b09d      	sub	sp, #116	; 0x74
 8007a72:	b118      	cbz	r0, 8007a7c <_vfiprintf_r+0x18>
 8007a74:	6983      	ldr	r3, [r0, #24]
 8007a76:	b90b      	cbnz	r3, 8007a7c <_vfiprintf_r+0x18>
 8007a78:	f000 fb10 	bl	800809c <__sinit>
 8007a7c:	4b89      	ldr	r3, [pc, #548]	; (8007ca4 <_vfiprintf_r+0x240>)
 8007a7e:	429d      	cmp	r5, r3
 8007a80:	d11b      	bne.n	8007aba <_vfiprintf_r+0x56>
 8007a82:	6875      	ldr	r5, [r6, #4]
 8007a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a86:	07d9      	lsls	r1, r3, #31
 8007a88:	d405      	bmi.n	8007a96 <_vfiprintf_r+0x32>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	059a      	lsls	r2, r3, #22
 8007a8e:	d402      	bmi.n	8007a96 <_vfiprintf_r+0x32>
 8007a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a92:	f000 fba1 	bl	80081d8 <__retarget_lock_acquire_recursive>
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	071b      	lsls	r3, r3, #28
 8007a9a:	d501      	bpl.n	8007aa0 <_vfiprintf_r+0x3c>
 8007a9c:	692b      	ldr	r3, [r5, #16]
 8007a9e:	b9eb      	cbnz	r3, 8007adc <_vfiprintf_r+0x78>
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f000 f96e 	bl	8007d84 <__swsetup_r>
 8007aa8:	b1c0      	cbz	r0, 8007adc <_vfiprintf_r+0x78>
 8007aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007aac:	07dc      	lsls	r4, r3, #31
 8007aae:	d50e      	bpl.n	8007ace <_vfiprintf_r+0x6a>
 8007ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab4:	b01d      	add	sp, #116	; 0x74
 8007ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aba:	4b7b      	ldr	r3, [pc, #492]	; (8007ca8 <_vfiprintf_r+0x244>)
 8007abc:	429d      	cmp	r5, r3
 8007abe:	d101      	bne.n	8007ac4 <_vfiprintf_r+0x60>
 8007ac0:	68b5      	ldr	r5, [r6, #8]
 8007ac2:	e7df      	b.n	8007a84 <_vfiprintf_r+0x20>
 8007ac4:	4b79      	ldr	r3, [pc, #484]	; (8007cac <_vfiprintf_r+0x248>)
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	bf08      	it	eq
 8007aca:	68f5      	ldreq	r5, [r6, #12]
 8007acc:	e7da      	b.n	8007a84 <_vfiprintf_r+0x20>
 8007ace:	89ab      	ldrh	r3, [r5, #12]
 8007ad0:	0598      	lsls	r0, r3, #22
 8007ad2:	d4ed      	bmi.n	8007ab0 <_vfiprintf_r+0x4c>
 8007ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ad6:	f000 fb80 	bl	80081da <__retarget_lock_release_recursive>
 8007ada:	e7e9      	b.n	8007ab0 <_vfiprintf_r+0x4c>
 8007adc:	2300      	movs	r3, #0
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	2320      	movs	r3, #32
 8007ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae6:	2330      	movs	r3, #48	; 0x30
 8007ae8:	f04f 0901 	mov.w	r9, #1
 8007aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007af0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007cb0 <_vfiprintf_r+0x24c>
 8007af4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af8:	4623      	mov	r3, r4
 8007afa:	469a      	mov	sl, r3
 8007afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b00:	b10a      	cbz	r2, 8007b06 <_vfiprintf_r+0xa2>
 8007b02:	2a25      	cmp	r2, #37	; 0x25
 8007b04:	d1f9      	bne.n	8007afa <_vfiprintf_r+0x96>
 8007b06:	ebba 0b04 	subs.w	fp, sl, r4
 8007b0a:	d00b      	beq.n	8007b24 <_vfiprintf_r+0xc0>
 8007b0c:	465b      	mov	r3, fp
 8007b0e:	4622      	mov	r2, r4
 8007b10:	4629      	mov	r1, r5
 8007b12:	4630      	mov	r0, r6
 8007b14:	f7ff ff94 	bl	8007a40 <__sfputs_r>
 8007b18:	3001      	adds	r0, #1
 8007b1a:	f000 80aa 	beq.w	8007c72 <_vfiprintf_r+0x20e>
 8007b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b20:	445a      	add	r2, fp
 8007b22:	9209      	str	r2, [sp, #36]	; 0x24
 8007b24:	f89a 3000 	ldrb.w	r3, [sl]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80a2 	beq.w	8007c72 <_vfiprintf_r+0x20e>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f04f 32ff 	mov.w	r2, #4294967295
 8007b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b38:	f10a 0a01 	add.w	sl, sl, #1
 8007b3c:	9304      	str	r3, [sp, #16]
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b44:	931a      	str	r3, [sp, #104]	; 0x68
 8007b46:	4654      	mov	r4, sl
 8007b48:	2205      	movs	r2, #5
 8007b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b4e:	4858      	ldr	r0, [pc, #352]	; (8007cb0 <_vfiprintf_r+0x24c>)
 8007b50:	f7ff f8d0 	bl	8006cf4 <memchr>
 8007b54:	9a04      	ldr	r2, [sp, #16]
 8007b56:	b9d8      	cbnz	r0, 8007b90 <_vfiprintf_r+0x12c>
 8007b58:	06d1      	lsls	r1, r2, #27
 8007b5a:	bf44      	itt	mi
 8007b5c:	2320      	movmi	r3, #32
 8007b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b62:	0713      	lsls	r3, r2, #28
 8007b64:	bf44      	itt	mi
 8007b66:	232b      	movmi	r3, #43	; 0x2b
 8007b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b70:	2b2a      	cmp	r3, #42	; 0x2a
 8007b72:	d015      	beq.n	8007ba0 <_vfiprintf_r+0x13c>
 8007b74:	4654      	mov	r4, sl
 8007b76:	2000      	movs	r0, #0
 8007b78:	f04f 0c0a 	mov.w	ip, #10
 8007b7c:	9a07      	ldr	r2, [sp, #28]
 8007b7e:	4621      	mov	r1, r4
 8007b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b84:	3b30      	subs	r3, #48	; 0x30
 8007b86:	2b09      	cmp	r3, #9
 8007b88:	d94e      	bls.n	8007c28 <_vfiprintf_r+0x1c4>
 8007b8a:	b1b0      	cbz	r0, 8007bba <_vfiprintf_r+0x156>
 8007b8c:	9207      	str	r2, [sp, #28]
 8007b8e:	e014      	b.n	8007bba <_vfiprintf_r+0x156>
 8007b90:	eba0 0308 	sub.w	r3, r0, r8
 8007b94:	fa09 f303 	lsl.w	r3, r9, r3
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	46a2      	mov	sl, r4
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	e7d2      	b.n	8007b46 <_vfiprintf_r+0xe2>
 8007ba0:	9b03      	ldr	r3, [sp, #12]
 8007ba2:	1d19      	adds	r1, r3, #4
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	9103      	str	r1, [sp, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	bfbb      	ittet	lt
 8007bac:	425b      	neglt	r3, r3
 8007bae:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb2:	9307      	strge	r3, [sp, #28]
 8007bb4:	9307      	strlt	r3, [sp, #28]
 8007bb6:	bfb8      	it	lt
 8007bb8:	9204      	strlt	r2, [sp, #16]
 8007bba:	7823      	ldrb	r3, [r4, #0]
 8007bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bbe:	d10c      	bne.n	8007bda <_vfiprintf_r+0x176>
 8007bc0:	7863      	ldrb	r3, [r4, #1]
 8007bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bc4:	d135      	bne.n	8007c32 <_vfiprintf_r+0x1ce>
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	3402      	adds	r4, #2
 8007bca:	1d1a      	adds	r2, r3, #4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	9203      	str	r2, [sp, #12]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	bfb8      	it	lt
 8007bd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007cb4 <_vfiprintf_r+0x250>
 8007bde:	2203      	movs	r2, #3
 8007be0:	4650      	mov	r0, sl
 8007be2:	7821      	ldrb	r1, [r4, #0]
 8007be4:	f7ff f886 	bl	8006cf4 <memchr>
 8007be8:	b140      	cbz	r0, 8007bfc <_vfiprintf_r+0x198>
 8007bea:	2340      	movs	r3, #64	; 0x40
 8007bec:	eba0 000a 	sub.w	r0, r0, sl
 8007bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8007bf4:	9b04      	ldr	r3, [sp, #16]
 8007bf6:	3401      	adds	r4, #1
 8007bf8:	4303      	orrs	r3, r0
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	2206      	movs	r2, #6
 8007c02:	482d      	ldr	r0, [pc, #180]	; (8007cb8 <_vfiprintf_r+0x254>)
 8007c04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c08:	f7ff f874 	bl	8006cf4 <memchr>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d03f      	beq.n	8007c90 <_vfiprintf_r+0x22c>
 8007c10:	4b2a      	ldr	r3, [pc, #168]	; (8007cbc <_vfiprintf_r+0x258>)
 8007c12:	bb1b      	cbnz	r3, 8007c5c <_vfiprintf_r+0x1f8>
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	3307      	adds	r3, #7
 8007c18:	f023 0307 	bic.w	r3, r3, #7
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c22:	443b      	add	r3, r7
 8007c24:	9309      	str	r3, [sp, #36]	; 0x24
 8007c26:	e767      	b.n	8007af8 <_vfiprintf_r+0x94>
 8007c28:	460c      	mov	r4, r1
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c30:	e7a5      	b.n	8007b7e <_vfiprintf_r+0x11a>
 8007c32:	2300      	movs	r3, #0
 8007c34:	f04f 0c0a 	mov.w	ip, #10
 8007c38:	4619      	mov	r1, r3
 8007c3a:	3401      	adds	r4, #1
 8007c3c:	9305      	str	r3, [sp, #20]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c44:	3a30      	subs	r2, #48	; 0x30
 8007c46:	2a09      	cmp	r2, #9
 8007c48:	d903      	bls.n	8007c52 <_vfiprintf_r+0x1ee>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0c5      	beq.n	8007bda <_vfiprintf_r+0x176>
 8007c4e:	9105      	str	r1, [sp, #20]
 8007c50:	e7c3      	b.n	8007bda <_vfiprintf_r+0x176>
 8007c52:	4604      	mov	r4, r0
 8007c54:	2301      	movs	r3, #1
 8007c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c5a:	e7f0      	b.n	8007c3e <_vfiprintf_r+0x1da>
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4630      	mov	r0, r6
 8007c64:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <_vfiprintf_r+0x25c>)
 8007c66:	a904      	add	r1, sp, #16
 8007c68:	f7fd fdda 	bl	8005820 <_printf_float>
 8007c6c:	4607      	mov	r7, r0
 8007c6e:	1c78      	adds	r0, r7, #1
 8007c70:	d1d6      	bne.n	8007c20 <_vfiprintf_r+0x1bc>
 8007c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c74:	07d9      	lsls	r1, r3, #31
 8007c76:	d405      	bmi.n	8007c84 <_vfiprintf_r+0x220>
 8007c78:	89ab      	ldrh	r3, [r5, #12]
 8007c7a:	059a      	lsls	r2, r3, #22
 8007c7c:	d402      	bmi.n	8007c84 <_vfiprintf_r+0x220>
 8007c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c80:	f000 faab 	bl	80081da <__retarget_lock_release_recursive>
 8007c84:	89ab      	ldrh	r3, [r5, #12]
 8007c86:	065b      	lsls	r3, r3, #25
 8007c88:	f53f af12 	bmi.w	8007ab0 <_vfiprintf_r+0x4c>
 8007c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c8e:	e711      	b.n	8007ab4 <_vfiprintf_r+0x50>
 8007c90:	ab03      	add	r3, sp, #12
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	462a      	mov	r2, r5
 8007c96:	4630      	mov	r0, r6
 8007c98:	4b09      	ldr	r3, [pc, #36]	; (8007cc0 <_vfiprintf_r+0x25c>)
 8007c9a:	a904      	add	r1, sp, #16
 8007c9c:	f7fe f85c 	bl	8005d58 <_printf_i>
 8007ca0:	e7e4      	b.n	8007c6c <_vfiprintf_r+0x208>
 8007ca2:	bf00      	nop
 8007ca4:	08008924 	.word	0x08008924
 8007ca8:	08008944 	.word	0x08008944
 8007cac:	08008904 	.word	0x08008904
 8007cb0:	080087ac 	.word	0x080087ac
 8007cb4:	080087b2 	.word	0x080087b2
 8007cb8:	080087b6 	.word	0x080087b6
 8007cbc:	08005821 	.word	0x08005821
 8007cc0:	08007a41 	.word	0x08007a41

08007cc4 <__swbuf_r>:
 8007cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc6:	460e      	mov	r6, r1
 8007cc8:	4614      	mov	r4, r2
 8007cca:	4605      	mov	r5, r0
 8007ccc:	b118      	cbz	r0, 8007cd6 <__swbuf_r+0x12>
 8007cce:	6983      	ldr	r3, [r0, #24]
 8007cd0:	b90b      	cbnz	r3, 8007cd6 <__swbuf_r+0x12>
 8007cd2:	f000 f9e3 	bl	800809c <__sinit>
 8007cd6:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <__swbuf_r+0x98>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d12b      	bne.n	8007d34 <__swbuf_r+0x70>
 8007cdc:	686c      	ldr	r4, [r5, #4]
 8007cde:	69a3      	ldr	r3, [r4, #24]
 8007ce0:	60a3      	str	r3, [r4, #8]
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	071a      	lsls	r2, r3, #28
 8007ce6:	d52f      	bpl.n	8007d48 <__swbuf_r+0x84>
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	b36b      	cbz	r3, 8007d48 <__swbuf_r+0x84>
 8007cec:	6923      	ldr	r3, [r4, #16]
 8007cee:	6820      	ldr	r0, [r4, #0]
 8007cf0:	b2f6      	uxtb	r6, r6
 8007cf2:	1ac0      	subs	r0, r0, r3
 8007cf4:	6963      	ldr	r3, [r4, #20]
 8007cf6:	4637      	mov	r7, r6
 8007cf8:	4283      	cmp	r3, r0
 8007cfa:	dc04      	bgt.n	8007d06 <__swbuf_r+0x42>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	f000 f938 	bl	8007f74 <_fflush_r>
 8007d04:	bb30      	cbnz	r0, 8007d54 <__swbuf_r+0x90>
 8007d06:	68a3      	ldr	r3, [r4, #8]
 8007d08:	3001      	adds	r0, #1
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	1c5a      	adds	r2, r3, #1
 8007d12:	6022      	str	r2, [r4, #0]
 8007d14:	701e      	strb	r6, [r3, #0]
 8007d16:	6963      	ldr	r3, [r4, #20]
 8007d18:	4283      	cmp	r3, r0
 8007d1a:	d004      	beq.n	8007d26 <__swbuf_r+0x62>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	07db      	lsls	r3, r3, #31
 8007d20:	d506      	bpl.n	8007d30 <__swbuf_r+0x6c>
 8007d22:	2e0a      	cmp	r6, #10
 8007d24:	d104      	bne.n	8007d30 <__swbuf_r+0x6c>
 8007d26:	4621      	mov	r1, r4
 8007d28:	4628      	mov	r0, r5
 8007d2a:	f000 f923 	bl	8007f74 <_fflush_r>
 8007d2e:	b988      	cbnz	r0, 8007d54 <__swbuf_r+0x90>
 8007d30:	4638      	mov	r0, r7
 8007d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d34:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <__swbuf_r+0x9c>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d101      	bne.n	8007d3e <__swbuf_r+0x7a>
 8007d3a:	68ac      	ldr	r4, [r5, #8]
 8007d3c:	e7cf      	b.n	8007cde <__swbuf_r+0x1a>
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <__swbuf_r+0xa0>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf08      	it	eq
 8007d44:	68ec      	ldreq	r4, [r5, #12]
 8007d46:	e7ca      	b.n	8007cde <__swbuf_r+0x1a>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 f81a 	bl	8007d84 <__swsetup_r>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d0cb      	beq.n	8007cec <__swbuf_r+0x28>
 8007d54:	f04f 37ff 	mov.w	r7, #4294967295
 8007d58:	e7ea      	b.n	8007d30 <__swbuf_r+0x6c>
 8007d5a:	bf00      	nop
 8007d5c:	08008924 	.word	0x08008924
 8007d60:	08008944 	.word	0x08008944
 8007d64:	08008904 	.word	0x08008904

08007d68 <__ascii_wctomb>:
 8007d68:	4603      	mov	r3, r0
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	b141      	cbz	r1, 8007d80 <__ascii_wctomb+0x18>
 8007d6e:	2aff      	cmp	r2, #255	; 0xff
 8007d70:	d904      	bls.n	8007d7c <__ascii_wctomb+0x14>
 8007d72:	228a      	movs	r2, #138	; 0x8a
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	4770      	bx	lr
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	700a      	strb	r2, [r1, #0]
 8007d80:	4770      	bx	lr
	...

08007d84 <__swsetup_r>:
 8007d84:	4b32      	ldr	r3, [pc, #200]	; (8007e50 <__swsetup_r+0xcc>)
 8007d86:	b570      	push	{r4, r5, r6, lr}
 8007d88:	681d      	ldr	r5, [r3, #0]
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	b125      	cbz	r5, 8007d9a <__swsetup_r+0x16>
 8007d90:	69ab      	ldr	r3, [r5, #24]
 8007d92:	b913      	cbnz	r3, 8007d9a <__swsetup_r+0x16>
 8007d94:	4628      	mov	r0, r5
 8007d96:	f000 f981 	bl	800809c <__sinit>
 8007d9a:	4b2e      	ldr	r3, [pc, #184]	; (8007e54 <__swsetup_r+0xd0>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	d10f      	bne.n	8007dc0 <__swsetup_r+0x3c>
 8007da0:	686c      	ldr	r4, [r5, #4]
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da8:	0719      	lsls	r1, r3, #28
 8007daa:	d42c      	bmi.n	8007e06 <__swsetup_r+0x82>
 8007dac:	06dd      	lsls	r5, r3, #27
 8007dae:	d411      	bmi.n	8007dd4 <__swsetup_r+0x50>
 8007db0:	2309      	movs	r3, #9
 8007db2:	6033      	str	r3, [r6, #0]
 8007db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	e03e      	b.n	8007e3e <__swsetup_r+0xba>
 8007dc0:	4b25      	ldr	r3, [pc, #148]	; (8007e58 <__swsetup_r+0xd4>)
 8007dc2:	429c      	cmp	r4, r3
 8007dc4:	d101      	bne.n	8007dca <__swsetup_r+0x46>
 8007dc6:	68ac      	ldr	r4, [r5, #8]
 8007dc8:	e7eb      	b.n	8007da2 <__swsetup_r+0x1e>
 8007dca:	4b24      	ldr	r3, [pc, #144]	; (8007e5c <__swsetup_r+0xd8>)
 8007dcc:	429c      	cmp	r4, r3
 8007dce:	bf08      	it	eq
 8007dd0:	68ec      	ldreq	r4, [r5, #12]
 8007dd2:	e7e6      	b.n	8007da2 <__swsetup_r+0x1e>
 8007dd4:	0758      	lsls	r0, r3, #29
 8007dd6:	d512      	bpl.n	8007dfe <__swsetup_r+0x7a>
 8007dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dda:	b141      	cbz	r1, 8007dee <__swsetup_r+0x6a>
 8007ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007de0:	4299      	cmp	r1, r3
 8007de2:	d002      	beq.n	8007dea <__swsetup_r+0x66>
 8007de4:	4630      	mov	r0, r6
 8007de6:	f7ff fb37 	bl	8007458 <_free_r>
 8007dea:	2300      	movs	r3, #0
 8007dec:	6363      	str	r3, [r4, #52]	; 0x34
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	2300      	movs	r3, #0
 8007df8:	6063      	str	r3, [r4, #4]
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f043 0308 	orr.w	r3, r3, #8
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	b94b      	cbnz	r3, 8007e1e <__swsetup_r+0x9a>
 8007e0a:	89a3      	ldrh	r3, [r4, #12]
 8007e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e14:	d003      	beq.n	8007e1e <__swsetup_r+0x9a>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f000 fa05 	bl	8008228 <__smakebuf_r>
 8007e1e:	89a0      	ldrh	r0, [r4, #12]
 8007e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e24:	f010 0301 	ands.w	r3, r0, #1
 8007e28:	d00a      	beq.n	8007e40 <__swsetup_r+0xbc>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60a3      	str	r3, [r4, #8]
 8007e2e:	6963      	ldr	r3, [r4, #20]
 8007e30:	425b      	negs	r3, r3
 8007e32:	61a3      	str	r3, [r4, #24]
 8007e34:	6923      	ldr	r3, [r4, #16]
 8007e36:	b943      	cbnz	r3, 8007e4a <__swsetup_r+0xc6>
 8007e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e3c:	d1ba      	bne.n	8007db4 <__swsetup_r+0x30>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}
 8007e40:	0781      	lsls	r1, r0, #30
 8007e42:	bf58      	it	pl
 8007e44:	6963      	ldrpl	r3, [r4, #20]
 8007e46:	60a3      	str	r3, [r4, #8]
 8007e48:	e7f4      	b.n	8007e34 <__swsetup_r+0xb0>
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	e7f7      	b.n	8007e3e <__swsetup_r+0xba>
 8007e4e:	bf00      	nop
 8007e50:	20000010 	.word	0x20000010
 8007e54:	08008924 	.word	0x08008924
 8007e58:	08008944 	.word	0x08008944
 8007e5c:	08008904 	.word	0x08008904

08007e60 <abort>:
 8007e60:	2006      	movs	r0, #6
 8007e62:	b508      	push	{r3, lr}
 8007e64:	f000 fa50 	bl	8008308 <raise>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7fa f8dc 	bl	8002026 <_exit>
	...

08007e70 <__sflush_r>:
 8007e70:	898a      	ldrh	r2, [r1, #12]
 8007e72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e74:	4605      	mov	r5, r0
 8007e76:	0710      	lsls	r0, r2, #28
 8007e78:	460c      	mov	r4, r1
 8007e7a:	d457      	bmi.n	8007f2c <__sflush_r+0xbc>
 8007e7c:	684b      	ldr	r3, [r1, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dc04      	bgt.n	8007e8c <__sflush_r+0x1c>
 8007e82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dc01      	bgt.n	8007e8c <__sflush_r+0x1c>
 8007e88:	2000      	movs	r0, #0
 8007e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d0fa      	beq.n	8007e88 <__sflush_r+0x18>
 8007e92:	2300      	movs	r3, #0
 8007e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e98:	682f      	ldr	r7, [r5, #0]
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	d032      	beq.n	8007f04 <__sflush_r+0x94>
 8007e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	075a      	lsls	r2, r3, #29
 8007ea4:	d505      	bpl.n	8007eb2 <__sflush_r+0x42>
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	1ac0      	subs	r0, r0, r3
 8007eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eac:	b10b      	cbz	r3, 8007eb2 <__sflush_r+0x42>
 8007eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb0:	1ac0      	subs	r0, r0, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb8:	4628      	mov	r0, r5
 8007eba:	6a21      	ldr	r1, [r4, #32]
 8007ebc:	47b0      	blx	r6
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	d106      	bne.n	8007ed2 <__sflush_r+0x62>
 8007ec4:	6829      	ldr	r1, [r5, #0]
 8007ec6:	291d      	cmp	r1, #29
 8007ec8:	d82c      	bhi.n	8007f24 <__sflush_r+0xb4>
 8007eca:	4a29      	ldr	r2, [pc, #164]	; (8007f70 <__sflush_r+0x100>)
 8007ecc:	40ca      	lsrs	r2, r1
 8007ece:	07d6      	lsls	r6, r2, #31
 8007ed0:	d528      	bpl.n	8007f24 <__sflush_r+0xb4>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6062      	str	r2, [r4, #4]
 8007ed6:	6922      	ldr	r2, [r4, #16]
 8007ed8:	04d9      	lsls	r1, r3, #19
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	d504      	bpl.n	8007ee8 <__sflush_r+0x78>
 8007ede:	1c42      	adds	r2, r0, #1
 8007ee0:	d101      	bne.n	8007ee6 <__sflush_r+0x76>
 8007ee2:	682b      	ldr	r3, [r5, #0]
 8007ee4:	b903      	cbnz	r3, 8007ee8 <__sflush_r+0x78>
 8007ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eea:	602f      	str	r7, [r5, #0]
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d0cb      	beq.n	8007e88 <__sflush_r+0x18>
 8007ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	d002      	beq.n	8007efe <__sflush_r+0x8e>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff faad 	bl	8007458 <_free_r>
 8007efe:	2000      	movs	r0, #0
 8007f00:	6360      	str	r0, [r4, #52]	; 0x34
 8007f02:	e7c2      	b.n	8007e8a <__sflush_r+0x1a>
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	2301      	movs	r3, #1
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b0      	blx	r6
 8007f0c:	1c41      	adds	r1, r0, #1
 8007f0e:	d1c7      	bne.n	8007ea0 <__sflush_r+0x30>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c4      	beq.n	8007ea0 <__sflush_r+0x30>
 8007f16:	2b1d      	cmp	r3, #29
 8007f18:	d001      	beq.n	8007f1e <__sflush_r+0xae>
 8007f1a:	2b16      	cmp	r3, #22
 8007f1c:	d101      	bne.n	8007f22 <__sflush_r+0xb2>
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	e7b2      	b.n	8007e88 <__sflush_r+0x18>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	e7ae      	b.n	8007e8a <__sflush_r+0x1a>
 8007f2c:	690f      	ldr	r7, [r1, #16]
 8007f2e:	2f00      	cmp	r7, #0
 8007f30:	d0aa      	beq.n	8007e88 <__sflush_r+0x18>
 8007f32:	0793      	lsls	r3, r2, #30
 8007f34:	bf18      	it	ne
 8007f36:	2300      	movne	r3, #0
 8007f38:	680e      	ldr	r6, [r1, #0]
 8007f3a:	bf08      	it	eq
 8007f3c:	694b      	ldreq	r3, [r1, #20]
 8007f3e:	1bf6      	subs	r6, r6, r7
 8007f40:	600f      	str	r7, [r1, #0]
 8007f42:	608b      	str	r3, [r1, #8]
 8007f44:	2e00      	cmp	r6, #0
 8007f46:	dd9f      	ble.n	8007e88 <__sflush_r+0x18>
 8007f48:	4633      	mov	r3, r6
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	6a21      	ldr	r1, [r4, #32]
 8007f50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007f54:	47e0      	blx	ip
 8007f56:	2800      	cmp	r0, #0
 8007f58:	dc06      	bgt.n	8007f68 <__sflush_r+0xf8>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f64:	81a3      	strh	r3, [r4, #12]
 8007f66:	e790      	b.n	8007e8a <__sflush_r+0x1a>
 8007f68:	4407      	add	r7, r0
 8007f6a:	1a36      	subs	r6, r6, r0
 8007f6c:	e7ea      	b.n	8007f44 <__sflush_r+0xd4>
 8007f6e:	bf00      	nop
 8007f70:	20400001 	.word	0x20400001

08007f74 <_fflush_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	690b      	ldr	r3, [r1, #16]
 8007f78:	4605      	mov	r5, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	b913      	cbnz	r3, 8007f84 <_fflush_r+0x10>
 8007f7e:	2500      	movs	r5, #0
 8007f80:	4628      	mov	r0, r5
 8007f82:	bd38      	pop	{r3, r4, r5, pc}
 8007f84:	b118      	cbz	r0, 8007f8e <_fflush_r+0x1a>
 8007f86:	6983      	ldr	r3, [r0, #24]
 8007f88:	b90b      	cbnz	r3, 8007f8e <_fflush_r+0x1a>
 8007f8a:	f000 f887 	bl	800809c <__sinit>
 8007f8e:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <_fflush_r+0x6c>)
 8007f90:	429c      	cmp	r4, r3
 8007f92:	d11b      	bne.n	8007fcc <_fflush_r+0x58>
 8007f94:	686c      	ldr	r4, [r5, #4]
 8007f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0ef      	beq.n	8007f7e <_fflush_r+0xa>
 8007f9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fa0:	07d0      	lsls	r0, r2, #31
 8007fa2:	d404      	bmi.n	8007fae <_fflush_r+0x3a>
 8007fa4:	0599      	lsls	r1, r3, #22
 8007fa6:	d402      	bmi.n	8007fae <_fflush_r+0x3a>
 8007fa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007faa:	f000 f915 	bl	80081d8 <__retarget_lock_acquire_recursive>
 8007fae:	4628      	mov	r0, r5
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	f7ff ff5d 	bl	8007e70 <__sflush_r>
 8007fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fb8:	4605      	mov	r5, r0
 8007fba:	07da      	lsls	r2, r3, #31
 8007fbc:	d4e0      	bmi.n	8007f80 <_fflush_r+0xc>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	059b      	lsls	r3, r3, #22
 8007fc2:	d4dd      	bmi.n	8007f80 <_fflush_r+0xc>
 8007fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fc6:	f000 f908 	bl	80081da <__retarget_lock_release_recursive>
 8007fca:	e7d9      	b.n	8007f80 <_fflush_r+0xc>
 8007fcc:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <_fflush_r+0x70>)
 8007fce:	429c      	cmp	r4, r3
 8007fd0:	d101      	bne.n	8007fd6 <_fflush_r+0x62>
 8007fd2:	68ac      	ldr	r4, [r5, #8]
 8007fd4:	e7df      	b.n	8007f96 <_fflush_r+0x22>
 8007fd6:	4b04      	ldr	r3, [pc, #16]	; (8007fe8 <_fflush_r+0x74>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	bf08      	it	eq
 8007fdc:	68ec      	ldreq	r4, [r5, #12]
 8007fde:	e7da      	b.n	8007f96 <_fflush_r+0x22>
 8007fe0:	08008924 	.word	0x08008924
 8007fe4:	08008944 	.word	0x08008944
 8007fe8:	08008904 	.word	0x08008904

08007fec <std>:
 8007fec:	2300      	movs	r3, #0
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ffa:	6083      	str	r3, [r0, #8]
 8007ffc:	8181      	strh	r1, [r0, #12]
 8007ffe:	6643      	str	r3, [r0, #100]	; 0x64
 8008000:	81c2      	strh	r2, [r0, #14]
 8008002:	6183      	str	r3, [r0, #24]
 8008004:	4619      	mov	r1, r3
 8008006:	2208      	movs	r2, #8
 8008008:	305c      	adds	r0, #92	; 0x5c
 800800a:	f7fd fb63 	bl	80056d4 <memset>
 800800e:	4b05      	ldr	r3, [pc, #20]	; (8008024 <std+0x38>)
 8008010:	6224      	str	r4, [r4, #32]
 8008012:	6263      	str	r3, [r4, #36]	; 0x24
 8008014:	4b04      	ldr	r3, [pc, #16]	; (8008028 <std+0x3c>)
 8008016:	62a3      	str	r3, [r4, #40]	; 0x28
 8008018:	4b04      	ldr	r3, [pc, #16]	; (800802c <std+0x40>)
 800801a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800801c:	4b04      	ldr	r3, [pc, #16]	; (8008030 <std+0x44>)
 800801e:	6323      	str	r3, [r4, #48]	; 0x30
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	08008341 	.word	0x08008341
 8008028:	08008363 	.word	0x08008363
 800802c:	0800839b 	.word	0x0800839b
 8008030:	080083bf 	.word	0x080083bf

08008034 <_cleanup_r>:
 8008034:	4901      	ldr	r1, [pc, #4]	; (800803c <_cleanup_r+0x8>)
 8008036:	f000 b8af 	b.w	8008198 <_fwalk_reent>
 800803a:	bf00      	nop
 800803c:	08007f75 	.word	0x08007f75

08008040 <__sfmoreglue>:
 8008040:	2268      	movs	r2, #104	; 0x68
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	1e4d      	subs	r5, r1, #1
 8008046:	4355      	muls	r5, r2
 8008048:	460e      	mov	r6, r1
 800804a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800804e:	f7ff fa6b 	bl	8007528 <_malloc_r>
 8008052:	4604      	mov	r4, r0
 8008054:	b140      	cbz	r0, 8008068 <__sfmoreglue+0x28>
 8008056:	2100      	movs	r1, #0
 8008058:	e9c0 1600 	strd	r1, r6, [r0]
 800805c:	300c      	adds	r0, #12
 800805e:	60a0      	str	r0, [r4, #8]
 8008060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008064:	f7fd fb36 	bl	80056d4 <memset>
 8008068:	4620      	mov	r0, r4
 800806a:	bd70      	pop	{r4, r5, r6, pc}

0800806c <__sfp_lock_acquire>:
 800806c:	4801      	ldr	r0, [pc, #4]	; (8008074 <__sfp_lock_acquire+0x8>)
 800806e:	f000 b8b3 	b.w	80081d8 <__retarget_lock_acquire_recursive>
 8008072:	bf00      	nop
 8008074:	2000053d 	.word	0x2000053d

08008078 <__sfp_lock_release>:
 8008078:	4801      	ldr	r0, [pc, #4]	; (8008080 <__sfp_lock_release+0x8>)
 800807a:	f000 b8ae 	b.w	80081da <__retarget_lock_release_recursive>
 800807e:	bf00      	nop
 8008080:	2000053d 	.word	0x2000053d

08008084 <__sinit_lock_acquire>:
 8008084:	4801      	ldr	r0, [pc, #4]	; (800808c <__sinit_lock_acquire+0x8>)
 8008086:	f000 b8a7 	b.w	80081d8 <__retarget_lock_acquire_recursive>
 800808a:	bf00      	nop
 800808c:	2000053e 	.word	0x2000053e

08008090 <__sinit_lock_release>:
 8008090:	4801      	ldr	r0, [pc, #4]	; (8008098 <__sinit_lock_release+0x8>)
 8008092:	f000 b8a2 	b.w	80081da <__retarget_lock_release_recursive>
 8008096:	bf00      	nop
 8008098:	2000053e 	.word	0x2000053e

0800809c <__sinit>:
 800809c:	b510      	push	{r4, lr}
 800809e:	4604      	mov	r4, r0
 80080a0:	f7ff fff0 	bl	8008084 <__sinit_lock_acquire>
 80080a4:	69a3      	ldr	r3, [r4, #24]
 80080a6:	b11b      	cbz	r3, 80080b0 <__sinit+0x14>
 80080a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ac:	f7ff bff0 	b.w	8008090 <__sinit_lock_release>
 80080b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080b4:	6523      	str	r3, [r4, #80]	; 0x50
 80080b6:	4b13      	ldr	r3, [pc, #76]	; (8008104 <__sinit+0x68>)
 80080b8:	4a13      	ldr	r2, [pc, #76]	; (8008108 <__sinit+0x6c>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80080be:	42a3      	cmp	r3, r4
 80080c0:	bf08      	it	eq
 80080c2:	2301      	moveq	r3, #1
 80080c4:	4620      	mov	r0, r4
 80080c6:	bf08      	it	eq
 80080c8:	61a3      	streq	r3, [r4, #24]
 80080ca:	f000 f81f 	bl	800810c <__sfp>
 80080ce:	6060      	str	r0, [r4, #4]
 80080d0:	4620      	mov	r0, r4
 80080d2:	f000 f81b 	bl	800810c <__sfp>
 80080d6:	60a0      	str	r0, [r4, #8]
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 f817 	bl	800810c <__sfp>
 80080de:	2200      	movs	r2, #0
 80080e0:	2104      	movs	r1, #4
 80080e2:	60e0      	str	r0, [r4, #12]
 80080e4:	6860      	ldr	r0, [r4, #4]
 80080e6:	f7ff ff81 	bl	8007fec <std>
 80080ea:	2201      	movs	r2, #1
 80080ec:	2109      	movs	r1, #9
 80080ee:	68a0      	ldr	r0, [r4, #8]
 80080f0:	f7ff ff7c 	bl	8007fec <std>
 80080f4:	2202      	movs	r2, #2
 80080f6:	2112      	movs	r1, #18
 80080f8:	68e0      	ldr	r0, [r4, #12]
 80080fa:	f7ff ff77 	bl	8007fec <std>
 80080fe:	2301      	movs	r3, #1
 8008100:	61a3      	str	r3, [r4, #24]
 8008102:	e7d1      	b.n	80080a8 <__sinit+0xc>
 8008104:	0800858c 	.word	0x0800858c
 8008108:	08008035 	.word	0x08008035

0800810c <__sfp>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	4607      	mov	r7, r0
 8008110:	f7ff ffac 	bl	800806c <__sfp_lock_acquire>
 8008114:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <__sfp+0x84>)
 8008116:	681e      	ldr	r6, [r3, #0]
 8008118:	69b3      	ldr	r3, [r6, #24]
 800811a:	b913      	cbnz	r3, 8008122 <__sfp+0x16>
 800811c:	4630      	mov	r0, r6
 800811e:	f7ff ffbd 	bl	800809c <__sinit>
 8008122:	3648      	adds	r6, #72	; 0x48
 8008124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008128:	3b01      	subs	r3, #1
 800812a:	d503      	bpl.n	8008134 <__sfp+0x28>
 800812c:	6833      	ldr	r3, [r6, #0]
 800812e:	b30b      	cbz	r3, 8008174 <__sfp+0x68>
 8008130:	6836      	ldr	r6, [r6, #0]
 8008132:	e7f7      	b.n	8008124 <__sfp+0x18>
 8008134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008138:	b9d5      	cbnz	r5, 8008170 <__sfp+0x64>
 800813a:	4b16      	ldr	r3, [pc, #88]	; (8008194 <__sfp+0x88>)
 800813c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008140:	60e3      	str	r3, [r4, #12]
 8008142:	6665      	str	r5, [r4, #100]	; 0x64
 8008144:	f000 f847 	bl	80081d6 <__retarget_lock_init_recursive>
 8008148:	f7ff ff96 	bl	8008078 <__sfp_lock_release>
 800814c:	2208      	movs	r2, #8
 800814e:	4629      	mov	r1, r5
 8008150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008158:	6025      	str	r5, [r4, #0]
 800815a:	61a5      	str	r5, [r4, #24]
 800815c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008160:	f7fd fab8 	bl	80056d4 <memset>
 8008164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800816c:	4620      	mov	r0, r4
 800816e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008170:	3468      	adds	r4, #104	; 0x68
 8008172:	e7d9      	b.n	8008128 <__sfp+0x1c>
 8008174:	2104      	movs	r1, #4
 8008176:	4638      	mov	r0, r7
 8008178:	f7ff ff62 	bl	8008040 <__sfmoreglue>
 800817c:	4604      	mov	r4, r0
 800817e:	6030      	str	r0, [r6, #0]
 8008180:	2800      	cmp	r0, #0
 8008182:	d1d5      	bne.n	8008130 <__sfp+0x24>
 8008184:	f7ff ff78 	bl	8008078 <__sfp_lock_release>
 8008188:	230c      	movs	r3, #12
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	e7ee      	b.n	800816c <__sfp+0x60>
 800818e:	bf00      	nop
 8008190:	0800858c 	.word	0x0800858c
 8008194:	ffff0001 	.word	0xffff0001

08008198 <_fwalk_reent>:
 8008198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800819c:	4606      	mov	r6, r0
 800819e:	4688      	mov	r8, r1
 80081a0:	2700      	movs	r7, #0
 80081a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081aa:	f1b9 0901 	subs.w	r9, r9, #1
 80081ae:	d505      	bpl.n	80081bc <_fwalk_reent+0x24>
 80081b0:	6824      	ldr	r4, [r4, #0]
 80081b2:	2c00      	cmp	r4, #0
 80081b4:	d1f7      	bne.n	80081a6 <_fwalk_reent+0xe>
 80081b6:	4638      	mov	r0, r7
 80081b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081bc:	89ab      	ldrh	r3, [r5, #12]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d907      	bls.n	80081d2 <_fwalk_reent+0x3a>
 80081c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081c6:	3301      	adds	r3, #1
 80081c8:	d003      	beq.n	80081d2 <_fwalk_reent+0x3a>
 80081ca:	4629      	mov	r1, r5
 80081cc:	4630      	mov	r0, r6
 80081ce:	47c0      	blx	r8
 80081d0:	4307      	orrs	r7, r0
 80081d2:	3568      	adds	r5, #104	; 0x68
 80081d4:	e7e9      	b.n	80081aa <_fwalk_reent+0x12>

080081d6 <__retarget_lock_init_recursive>:
 80081d6:	4770      	bx	lr

080081d8 <__retarget_lock_acquire_recursive>:
 80081d8:	4770      	bx	lr

080081da <__retarget_lock_release_recursive>:
 80081da:	4770      	bx	lr

080081dc <__swhatbuf_r>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	460e      	mov	r6, r1
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	4614      	mov	r4, r2
 80081e6:	2900      	cmp	r1, #0
 80081e8:	461d      	mov	r5, r3
 80081ea:	b096      	sub	sp, #88	; 0x58
 80081ec:	da08      	bge.n	8008200 <__swhatbuf_r+0x24>
 80081ee:	2200      	movs	r2, #0
 80081f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081f4:	602a      	str	r2, [r5, #0]
 80081f6:	061a      	lsls	r2, r3, #24
 80081f8:	d410      	bmi.n	800821c <__swhatbuf_r+0x40>
 80081fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fe:	e00e      	b.n	800821e <__swhatbuf_r+0x42>
 8008200:	466a      	mov	r2, sp
 8008202:	f000 f903 	bl	800840c <_fstat_r>
 8008206:	2800      	cmp	r0, #0
 8008208:	dbf1      	blt.n	80081ee <__swhatbuf_r+0x12>
 800820a:	9a01      	ldr	r2, [sp, #4]
 800820c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008214:	425a      	negs	r2, r3
 8008216:	415a      	adcs	r2, r3
 8008218:	602a      	str	r2, [r5, #0]
 800821a:	e7ee      	b.n	80081fa <__swhatbuf_r+0x1e>
 800821c:	2340      	movs	r3, #64	; 0x40
 800821e:	2000      	movs	r0, #0
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	b016      	add	sp, #88	; 0x58
 8008224:	bd70      	pop	{r4, r5, r6, pc}
	...

08008228 <__smakebuf_r>:
 8008228:	898b      	ldrh	r3, [r1, #12]
 800822a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800822c:	079d      	lsls	r5, r3, #30
 800822e:	4606      	mov	r6, r0
 8008230:	460c      	mov	r4, r1
 8008232:	d507      	bpl.n	8008244 <__smakebuf_r+0x1c>
 8008234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	2301      	movs	r3, #1
 800823e:	6163      	str	r3, [r4, #20]
 8008240:	b002      	add	sp, #8
 8008242:	bd70      	pop	{r4, r5, r6, pc}
 8008244:	466a      	mov	r2, sp
 8008246:	ab01      	add	r3, sp, #4
 8008248:	f7ff ffc8 	bl	80081dc <__swhatbuf_r>
 800824c:	9900      	ldr	r1, [sp, #0]
 800824e:	4605      	mov	r5, r0
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff f969 	bl	8007528 <_malloc_r>
 8008256:	b948      	cbnz	r0, 800826c <__smakebuf_r+0x44>
 8008258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825c:	059a      	lsls	r2, r3, #22
 800825e:	d4ef      	bmi.n	8008240 <__smakebuf_r+0x18>
 8008260:	f023 0303 	bic.w	r3, r3, #3
 8008264:	f043 0302 	orr.w	r3, r3, #2
 8008268:	81a3      	strh	r3, [r4, #12]
 800826a:	e7e3      	b.n	8008234 <__smakebuf_r+0xc>
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <__smakebuf_r+0x7c>)
 800826e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008270:	89a3      	ldrh	r3, [r4, #12]
 8008272:	6020      	str	r0, [r4, #0]
 8008274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008278:	81a3      	strh	r3, [r4, #12]
 800827a:	9b00      	ldr	r3, [sp, #0]
 800827c:	6120      	str	r0, [r4, #16]
 800827e:	6163      	str	r3, [r4, #20]
 8008280:	9b01      	ldr	r3, [sp, #4]
 8008282:	b15b      	cbz	r3, 800829c <__smakebuf_r+0x74>
 8008284:	4630      	mov	r0, r6
 8008286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800828a:	f000 f8d1 	bl	8008430 <_isatty_r>
 800828e:	b128      	cbz	r0, 800829c <__smakebuf_r+0x74>
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f023 0303 	bic.w	r3, r3, #3
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	81a3      	strh	r3, [r4, #12]
 800829c:	89a0      	ldrh	r0, [r4, #12]
 800829e:	4305      	orrs	r5, r0
 80082a0:	81a5      	strh	r5, [r4, #12]
 80082a2:	e7cd      	b.n	8008240 <__smakebuf_r+0x18>
 80082a4:	08008035 	.word	0x08008035

080082a8 <_malloc_usable_size_r>:
 80082a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ac:	1f18      	subs	r0, r3, #4
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfbc      	itt	lt
 80082b2:	580b      	ldrlt	r3, [r1, r0]
 80082b4:	18c0      	addlt	r0, r0, r3
 80082b6:	4770      	bx	lr

080082b8 <_raise_r>:
 80082b8:	291f      	cmp	r1, #31
 80082ba:	b538      	push	{r3, r4, r5, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	460d      	mov	r5, r1
 80082c0:	d904      	bls.n	80082cc <_raise_r+0x14>
 80082c2:	2316      	movs	r3, #22
 80082c4:	6003      	str	r3, [r0, #0]
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082ce:	b112      	cbz	r2, 80082d6 <_raise_r+0x1e>
 80082d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082d4:	b94b      	cbnz	r3, 80082ea <_raise_r+0x32>
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f830 	bl	800833c <_getpid_r>
 80082dc:	462a      	mov	r2, r5
 80082de:	4601      	mov	r1, r0
 80082e0:	4620      	mov	r0, r4
 80082e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e6:	f000 b817 	b.w	8008318 <_kill_r>
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d00a      	beq.n	8008304 <_raise_r+0x4c>
 80082ee:	1c59      	adds	r1, r3, #1
 80082f0:	d103      	bne.n	80082fa <_raise_r+0x42>
 80082f2:	2316      	movs	r3, #22
 80082f4:	6003      	str	r3, [r0, #0]
 80082f6:	2001      	movs	r0, #1
 80082f8:	e7e7      	b.n	80082ca <_raise_r+0x12>
 80082fa:	2400      	movs	r4, #0
 80082fc:	4628      	mov	r0, r5
 80082fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008302:	4798      	blx	r3
 8008304:	2000      	movs	r0, #0
 8008306:	e7e0      	b.n	80082ca <_raise_r+0x12>

08008308 <raise>:
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <raise+0xc>)
 800830a:	4601      	mov	r1, r0
 800830c:	6818      	ldr	r0, [r3, #0]
 800830e:	f7ff bfd3 	b.w	80082b8 <_raise_r>
 8008312:	bf00      	nop
 8008314:	20000010 	.word	0x20000010

08008318 <_kill_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	2300      	movs	r3, #0
 800831c:	4d06      	ldr	r5, [pc, #24]	; (8008338 <_kill_r+0x20>)
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	602b      	str	r3, [r5, #0]
 8008326:	f7f9 fe6e 	bl	8002006 <_kill>
 800832a:	1c43      	adds	r3, r0, #1
 800832c:	d102      	bne.n	8008334 <_kill_r+0x1c>
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	b103      	cbz	r3, 8008334 <_kill_r+0x1c>
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	bd38      	pop	{r3, r4, r5, pc}
 8008336:	bf00      	nop
 8008338:	20000538 	.word	0x20000538

0800833c <_getpid_r>:
 800833c:	f7f9 be5c 	b.w	8001ff8 <_getpid>

08008340 <__sread>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008348:	f000 f894 	bl	8008474 <_read_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	bfab      	itete	ge
 8008350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008352:	89a3      	ldrhlt	r3, [r4, #12]
 8008354:	181b      	addge	r3, r3, r0
 8008356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800835a:	bfac      	ite	ge
 800835c:	6563      	strge	r3, [r4, #84]	; 0x54
 800835e:	81a3      	strhlt	r3, [r4, #12]
 8008360:	bd10      	pop	{r4, pc}

08008362 <__swrite>:
 8008362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008366:	461f      	mov	r7, r3
 8008368:	898b      	ldrh	r3, [r1, #12]
 800836a:	4605      	mov	r5, r0
 800836c:	05db      	lsls	r3, r3, #23
 800836e:	460c      	mov	r4, r1
 8008370:	4616      	mov	r6, r2
 8008372:	d505      	bpl.n	8008380 <__swrite+0x1e>
 8008374:	2302      	movs	r3, #2
 8008376:	2200      	movs	r2, #0
 8008378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837c:	f000 f868 	bl	8008450 <_lseek_r>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	4632      	mov	r2, r6
 8008384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	4628      	mov	r0, r5
 800838c:	463b      	mov	r3, r7
 800838e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008396:	f000 b817 	b.w	80083c8 <_write_r>

0800839a <__sseek>:
 800839a:	b510      	push	{r4, lr}
 800839c:	460c      	mov	r4, r1
 800839e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a2:	f000 f855 	bl	8008450 <_lseek_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	bf15      	itete	ne
 80083ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80083ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083b6:	81a3      	strheq	r3, [r4, #12]
 80083b8:	bf18      	it	ne
 80083ba:	81a3      	strhne	r3, [r4, #12]
 80083bc:	bd10      	pop	{r4, pc}

080083be <__sclose>:
 80083be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083c2:	f000 b813 	b.w	80083ec <_close_r>
	...

080083c8 <_write_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	2200      	movs	r2, #0
 80083d2:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <_write_r+0x20>)
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7f9 fe4c 	bl	8002074 <_write>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_write_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_write_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	20000538 	.word	0x20000538

080083ec <_close_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	2300      	movs	r3, #0
 80083f0:	4d05      	ldr	r5, [pc, #20]	; (8008408 <_close_r+0x1c>)
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7f9 fe58 	bl	80020ac <_close>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_close_r+0x1a>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_close_r+0x1a>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	20000538 	.word	0x20000538

0800840c <_fstat_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	2300      	movs	r3, #0
 8008410:	4d06      	ldr	r5, [pc, #24]	; (800842c <_fstat_r+0x20>)
 8008412:	4604      	mov	r4, r0
 8008414:	4608      	mov	r0, r1
 8008416:	4611      	mov	r1, r2
 8008418:	602b      	str	r3, [r5, #0]
 800841a:	f7f9 fe52 	bl	80020c2 <_fstat>
 800841e:	1c43      	adds	r3, r0, #1
 8008420:	d102      	bne.n	8008428 <_fstat_r+0x1c>
 8008422:	682b      	ldr	r3, [r5, #0]
 8008424:	b103      	cbz	r3, 8008428 <_fstat_r+0x1c>
 8008426:	6023      	str	r3, [r4, #0]
 8008428:	bd38      	pop	{r3, r4, r5, pc}
 800842a:	bf00      	nop
 800842c:	20000538 	.word	0x20000538

08008430 <_isatty_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	2300      	movs	r3, #0
 8008434:	4d05      	ldr	r5, [pc, #20]	; (800844c <_isatty_r+0x1c>)
 8008436:	4604      	mov	r4, r0
 8008438:	4608      	mov	r0, r1
 800843a:	602b      	str	r3, [r5, #0]
 800843c:	f7f9 fe50 	bl	80020e0 <_isatty>
 8008440:	1c43      	adds	r3, r0, #1
 8008442:	d102      	bne.n	800844a <_isatty_r+0x1a>
 8008444:	682b      	ldr	r3, [r5, #0]
 8008446:	b103      	cbz	r3, 800844a <_isatty_r+0x1a>
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	20000538 	.word	0x20000538

08008450 <_lseek_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	4611      	mov	r1, r2
 8008458:	2200      	movs	r2, #0
 800845a:	4d05      	ldr	r5, [pc, #20]	; (8008470 <_lseek_r+0x20>)
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7f9 fe48 	bl	80020f4 <_lseek>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_lseek_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_lseek_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000538 	.word	0x20000538

08008474 <_read_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4604      	mov	r4, r0
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	2200      	movs	r2, #0
 800847e:	4d05      	ldr	r5, [pc, #20]	; (8008494 <_read_r+0x20>)
 8008480:	602a      	str	r2, [r5, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	f7f9 fdd9 	bl	800203a <_read>
 8008488:	1c43      	adds	r3, r0, #1
 800848a:	d102      	bne.n	8008492 <_read_r+0x1e>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	b103      	cbz	r3, 8008492 <_read_r+0x1e>
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	20000538 	.word	0x20000538

08008498 <_init>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	bf00      	nop
 800849c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849e:	bc08      	pop	{r3}
 80084a0:	469e      	mov	lr, r3
 80084a2:	4770      	bx	lr

080084a4 <_fini>:
 80084a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a6:	bf00      	nop
 80084a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084aa:	bc08      	pop	{r3}
 80084ac:	469e      	mov	lr, r3
 80084ae:	4770      	bx	lr
