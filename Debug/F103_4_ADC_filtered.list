
F103_4_ADC_filtered.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08007b00  08007b00  00017b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb4  08007fb4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007fb4  08007fb4  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fb4  08007fb4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb4  08007fb4  00017fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001e0  0800819c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800819c  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100f8  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026ae  00000000  00000000  00030301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  000329b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00033b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a9e  00000000  00000000  00034b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001357d  00000000  00000000  0004e61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093476  00000000  00000000  00061b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b40  00000000  00000000  000f5064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ae8 	.word	0x08007ae8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007ae8 	.word	0x08007ae8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <SMA_FILTER_Get_Value>:
 *  @param  *SMA_Filter_buffer - Массив, где будут лежать сырые значения
 *  @param  *RAW_Data - Сырые данные
 *  @retval  SMA_Filter_Result - Значение, полученное после SMA фильтра.
 ******************************************************************************
 */
uint16_t SMA_FILTER_Get_Value(uint16_t *SMA_Filter_buffer, uint16_t *RAW_Data) {
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]

	/* Создадим переменную для суммы сырых значений */
	uint32_t SMA_Filter_Result = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]

	/* Начнем заполнять массив сырыми значениями с конца */
	SMA_Filter_buffer[SMA_FILTER_ORDER - 1] = *RAW_Data;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	333e      	adds	r3, #62	; 0x3e
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	8812      	ldrh	r2, [r2, #0]
 8000f5a:	801a      	strh	r2, [r3, #0]

	/* Просуммируем все элементы массива */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	72fb      	strb	r3, [r7, #11]
 8000f60:	e00b      	b.n	8000f7a <SMA_FILTER_Get_Value+0x36>
		SMA_Filter_Result += SMA_Filter_buffer[i];
 8000f62:	7afb      	ldrb	r3, [r7, #11]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	3301      	adds	r3, #1
 8000f78:	72fb      	strb	r3, [r7, #11]
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	2b1f      	cmp	r3, #31
 8000f7e:	d9f0      	bls.n	8000f62 <SMA_FILTER_Get_Value+0x1e>
	 * 32 = 2*2*2*2*2;
	 * Тогда SMA_Filter_Result = SMA_Filter_Result/32 будет равен, как SMA_Filter_Result = SMA_Filter_Result >> 5u;
	 *
	 */
	//SMA_Filter_Result = SMA_Filter_Result / SMA_FILTER_ORDER;
	SMA_Filter_Result = SMA_Filter_Result >> 5u; //32 = 2^5;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	60fb      	str	r3, [r7, #12]

	/* Сдвинем все элементы массива влево на 1 */
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	72bb      	strb	r3, [r7, #10]
 8000f8a:	e00d      	b.n	8000fa8 <SMA_FILTER_Get_Value+0x64>
		SMA_Filter_buffer[i] = SMA_Filter_buffer[i + 1];
 8000f8c:	7abb      	ldrb	r3, [r7, #10]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	441a      	add	r2, r3
 8000f96:	7abb      	ldrb	r3, [r7, #10]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	440b      	add	r3, r1
 8000f9e:	8812      	ldrh	r2, [r2, #0]
 8000fa0:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < SMA_FILTER_ORDER; i++) {
 8000fa2:	7abb      	ldrb	r3, [r7, #10]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	72bb      	strb	r3, [r7, #10]
 8000fa8:	7abb      	ldrb	r3, [r7, #10]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d9ee      	bls.n	8000f8c <SMA_FILTER_Get_Value+0x48>
	}

	return (uint16_t)SMA_Filter_Result; //Вернем среднее арифметическое значение
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	b29b      	uxth	r3, r3
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <lcd1602_Send_data>:
	lcd1602_Send_cmd(Data);	   // Отправляем последние 4 бита полученного байта
}

/// Функция предназначена для отправки байта данных по шине i2c
/// \param *init_Data - байт, например 0x25, где 2 (0010) это DB7-DB4 или DB3-DB0, а 5(0101) это сигналы LED, E, RW, RS соответственно
static void lcd1602_Send_data(uint8_t *Data) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	6078      	str	r0, [r7, #4]

	if (backlight) {
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <lcd1602_Send_data+0x74>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <lcd1602_Send_data+0x20>
		*Data |= 0x08;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e006      	b.n	8000fea <lcd1602_Send_data+0x2e>
	} else {
		*Data &= ~0x08;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	f023 0308 	bic.w	r3, r3, #8
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	701a      	strb	r2, [r3, #0]
	}
	*Data |= 0x04; // устанавливаем стробирующий сигнал E в 1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8000ff8:	230a      	movs	r3, #10
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	214e      	movs	r1, #78	; 0x4e
 8001002:	480c      	ldr	r0, [pc, #48]	; (8001034 <lcd1602_Send_data+0x78>)
 8001004:	f002 f9b0 	bl	8003368 <HAL_I2C_Master_Transmit>
	*Data &= ~0x04; // устанавливаем стробирующий сигнал E в 0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	f023 0304 	bic.w	r3, r3, #4
 8001010:	b2da      	uxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, adress_lcd, Data, 1, 10);
 8001016:	230a      	movs	r3, #10
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	214e      	movs	r1, #78	; 0x4e
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <lcd1602_Send_data+0x78>)
 8001022:	f002 f9a1 	bl	8003368 <HAL_I2C_Master_Transmit>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000
 8001034:	20000298 	.word	0x20000298

08001038 <lcd1602_Print_symbol>:
	/*========Инициализация завершена. Включить дисплей========*/
}

/// Функция вывода символа на дисплей
/// \param* symbol - символ в кодировке utf-8
void lcd1602_Print_symbol(uint8_t symbol) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	uint8_t command;
	command = ((symbol & 0xf0) | 0x09); //Формирование верхнего полубайта в команду для дисплея
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	f023 030f 	bic.w	r3, r3, #15
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f043 0309 	orr.w	r3, r3, #9
 8001050:	b25b      	sxtb	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001056:	f107 030f 	add.w	r3, r7, #15
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffae 	bl	8000fbc <lcd1602_Send_data>
	command = ((symbol & 0x0f) << 4) | 0x09; //Формирование нижнего полубайта в команду для дисплея
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	b25b      	sxtb	r3, r3
 8001066:	f043 0309 	orr.w	r3, r3, #9
 800106a:	b25b      	sxtb	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	73fb      	strb	r3, [r7, #15]
	lcd1602_Send_data(&command);
 8001070:	f107 030f 	add.w	r3, r7, #15
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffa1 	bl	8000fbc <lcd1602_Send_data>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <lcd1602_Print_text>:

/// Функция вывода символа на дисплей
/// \param *message - массив, который отправляем на дисплей.
/// Максимальная длина сообщения - 40 символов.
void lcd1602_Print_text(char *message) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < strlen(message); i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e009      	b.n	80010a4 <lcd1602_Print_text+0x22>
		lcd1602_Print_symbol(message[i]);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ffcd 	bl	8001038 <lcd1602_Print_symbol>
	for (int i = 0; i < strlen(message); i++) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3301      	adds	r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff f853 	bl	8000150 <strlen>
 80010aa:	4602      	mov	r2, r0
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d8ee      	bhi.n	8001090 <lcd1602_Print_text+0xe>
	}
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <lcd1602_SetCursor>:
/// \param x - координата по оси x. от 0 до 39.
/// \param y - координата по оси y. от 0 до 3.
/// Видимая область:
/// Для дисплеев 1602 max x = 15, max y = 1.
/// Для дисплеев 2004 max x = 19, max y = 3.
void lcd1602_SetCursor(uint8_t x, uint8_t y) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
	uint8_t command, adr;
	if (y > 3)
 80010cc:	79bb      	ldrb	r3, [r7, #6]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d901      	bls.n	80010d6 <lcd1602_SetCursor+0x1a>
		y = 3;
 80010d2:	2303      	movs	r3, #3
 80010d4:	71bb      	strb	r3, [r7, #6]
	if (x > 39)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b27      	cmp	r3, #39	; 0x27
 80010da:	d901      	bls.n	80010e0 <lcd1602_SetCursor+0x24>
		x = 39;
 80010dc:	2327      	movs	r3, #39	; 0x27
 80010de:	71fb      	strb	r3, [r7, #7]
	if (y == 0) {
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <lcd1602_SetCursor+0x2e>
		adr = x;
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 1) {
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d102      	bne.n	80010f6 <lcd1602_SetCursor+0x3a>
		adr = x + 0x40;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	3340      	adds	r3, #64	; 0x40
 80010f4:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 2) {
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d102      	bne.n	8001102 <lcd1602_SetCursor+0x46>
		adr = x + 0x14;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	3314      	adds	r3, #20
 8001100:	73fb      	strb	r3, [r7, #15]
	}
	if (y == 3) {
 8001102:	79bb      	ldrb	r3, [r7, #6]
 8001104:	2b03      	cmp	r3, #3
 8001106:	d102      	bne.n	800110e <lcd1602_SetCursor+0x52>
		adr = x + 0x54;
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3354      	adds	r3, #84	; 0x54
 800110c:	73fb      	strb	r3, [r7, #15]
	}
	command = ((adr & 0xf0) | 0x80);
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001116:	b25b      	sxtb	r3, r3
 8001118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111c:	b25b      	sxtb	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001122:	f107 030e 	add.w	r3, r7, #14
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff48 	bl	8000fbc <lcd1602_Send_data>

	command = (adr << 4);
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	b2db      	uxtb	r3, r3
 8001132:	73bb      	strb	r3, [r7, #14]
	lcd1602_Send_data(&command);
 8001134:	f107 030e 	add.w	r3, r7, #14
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff3f 	bl	8000fbc <lcd1602_Send_data>

}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114c:	f000 febc 	bl	8001ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001150:	f000 f852 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001154:	f000 f9ea 	bl	800152c <MX_GPIO_Init>
  MX_DMA_Init();
 8001158:	f000 f9ca 	bl	80014f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800115c:	f000 f99e 	bl	800149c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001160:	f000 f8a4 	bl	80012ac <MX_ADC1_Init>
  MX_I2C1_Init();
 8001164:	f000 f91e 	bl	80013a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001168:	f000 f94a 	bl	8001400 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 800116c:	2064      	movs	r0, #100	; 0x64
 800116e:	f000 ff0d 	bl	8001f8c <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 8001172:	481b      	ldr	r0, [pc, #108]	; (80011e0 <main+0x98>)
 8001174:	f003 f91e 	bl	80043b4 <HAL_TIM_Base_Start_IT>
  while(!lcd_init_flag){
 8001178:	e028      	b.n	80011cc <main+0x84>
	  lcd1602_SetCursor(1, 0);
 800117a:	2100      	movs	r1, #0
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ff9d 	bl	80010bc <lcd1602_SetCursor>
	  sprintf(tx_buffer_lcd, "Initialization..");
 8001182:	4918      	ldr	r1, [pc, #96]	; (80011e4 <main+0x9c>)
 8001184:	4818      	ldr	r0, [pc, #96]	; (80011e8 <main+0xa0>)
 8001186:	f004 fa37 	bl	80055f8 <siprintf>
	  lcd1602_Print_text(tx_buffer_lcd);
 800118a:	4817      	ldr	r0, [pc, #92]	; (80011e8 <main+0xa0>)
 800118c:	f7ff ff79 	bl	8001082 <lcd1602_Print_text>
	  lcd1602_SetCursor(2, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff ff92 	bl	80010bc <lcd1602_SetCursor>
	  sprintf(tx_buffer_lcd, "    %d    ", procent_init_lcd);
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <main+0xa4>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4914      	ldr	r1, [pc, #80]	; (80011f0 <main+0xa8>)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <main+0xa0>)
 80011a2:	f004 fa29 	bl	80055f8 <siprintf>
	  lcd1602_Print_text(tx_buffer_lcd);
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <main+0xa0>)
 80011a8:	f7ff ff6b 	bl	8001082 <lcd1602_Print_text>
	  procent_init_lcd += 2;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <main+0xa4>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3302      	adds	r3, #2
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <main+0xa4>)
 80011b6:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(20);
 80011b8:	2014      	movs	r0, #20
 80011ba:	f000 fee7 	bl	8001f8c <HAL_Delay>
	  if(procent_init_lcd >= 100){
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <main+0xa4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b63      	cmp	r3, #99	; 0x63
 80011c4:	d902      	bls.n	80011cc <main+0x84>
		  lcd_init_flag = 1;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <main+0xac>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
  while(!lcd_init_flag){
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <main+0xac>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d1cf      	bne.n	800117a <main+0x32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  print_adc();
 80011da:	f000 fa15 	bl	8001608 <print_adc>
 80011de:	e7fc      	b.n	80011da <main+0x92>
 80011e0:	200002ec 	.word	0x200002ec
 80011e4:	08007b00 	.word	0x08007b00
 80011e8:	200001fc 	.word	0x200001fc
 80011ec:	20000378 	.word	0x20000378
 80011f0:	08007b14 	.word	0x08007b14
 80011f4:	20000379 	.word	0x20000379

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2228      	movs	r2, #40	; 0x28
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f003 fd8e 	bl	8004d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123a:	2302      	movs	r3, #2
 800123c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001244:	2300      	movs	r3, #0
 8001246:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001248:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124c:	4618      	mov	r0, r3
 800124e:	f002 fb91 	bl	8003974 <HAL_RCC_OscConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001258:	f000 fb6b 	bl	8001932 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125c:	230f      	movs	r3, #15
 800125e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001260:	2302      	movs	r3, #2
 8001262:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fdfd 	bl	8003e78 <HAL_RCC_ClockConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001284:	f000 fb55 	bl	8001932 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001288:	2302      	movs	r3, #2
 800128a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4618      	mov	r0, r3
 8001294:	f002 ff88 	bl	80041a8 <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800129e:	f000 fb48 	bl	8001932 <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <MX_ADC1_Init+0xf0>)
 80012be:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <MX_ADC1_Init+0xf4>)
 80012c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MX_ADC1_Init+0xf0>)
 80012c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <MX_ADC1_Init+0xf0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <MX_ADC1_Init+0xf0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <MX_ADC1_Init+0xf0>)
 80012d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <MX_ADC1_Init+0xf0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <MX_ADC1_Init+0xf0>)
 80012e6:	2205      	movs	r2, #5
 80012e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ea:	482c      	ldr	r0, [pc, #176]	; (800139c <MX_ADC1_Init+0xf0>)
 80012ec:	f000 fe72 	bl	8001fd4 <HAL_ADC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80012f6:	f000 fb1c 	bl	8001932 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012fe:	2301      	movs	r3, #1
 8001300:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001302:	2307      	movs	r3, #7
 8001304:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	4824      	ldr	r0, [pc, #144]	; (800139c <MX_ADC1_Init+0xf0>)
 800130c:	f001 f834 	bl	8002378 <HAL_ADC_ConfigChannel>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001316:	f000 fb0c 	bl	8001932 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800131a:	2301      	movs	r3, #1
 800131c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800131e:	2302      	movs	r3, #2
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	481d      	ldr	r0, [pc, #116]	; (800139c <MX_ADC1_Init+0xf0>)
 8001328:	f001 f826 	bl	8002378 <HAL_ADC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001332:	f000 fafe 	bl	8001932 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001336:	2304      	movs	r3, #4
 8001338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800133a:	2303      	movs	r3, #3
 800133c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <MX_ADC1_Init+0xf0>)
 8001348:	f001 f816 	bl	8002378 <HAL_ADC_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001352:	f000 faee 	bl	8001932 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001356:	2306      	movs	r3, #6
 8001358:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800135a:	2304      	movs	r3, #4
 800135c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800135e:	2307      	movs	r3, #7
 8001360:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	4619      	mov	r1, r3
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_ADC1_Init+0xf0>)
 8001368:	f001 f806 	bl	8002378 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001372:	f000 fade 	bl	8001932 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001376:	2311      	movs	r3, #17
 8001378:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800137a:	2305      	movs	r3, #5
 800137c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4806      	ldr	r0, [pc, #24]	; (800139c <MX_ADC1_Init+0xf0>)
 8001384:	f000 fff8 	bl	8002378 <HAL_ADC_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800138e:	f000 fad0 	bl	8001932 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000224 	.word	0x20000224
 80013a0:	40012400 	.word	0x40012400

080013a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013aa:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <MX_I2C1_Init+0x54>)
 80013ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013b0:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_I2C1_Init+0x58>)
 80013b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013e2:	f001 fe7d 	bl	80030e0 <HAL_I2C_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ec:	f000 faa1 	bl	8001932 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000298 	.word	0x20000298
 80013f8:	40005400 	.word	0x40005400
 80013fc:	000186a0 	.word	0x000186a0

08001400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_TIM3_Init+0x94>)
 800141e:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <MX_TIM3_Init+0x98>)
 8001420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_TIM3_Init+0x94>)
 8001424:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001428:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_TIM3_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_TIM3_Init+0x94>)
 8001432:	2201      	movs	r2, #1
 8001434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_TIM3_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_TIM3_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_TIM3_Init+0x94>)
 8001444:	f002 ff66 	bl	8004314 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800144e:	f000 fa70 	bl	8001932 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_TIM3_Init+0x94>)
 8001460:	f003 f902 	bl	8004668 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 fa62 	bl	8001932 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_TIM3_Init+0x94>)
 800147c:	f003 fade 	bl	8004a3c <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001486:	f000 fa54 	bl	8001932 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002ec 	.word	0x200002ec
 8001498:	40000400 	.word	0x40000400

0800149c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_USART2_UART_Init+0x50>)
 80014a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c2:	220c      	movs	r2, #12
 80014c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f003 fb22 	bl	8004b1c <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014de:	f000 fa28 	bl	8001932 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000334 	.word	0x20000334
 80014ec:	40004400 	.word	0x40004400

080014f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MX_DMA_Init+0x38>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <MX_DMA_Init+0x38>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_DMA_Init+0x38>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	200b      	movs	r0, #11
 8001514:	f001 fa01 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001518:	200b      	movs	r0, #11
 800151a:	f001 fa1a 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000

0800152c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001540:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <MX_GPIO_Init+0xcc>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <MX_GPIO_Init+0xcc>)
 8001546:	f043 0310 	orr.w	r3, r3, #16
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_GPIO_Init+0xcc>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_GPIO_Init+0xcc>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <MX_GPIO_Init+0xcc>)
 800155e:	f043 0320 	orr.w	r3, r3, #32
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_GPIO_Init+0xcc>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_GPIO_Init+0xcc>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <MX_GPIO_Init+0xcc>)
 8001576:	f043 0304 	orr.w	r3, r3, #4
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_GPIO_Init+0xcc>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_GPIO_Init+0xcc>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <MX_GPIO_Init+0xcc>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_GPIO_Init+0xcc>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	603b      	str	r3, [r7, #0]
 800159e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2120      	movs	r1, #32
 80015a4:	4815      	ldr	r0, [pc, #84]	; (80015fc <MX_GPIO_Init+0xd0>)
 80015a6:	f001 fd61 	bl	800306c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : user_button_Pin */
  GPIO_InitStruct.Pin = user_button_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_GPIO_Init+0xd4>)
 80015b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_button_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	4619      	mov	r1, r3
 80015be:	4811      	ldr	r0, [pc, #68]	; (8001604 <MX_GPIO_Init+0xd8>)
 80015c0:	f001 fbd0 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : user_led_Pin */
  GPIO_InitStruct.Pin = user_led_Pin;
 80015c4:	2320      	movs	r3, #32
 80015c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <MX_GPIO_Init+0xd0>)
 80015dc:	f001 fbc2 	bl	8002d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2028      	movs	r0, #40	; 0x28
 80015e6:	f001 f998 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ea:	2028      	movs	r0, #40	; 0x28
 80015ec:	f001 f9b1 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010800 	.word	0x40010800
 8001600:	10110000 	.word	0x10110000
 8001604:	40011000 	.word	0x40011000

08001608 <print_adc>:

/* USER CODE BEGIN 4 */
void print_adc(){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af02      	add	r7, sp, #8
	if(adc_flag){
 800160e:	4b93      	ldr	r3, [pc, #588]	; (800185c <print_adc+0x254>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 811f 	beq.w	8001856 <print_adc+0x24e>
		if(lcd_print_adc){
 8001618:	4b91      	ldr	r3, [pc, #580]	; (8001860 <print_adc+0x258>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03b      	beq.n	8001698 <print_adc+0x90>
			lcd1602_SetCursor(0, 0);
 8001620:	2100      	movs	r1, #0
 8001622:	2000      	movs	r0, #0
 8001624:	f7ff fd4a 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_1 %d", ADC_SMA_Data[0]);
 8001628:	4b8e      	ldr	r3, [pc, #568]	; (8001864 <print_adc+0x25c>)
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	498e      	ldr	r1, [pc, #568]	; (8001868 <print_adc+0x260>)
 8001630:	488e      	ldr	r0, [pc, #568]	; (800186c <print_adc+0x264>)
 8001632:	f003 ffe1 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8001636:	488d      	ldr	r0, [pc, #564]	; (800186c <print_adc+0x264>)
 8001638:	f7ff fd23 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(1, 0);
 800163c:	2100      	movs	r1, #0
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff fd3c 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_2 %d", ADC_SMA_Data[1]);
 8001644:	4b87      	ldr	r3, [pc, #540]	; (8001864 <print_adc+0x25c>)
 8001646:	885b      	ldrh	r3, [r3, #2]
 8001648:	461a      	mov	r2, r3
 800164a:	4989      	ldr	r1, [pc, #548]	; (8001870 <print_adc+0x268>)
 800164c:	4887      	ldr	r0, [pc, #540]	; (800186c <print_adc+0x264>)
 800164e:	f003 ffd3 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8001652:	4886      	ldr	r0, [pc, #536]	; (800186c <print_adc+0x264>)
 8001654:	f7ff fd15 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(2, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	2002      	movs	r0, #2
 800165c:	f7ff fd2e 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_3 %d", ADC_SMA_Data[2]);
 8001660:	4b80      	ldr	r3, [pc, #512]	; (8001864 <print_adc+0x25c>)
 8001662:	889b      	ldrh	r3, [r3, #4]
 8001664:	461a      	mov	r2, r3
 8001666:	4983      	ldr	r1, [pc, #524]	; (8001874 <print_adc+0x26c>)
 8001668:	4880      	ldr	r0, [pc, #512]	; (800186c <print_adc+0x264>)
 800166a:	f003 ffc5 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800166e:	487f      	ldr	r0, [pc, #508]	; (800186c <print_adc+0x264>)
 8001670:	f7ff fd07 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(3, 0);
 8001674:	2100      	movs	r1, #0
 8001676:	2003      	movs	r0, #3
 8001678:	f7ff fd20 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC_CH_4 %d", ADC_SMA_Data[3]);
 800167c:	4b79      	ldr	r3, [pc, #484]	; (8001864 <print_adc+0x25c>)
 800167e:	88db      	ldrh	r3, [r3, #6]
 8001680:	461a      	mov	r2, r3
 8001682:	497d      	ldr	r1, [pc, #500]	; (8001878 <print_adc+0x270>)
 8001684:	4879      	ldr	r0, [pc, #484]	; (800186c <print_adc+0x264>)
 8001686:	f003 ffb7 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800168a:	4878      	ldr	r0, [pc, #480]	; (800186c <print_adc+0x264>)
 800168c:	f7ff fcf9 	bl	8001082 <lcd1602_Print_text>
			adc_flag = 0;
 8001690:	4b72      	ldr	r3, [pc, #456]	; (800185c <print_adc+0x254>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
			lcd1602_Print_text(tx_buffer_lcd);
			adc_flag = 0;
		}

	}
}
 8001696:	e0de      	b.n	8001856 <print_adc+0x24e>
		else if(lcd_print_voltage){
 8001698:	4b78      	ldr	r3, [pc, #480]	; (800187c <print_adc+0x274>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d05b      	beq.n	8001758 <print_adc+0x150>
			lcd1602_SetCursor(0, 0);
 80016a0:	2100      	movs	r1, #0
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fd0a 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[0]));
 80016a8:	4b6e      	ldr	r3, [pc, #440]	; (8001864 <print_adc+0x25c>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 f8f9 	bl	80018a4 <adc_to_volt>
 80016b2:	4603      	mov	r3, r0
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe feb7 	bl	8000428 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4970      	ldr	r1, [pc, #448]	; (8001880 <print_adc+0x278>)
 80016c0:	486a      	ldr	r0, [pc, #424]	; (800186c <print_adc+0x264>)
 80016c2:	f003 ff99 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80016c6:	4869      	ldr	r0, [pc, #420]	; (800186c <print_adc+0x264>)
 80016c8:	f7ff fcdb 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(1, 0);
 80016cc:	2100      	movs	r1, #0
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fcf4 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[1]));
 80016d4:	4b63      	ldr	r3, [pc, #396]	; (8001864 <print_adc+0x25c>)
 80016d6:	885b      	ldrh	r3, [r3, #2]
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f8e3 	bl	80018a4 <adc_to_volt>
 80016de:	4603      	mov	r3, r0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fea1 	bl	8000428 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4965      	ldr	r1, [pc, #404]	; (8001880 <print_adc+0x278>)
 80016ec:	485f      	ldr	r0, [pc, #380]	; (800186c <print_adc+0x264>)
 80016ee:	f003 ff83 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80016f2:	485e      	ldr	r0, [pc, #376]	; (800186c <print_adc+0x264>)
 80016f4:	f7ff fcc5 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(2, 0);
 80016f8:	2100      	movs	r1, #0
 80016fa:	2002      	movs	r0, #2
 80016fc:	f7ff fcde 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[2]));
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <print_adc+0x25c>)
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f8cd 	bl	80018a4 <adc_to_volt>
 800170a:	4603      	mov	r3, r0
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fe8b 	bl	8000428 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	495a      	ldr	r1, [pc, #360]	; (8001880 <print_adc+0x278>)
 8001718:	4854      	ldr	r0, [pc, #336]	; (800186c <print_adc+0x264>)
 800171a:	f003 ff6d 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800171e:	4853      	ldr	r0, [pc, #332]	; (800186c <print_adc+0x264>)
 8001720:	f7ff fcaf 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(3, 0);
 8001724:	2100      	movs	r1, #0
 8001726:	2003      	movs	r0, #3
 8001728:	f7ff fcc8 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "ADC voltage %.2f", adc_to_volt(ADC_SMA_Data[3]));
 800172c:	4b4d      	ldr	r3, [pc, #308]	; (8001864 <print_adc+0x25c>)
 800172e:	88db      	ldrh	r3, [r3, #6]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f8b7 	bl	80018a4 <adc_to_volt>
 8001736:	4603      	mov	r3, r0
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fe75 	bl	8000428 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	494f      	ldr	r1, [pc, #316]	; (8001880 <print_adc+0x278>)
 8001744:	4849      	ldr	r0, [pc, #292]	; (800186c <print_adc+0x264>)
 8001746:	f003 ff57 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800174a:	4848      	ldr	r0, [pc, #288]	; (800186c <print_adc+0x264>)
 800174c:	f7ff fc99 	bl	8001082 <lcd1602_Print_text>
			adc_flag = 0;
 8001750:	4b42      	ldr	r3, [pc, #264]	; (800185c <print_adc+0x254>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
}
 8001756:	e07e      	b.n	8001856 <print_adc+0x24e>
		else if(lcd_print_conversation_val){
 8001758:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <print_adc+0x27c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d07a      	beq.n	8001856 <print_adc+0x24e>
			lcd1602_SetCursor(0, 0);
 8001760:	2100      	movs	r1, #0
 8001762:	2000      	movs	r0, #0
 8001764:	f7ff fcaa 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_1 %.2f", map(ADC_SMA_Data[0], -100, 500, 0, ADC_MAX));
 8001768:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <print_adc+0x25c>)
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fa41 	bl	8000bf4 <__aeabi_ui2f>
 8001772:	4b45      	ldr	r3, [pc, #276]	; (8001888 <print_adc+0x280>)
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	4a44      	ldr	r2, [pc, #272]	; (800188c <print_adc+0x284>)
 800177c:	4944      	ldr	r1, [pc, #272]	; (8001890 <print_adc+0x288>)
 800177e:	f000 f8ad 	bl	80018dc <map>
 8001782:	4603      	mov	r3, r0
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fe4f 	bl	8000428 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4941      	ldr	r1, [pc, #260]	; (8001894 <print_adc+0x28c>)
 8001790:	4836      	ldr	r0, [pc, #216]	; (800186c <print_adc+0x264>)
 8001792:	f003 ff31 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 8001796:	4835      	ldr	r0, [pc, #212]	; (800186c <print_adc+0x264>)
 8001798:	f7ff fc73 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(1, 0);
 800179c:	2100      	movs	r1, #0
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fc8c 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_2 %.2f", map(ADC_SMA_Data[1], -100, 500, 0, ADC_MAX));
 80017a4:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <print_adc+0x25c>)
 80017a6:	885b      	ldrh	r3, [r3, #2]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fa23 	bl	8000bf4 <__aeabi_ui2f>
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <print_adc+0x280>)
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	4a35      	ldr	r2, [pc, #212]	; (800188c <print_adc+0x284>)
 80017b8:	4935      	ldr	r1, [pc, #212]	; (8001890 <print_adc+0x288>)
 80017ba:	f000 f88f 	bl	80018dc <map>
 80017be:	4603      	mov	r3, r0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe31 	bl	8000428 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4933      	ldr	r1, [pc, #204]	; (8001898 <print_adc+0x290>)
 80017cc:	4827      	ldr	r0, [pc, #156]	; (800186c <print_adc+0x264>)
 80017ce:	f003 ff13 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 80017d2:	4826      	ldr	r0, [pc, #152]	; (800186c <print_adc+0x264>)
 80017d4:	f7ff fc55 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(2, 0);
 80017d8:	2100      	movs	r1, #0
 80017da:	2002      	movs	r0, #2
 80017dc:	f7ff fc6e 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_3 %.2f", map(ADC_SMA_Data[2], -100, 500, 0, ADC_MAX));
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <print_adc+0x25c>)
 80017e2:	889b      	ldrh	r3, [r3, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fa05 	bl	8000bf4 <__aeabi_ui2f>
 80017ea:	4b27      	ldr	r3, [pc, #156]	; (8001888 <print_adc+0x280>)
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	4a26      	ldr	r2, [pc, #152]	; (800188c <print_adc+0x284>)
 80017f4:	4926      	ldr	r1, [pc, #152]	; (8001890 <print_adc+0x288>)
 80017f6:	f000 f871 	bl	80018dc <map>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fe13 	bl	8000428 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4925      	ldr	r1, [pc, #148]	; (800189c <print_adc+0x294>)
 8001808:	4818      	ldr	r0, [pc, #96]	; (800186c <print_adc+0x264>)
 800180a:	f003 fef5 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800180e:	4817      	ldr	r0, [pc, #92]	; (800186c <print_adc+0x264>)
 8001810:	f7ff fc37 	bl	8001082 <lcd1602_Print_text>
			lcd1602_SetCursor(3, 0);
 8001814:	2100      	movs	r1, #0
 8001816:	2003      	movs	r0, #3
 8001818:	f7ff fc50 	bl	80010bc <lcd1602_SetCursor>
			sprintf(tx_buffer_lcd, "Conv. val_4 %.2f", map(ADC_SMA_Data[3], -100, 500, 0, ADC_MAX));
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <print_adc+0x25c>)
 800181e:	88db      	ldrh	r3, [r3, #6]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f9e7 	bl	8000bf4 <__aeabi_ui2f>
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <print_adc+0x280>)
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	4a17      	ldr	r2, [pc, #92]	; (800188c <print_adc+0x284>)
 8001830:	4917      	ldr	r1, [pc, #92]	; (8001890 <print_adc+0x288>)
 8001832:	f000 f853 	bl	80018dc <map>
 8001836:	4603      	mov	r3, r0
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fdf5 	bl	8000428 <__aeabi_f2d>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4917      	ldr	r1, [pc, #92]	; (80018a0 <print_adc+0x298>)
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <print_adc+0x264>)
 8001846:	f003 fed7 	bl	80055f8 <siprintf>
			lcd1602_Print_text(tx_buffer_lcd);
 800184a:	4808      	ldr	r0, [pc, #32]	; (800186c <print_adc+0x264>)
 800184c:	f7ff fc19 	bl	8001082 <lcd1602_Print_text>
			adc_flag = 0;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <print_adc+0x254>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200004d4 	.word	0x200004d4
 8001860:	20000001 	.word	0x20000001
 8001864:	200004c8 	.word	0x200004c8
 8001868:	08007b20 	.word	0x08007b20
 800186c:	200001fc 	.word	0x200001fc
 8001870:	08007b2c 	.word	0x08007b2c
 8001874:	08007b38 	.word	0x08007b38
 8001878:	08007b44 	.word	0x08007b44
 800187c:	2000037a 	.word	0x2000037a
 8001880:	08007b50 	.word	0x08007b50
 8001884:	2000037b 	.word	0x2000037b
 8001888:	457ff000 	.word	0x457ff000
 800188c:	43fa0000 	.word	0x43fa0000
 8001890:	c2c80000 	.word	0xc2c80000
 8001894:	08007b64 	.word	0x08007b64
 8001898:	08007b78 	.word	0x08007b78
 800189c:	08007b8c 	.word	0x08007b8c
 80018a0:	08007ba0 	.word	0x08007ba0

080018a4 <adc_to_volt>:

float adc_to_volt(uint16_t adc_val){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return ((float)adc_val * VOLT_MAX) / ADC_MAX;
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f99f 	bl	8000bf4 <__aeabi_ui2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4906      	ldr	r1, [pc, #24]	; (80018d4 <adc_to_volt+0x30>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f9f2 	bl	8000ca4 <__aeabi_fmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4905      	ldr	r1, [pc, #20]	; (80018d8 <adc_to_volt+0x34>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff faa1 	bl	8000e0c <__aeabi_fdiv>
 80018ca:	4603      	mov	r3, r0

}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40533333 	.word	0x40533333
 80018d8:	457ff000 	.word	0x457ff000

080018dc <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff f8cf 	bl	8000a90 <__aeabi_fsub>
 80018f2:	4603      	mov	r3, r0
 80018f4:	461c      	mov	r4, r3
 80018f6:	6839      	ldr	r1, [r7, #0]
 80018f8:	6a38      	ldr	r0, [r7, #32]
 80018fa:	f7ff f8c9 	bl	8000a90 <__aeabi_fsub>
 80018fe:	4603      	mov	r3, r0
 8001900:	4619      	mov	r1, r3
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff f9ce 	bl	8000ca4 <__aeabi_fmul>
 8001908:	4603      	mov	r3, r0
 800190a:	461c      	mov	r4, r3
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff f8be 	bl	8000a90 <__aeabi_fsub>
 8001914:	4603      	mov	r3, r0
 8001916:	4619      	mov	r1, r3
 8001918:	4620      	mov	r0, r4
 800191a:	f7ff fa77 	bl	8000e0c <__aeabi_fdiv>
 800191e:	4603      	mov	r3, r0
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f8b6 	bl	8000a94 <__addsf3>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	bd90      	pop	{r4, r7, pc}

08001932 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001936:	b672      	cpsid	i
}
 8001938:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193a:	e7fe      	b.n	800193a <Error_Handler+0x8>

0800193c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_MspInit+0x5c>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	4a14      	ldr	r2, [pc, #80]	; (8001998 <HAL_MspInit+0x5c>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6193      	str	r3, [r2, #24]
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_MspInit+0x5c>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x5c>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_MspInit+0x5c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_MspInit+0x5c>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_MspInit+0x60>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_MspInit+0x60>)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000

080019a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <HAL_ADC_MspInit+0xbc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d149      	bne.n	8001a54 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_ADC_MspInit+0xc0>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a26      	ldr	r2, [pc, #152]	; (8001a60 <HAL_ADC_MspInit+0xc0>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_ADC_MspInit+0xc0>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_ADC_MspInit+0xc0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_ADC_MspInit+0xc0>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_ADC_MspInit+0xc0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6;
 80019f0:	2353      	movs	r3, #83	; 0x53
 80019f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f4:	2303      	movs	r3, #3
 80019f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	4819      	ldr	r0, [pc, #100]	; (8001a64 <HAL_ADC_MspInit+0xc4>)
 8001a00:	f001 f9b0 	bl	8002d64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a06:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_ADC_MspInit+0xcc>)
 8001a08:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a22:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a2a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a2e:	2220      	movs	r2, #32
 8001a30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a38:	480b      	ldr	r0, [pc, #44]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a3a:	f000 ffa5 	bl	8002988 <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001a44:	f7ff ff75 	bl	8001932 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a4c:	621a      	str	r2, [r3, #32]
 8001a4e:	4a06      	ldr	r2, [pc, #24]	; (8001a68 <HAL_ADC_MspInit+0xc8>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40012400 	.word	0x40012400
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010800 	.word	0x40010800
 8001a68:	20000254 	.word	0x20000254
 8001a6c:	40020008 	.word	0x40020008

08001a70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a15      	ldr	r2, [pc, #84]	; (8001ae0 <HAL_I2C_MspInit+0x70>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d123      	bne.n	8001ad8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001aa8:	23c0      	movs	r3, #192	; 0xc0
 8001aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aac:	2312      	movs	r3, #18
 8001aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 0310 	add.w	r3, r7, #16
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480b      	ldr	r0, [pc, #44]	; (8001ae8 <HAL_I2C_MspInit+0x78>)
 8001abc:	f001 f952 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aca:	61d3      	str	r3, [r2, #28]
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_I2C_MspInit+0x74>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ad8:	bf00      	nop
 8001ada:	3720      	adds	r7, #32
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40005400 	.word	0x40005400
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40010c00 	.word	0x40010c00

08001aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <HAL_TIM_Base_MspInit+0x44>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d113      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <HAL_TIM_Base_MspInit+0x48>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	201d      	movs	r0, #29
 8001b1c:	f000 fefd 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b20:	201d      	movs	r0, #29
 8001b22:	f000 ff16 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0310 	add.w	r3, r7, #16
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_UART_MspInit+0x70>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d123      	bne.n	8001ba0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_UART_MspInit+0x74>)
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	4a13      	ldr	r2, [pc, #76]	; (8001bac <HAL_UART_MspInit+0x74>)
 8001b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b62:	61d3      	str	r3, [r2, #28]
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_UART_MspInit+0x74>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_UART_MspInit+0x74>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_UART_MspInit+0x74>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	6193      	str	r3, [r2, #24]
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_UART_MspInit+0x74>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b88:	230c      	movs	r3, #12
 8001b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2302      	movs	r3, #2
 8001b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_UART_MspInit+0x78>)
 8001b9c:	f001 f8e2 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3720      	adds	r7, #32
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40010800 	.word	0x40010800

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <NMI_Handler+0x4>

08001bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bca:	e7fe      	b.n	8001bca <BusFault_Handler+0x4>

08001bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <UsageFault_Handler+0x4>

08001bd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfa:	f000 f9ab 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c08:	481e      	ldr	r0, [pc, #120]	; (8001c84 <DMA1_Channel1_IRQHandler+0x80>)
 8001c0a:	f000 ff77 	bl	8002afc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  Counter_DMA_IT++;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <DMA1_Channel1_IRQHandler+0x84>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <DMA1_Channel1_IRQHandler+0x84>)
 8001c18:	801a      	strh	r2, [r3, #0]
  if (Counter_DMA_IT == 1200) {
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <DMA1_Channel1_IRQHandler+0x84>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001c22:	d12d      	bne.n	8001c80 <DMA1_Channel1_IRQHandler+0x7c>
  		Counter_DMA_IT = 0;
 8001c24:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <DMA1_Channel1_IRQHandler+0x84>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	801a      	strh	r2, [r3, #0]
  		ADC_SMA_Data[0] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_1, &ADC_RAW_Data[0]);
 8001c2a:	4918      	ldr	r1, [pc, #96]	; (8001c8c <DMA1_Channel1_IRQHandler+0x88>)
 8001c2c:	4818      	ldr	r0, [pc, #96]	; (8001c90 <DMA1_Channel1_IRQHandler+0x8c>)
 8001c2e:	f7ff f989 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <DMA1_Channel1_IRQHandler+0x90>)
 8001c38:	801a      	strh	r2, [r3, #0]
  		ADC_SMA_Data[1] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_2, &ADC_RAW_Data[1]);
 8001c3a:	4917      	ldr	r1, [pc, #92]	; (8001c98 <DMA1_Channel1_IRQHandler+0x94>)
 8001c3c:	4817      	ldr	r0, [pc, #92]	; (8001c9c <DMA1_Channel1_IRQHandler+0x98>)
 8001c3e:	f7ff f981 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <DMA1_Channel1_IRQHandler+0x90>)
 8001c48:	805a      	strh	r2, [r3, #2]
  		ADC_SMA_Data[2] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_3, &ADC_RAW_Data[2]);
 8001c4a:	4915      	ldr	r1, [pc, #84]	; (8001ca0 <DMA1_Channel1_IRQHandler+0x9c>)
 8001c4c:	4815      	ldr	r0, [pc, #84]	; (8001ca4 <DMA1_Channel1_IRQHandler+0xa0>)
 8001c4e:	f7ff f979 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <DMA1_Channel1_IRQHandler+0x90>)
 8001c58:	809a      	strh	r2, [r3, #4]
  		ADC_SMA_Data[3] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_4, &ADC_RAW_Data[3]);
 8001c5a:	4913      	ldr	r1, [pc, #76]	; (8001ca8 <DMA1_Channel1_IRQHandler+0xa4>)
 8001c5c:	4813      	ldr	r0, [pc, #76]	; (8001cac <DMA1_Channel1_IRQHandler+0xa8>)
 8001c5e:	f7ff f971 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001c62:	4603      	mov	r3, r0
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <DMA1_Channel1_IRQHandler+0x90>)
 8001c68:	80da      	strh	r2, [r3, #6]
  		ADC_SMA_Data[4] = SMA_FILTER_Get_Value(SMA_Filter_Buffer_5, &ADC_RAW_Data[4]);
 8001c6a:	4911      	ldr	r1, [pc, #68]	; (8001cb0 <DMA1_Channel1_IRQHandler+0xac>)
 8001c6c:	4811      	ldr	r0, [pc, #68]	; (8001cb4 <DMA1_Channel1_IRQHandler+0xb0>)
 8001c6e:	f7ff f969 	bl	8000f44 <SMA_FILTER_Get_Value>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <DMA1_Channel1_IRQHandler+0x90>)
 8001c78:	811a      	strh	r2, [r3, #8]
  		adc_flag = 1;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <DMA1_Channel1_IRQHandler+0xb4>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000254 	.word	0x20000254
 8001c88:	200004d2 	.word	0x200004d2
 8001c8c:	200004bc 	.word	0x200004bc
 8001c90:	2000037c 	.word	0x2000037c
 8001c94:	200004c8 	.word	0x200004c8
 8001c98:	200004be 	.word	0x200004be
 8001c9c:	200003bc 	.word	0x200003bc
 8001ca0:	200004c0 	.word	0x200004c0
 8001ca4:	200003fc 	.word	0x200003fc
 8001ca8:	200004c2 	.word	0x200004c2
 8001cac:	2000043c 	.word	0x2000043c
 8001cb0:	200004c4 	.word	0x200004c4
 8001cb4:	2000047c 	.word	0x2000047c
 8001cb8:	200004d4 	.word	0x200004d4

08001cbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <TIM3_IRQHandler+0x18>)
 8001cc2:	f002 fbc9 	bl	8004458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_ADC_Start_DMA(&hadc1, ADC_RAW_Data, 5);
 8001cc6:	2205      	movs	r2, #5
 8001cc8:	4903      	ldr	r1, [pc, #12]	; (8001cd8 <TIM3_IRQHandler+0x1c>)
 8001cca:	4804      	ldr	r0, [pc, #16]	; (8001cdc <TIM3_IRQHandler+0x20>)
 8001ccc:	f000 fa5a 	bl	8002184 <HAL_ADC_Start_DMA>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200002ec 	.word	0x200002ec
 8001cd8:	200004bc 	.word	0x200004bc
 8001cdc:	20000224 	.word	0x20000224

08001ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(user_button_Pin);
 8001ce4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ce8:	f001 f9d8 	bl	800309c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
	return 1;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <_kill>:

int _kill(int pid, int sig)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d08:	f002 ffe4 	bl	8004cd4 <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2216      	movs	r2, #22
 8001d10:	601a      	str	r2, [r3, #0]
	return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_exit>:

void _exit (int status)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d26:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffe7 	bl	8001cfe <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d30:	e7fe      	b.n	8001d30 <_exit+0x12>

08001d32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e00a      	b.n	8001d5a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d44:	f3af 8000 	nop.w
 8001d48:	4601      	mov	r1, r0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	60ba      	str	r2, [r7, #8]
 8001d50:	b2ca      	uxtb	r2, r1
 8001d52:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3301      	adds	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	dbf0      	blt.n	8001d44 <_read+0x12>
	}

return len;
 8001d62:	687b      	ldr	r3, [r7, #4]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e009      	b.n	8001d92 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	60ba      	str	r2, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	dbf1      	blt.n	8001d7e <_write+0x12>
	}
	return len;
 8001d9a:	687b      	ldr	r3, [r7, #4]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_close>:

int _close(int file)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	return -1;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dca:	605a      	str	r2, [r3, #4]
	return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr

08001dd8 <_isatty>:

int _isatty(int file)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	return 1;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
	return 0;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <_sbrk+0x5c>)
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <_sbrk+0x60>)
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <_sbrk+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_sbrk+0x64>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <_sbrk+0x68>)
 8001e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d207      	bcs.n	8001e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e34:	f002 ff4e 	bl	8004cd4 <__errno>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	e009      	b.n	8001e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <_sbrk+0x64>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	4a05      	ldr	r2, [pc, #20]	; (8001e68 <_sbrk+0x64>)
 8001e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20005000 	.word	0x20005000
 8001e64:	00000400 	.word	0x00000400
 8001e68:	200004d8 	.word	0x200004d8
 8001e6c:	200004f0 	.word	0x200004f0

08001e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ffe5 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f002 ff1b 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eaa:	f7ff f94d 	bl	8001148 <main>
  bx lr
 8001eae:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001eb8:	08007fbc 	.word	0x08007fbc
  ldr r2, =_sbss
 8001ebc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001ec0:	200004f0 	.word	0x200004f0

08001ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC1_2_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_Init+0x28>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_Init+0x28>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 fd13 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fd2a 	bl	800193c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 fd2b 	bl	800296e <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 fcf3 	bl	800291a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	20000008 	.word	0x20000008

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_IncTick+0x1c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_IncTick+0x20>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x20>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	200004dc 	.word	0x200004dc

08001f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_GetTick+0x10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	200004dc 	.word	0x200004dc

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffe0 	bl	8001f78 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0be      	b.n	8002174 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d109      	bne.n	8002018 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fcc4 	bl	80019a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 faff 	bl	800261c <ADC_ConversionStop_Disable>
 800201e:	4603      	mov	r3, r0
 8002020:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 8099 	bne.w	8002162 <HAL_ADC_Init+0x18e>
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 8095 	bne.w	8002162 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002040:	f023 0302 	bic.w	r3, r3, #2
 8002044:	f043 0202 	orr.w	r2, r3, #2
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002054:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7b1b      	ldrb	r3, [r3, #12]
 800205a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800205c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4313      	orrs	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800206c:	d003      	beq.n	8002076 <HAL_ADC_Init+0xa2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d102      	bne.n	800207c <HAL_ADC_Init+0xa8>
 8002076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207a:	e000      	b.n	800207e <HAL_ADC_Init+0xaa>
 800207c:	2300      	movs	r3, #0
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7d1b      	ldrb	r3, [r3, #20]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d119      	bne.n	80020c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7b1b      	ldrb	r3, [r3, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d109      	bne.n	80020a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	3b01      	subs	r3, #1
 800209a:	035a      	lsls	r2, r3, #13
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e00b      	b.n	80020c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b8:	f043 0201 	orr.w	r2, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b28      	ldr	r3, [pc, #160]	; (800217c <HAL_ADC_Init+0x1a8>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	68b9      	ldr	r1, [r7, #8]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f0:	d003      	beq.n	80020fa <HAL_ADC_Init+0x126>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d104      	bne.n	8002104 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051b      	lsls	r3, r3, #20
 8002102:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	430a      	orrs	r2, r1
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_ADC_Init+0x1ac>)
 8002120:	4013      	ands	r3, r2
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	429a      	cmp	r2, r3
 8002126:	d10b      	bne.n	8002140 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	f023 0303 	bic.w	r3, r3, #3
 8002136:	f043 0201 	orr.w	r2, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800213e:	e018      	b.n	8002172 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f023 0312 	bic.w	r3, r3, #18
 8002148:	f043 0210 	orr.w	r2, r3, #16
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	f043 0201 	orr.w	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002160:	e007      	b.n	8002172 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	f043 0210 	orr.w	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002172:	7dfb      	ldrb	r3, [r7, #23]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	ffe1f7fd 	.word	0xffe1f7fd
 8002180:	ff1f0efe 	.word	0xff1f0efe

08002184 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a64      	ldr	r2, [pc, #400]	; (800232c <HAL_ADC_Start_DMA+0x1a8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <HAL_ADC_Start_DMA+0x24>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a63      	ldr	r2, [pc, #396]	; (8002330 <HAL_ADC_Start_DMA+0x1ac>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d106      	bne.n	80021b6 <HAL_ADC_Start_DMA+0x32>
 80021a8:	4b60      	ldr	r3, [pc, #384]	; (800232c <HAL_ADC_Start_DMA+0x1a8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 80b3 	bne.w	800231c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_Start_DMA+0x40>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e0ae      	b.n	8002322 <HAL_ADC_Start_DMA+0x19e>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f000 f9cb 	bl	8002568 <ADC_Enable>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 809a 	bne.w	8002312 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a4e      	ldr	r2, [pc, #312]	; (8002330 <HAL_ADC_Start_DMA+0x1ac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d105      	bne.n	8002208 <HAL_ADC_Start_DMA+0x84>
 80021fc:	4b4b      	ldr	r3, [pc, #300]	; (800232c <HAL_ADC_Start_DMA+0x1a8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d115      	bne.n	8002234 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221e:	2b00      	cmp	r3, #0
 8002220:	d026      	beq.n	8002270 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800222a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002232:	e01d      	b.n	8002270 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a39      	ldr	r2, [pc, #228]	; (800232c <HAL_ADC_Start_DMA+0x1a8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_ADC_Start_DMA+0xd0>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a38      	ldr	r2, [pc, #224]	; (8002330 <HAL_ADC_Start_DMA+0x1ac>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d10d      	bne.n	8002270 <HAL_ADC_Start_DMA+0xec>
 8002254:	4b35      	ldr	r3, [pc, #212]	; (800232c <HAL_ADC_Start_DMA+0x1a8>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002264:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002268:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d006      	beq.n	800228a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f023 0206 	bic.w	r2, r3, #6
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
 8002288:	e002      	b.n	8002290 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a25      	ldr	r2, [pc, #148]	; (8002334 <HAL_ADC_Start_DMA+0x1b0>)
 800229e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <HAL_ADC_Start_DMA+0x1b4>)
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_ADC_Start_DMA+0x1b8>)
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0202 	mvn.w	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a18      	ldr	r0, [r3, #32]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	334c      	adds	r3, #76	; 0x4c
 80022d4:	4619      	mov	r1, r3
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f000 fbaf 	bl	8002a3c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022ec:	d108      	bne.n	8002300 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022fc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80022fe:	e00f      	b.n	8002320 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800230e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002310:	e006      	b.n	8002320 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800231a:	e001      	b.n	8002320 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002320:	7dfb      	ldrb	r3, [r7, #23]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40012400 	.word	0x40012400
 8002330:	40012800 	.word	0x40012800
 8002334:	0800269f 	.word	0x0800269f
 8002338:	0800271b 	.word	0x0800271b
 800233c:	08002737 	.word	0x08002737

08002340 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
	...

08002378 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x20>
 8002394:	2302      	movs	r3, #2
 8002396:	e0dc      	b.n	8002552 <HAL_ADC_ConfigChannel+0x1da>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b06      	cmp	r3, #6
 80023a6:	d81c      	bhi.n	80023e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	3b05      	subs	r3, #5
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b05      	subs	r3, #5
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	; 0x34
 80023e0:	e03c      	b.n	800245c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b0c      	cmp	r3, #12
 80023e8:	d81c      	bhi.n	8002424 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	3b23      	subs	r3, #35	; 0x23
 80023fc:	221f      	movs	r2, #31
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	4019      	ands	r1, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	3b23      	subs	r3, #35	; 0x23
 8002416:	fa00 f203 	lsl.w	r2, r0, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	631a      	str	r2, [r3, #48]	; 0x30
 8002422:	e01b      	b.n	800245c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	3b41      	subs	r3, #65	; 0x41
 8002436:	221f      	movs	r2, #31
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	3b41      	subs	r3, #65	; 0x41
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b09      	cmp	r3, #9
 8002462:	d91c      	bls.n	800249e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68d9      	ldr	r1, [r3, #12]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	3b1e      	subs	r3, #30
 8002476:	2207      	movs	r2, #7
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	4019      	ands	r1, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6898      	ldr	r0, [r3, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	3b1e      	subs	r3, #30
 8002490:	fa00 f203 	lsl.w	r2, r0, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	e019      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6919      	ldr	r1, [r3, #16]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	2207      	movs	r2, #7
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	4019      	ands	r1, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	6898      	ldr	r0, [r3, #8]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4613      	mov	r3, r2
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4413      	add	r3, r2
 80024c6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d003      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024de:	2b11      	cmp	r3, #17
 80024e0:	d132      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a1d      	ldr	r2, [pc, #116]	; (800255c <HAL_ADC_ConfigChannel+0x1e4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d125      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d126      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002508:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b10      	cmp	r3, #16
 8002510:	d11a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <HAL_ADC_ConfigChannel+0x1e8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a13      	ldr	r2, [pc, #76]	; (8002564 <HAL_ADC_ConfigChannel+0x1ec>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	0c9a      	lsrs	r2, r3, #18
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002528:	e002      	b.n	8002530 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3b01      	subs	r3, #1
 800252e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f9      	bne.n	800252a <HAL_ADC_ConfigChannel+0x1b2>
 8002536:	e007      	b.n	8002548 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	f043 0220 	orr.w	r2, r3, #32
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	40012400 	.word	0x40012400
 8002560:	20000004 	.word	0x20000004
 8002564:	431bde83 	.word	0x431bde83

08002568 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d040      	beq.n	8002608 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <ADC_Enable+0xac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <ADC_Enable+0xb0>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	0c9b      	lsrs	r3, r3, #18
 80025a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025a4:	e002      	b.n	80025ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3b01      	subs	r3, #1
 80025aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f9      	bne.n	80025a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025b2:	f7ff fce1 	bl	8001f78 <HAL_GetTick>
 80025b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025b8:	e01f      	b.n	80025fa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025ba:	f7ff fcdd 	bl	8001f78 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d918      	bls.n	80025fa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d011      	beq.n	80025fa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	f043 0210 	orr.w	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e007      	b.n	800260a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	d1d8      	bne.n	80025ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000004 	.word	0x20000004
 8002618:	431bde83 	.word	0x431bde83

0800261c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d12e      	bne.n	8002694 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002646:	f7ff fc97 	bl	8001f78 <HAL_GetTick>
 800264a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800264c:	e01b      	b.n	8002686 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800264e:	f7ff fc93 	bl	8001f78 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d914      	bls.n	8002686 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10d      	bne.n	8002686 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	f043 0201 	orr.w	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e007      	b.n	8002696 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d0dc      	beq.n	800264e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d127      	bne.n	8002708 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026d2:	d115      	bne.n	8002700 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d111      	bne.n	8002700 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d105      	bne.n	8002700 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	f043 0201 	orr.w	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fe1d 	bl	8002340 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002706:	e004      	b.n	8002712 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	4798      	blx	r3
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b084      	sub	sp, #16
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff fe12 	bl	8002352 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f043 0204 	orr.w	r2, r3, #4
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff fe01 	bl	8002364 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002762:	bf00      	nop
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279e:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60d3      	str	r3, [r2, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <__NVIC_GetPriorityGrouping+0x18>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 0307 	and.w	r3, r3, #7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0b      	blt.n	80027fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4906      	ldr	r1, [pc, #24]	; (8002804 <__NVIC_EnableIRQ+0x34>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2001      	movs	r0, #1
 80027f2:	fa00 f202 	lsl.w	r2, r0, r2
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff90 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff2d 	bl	800276c <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff42 	bl	80027b4 <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff90 	bl	800285c <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5f 	bl	8002808 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff35 	bl	80027d0 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e043      	b.n	8002a26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_DMA_Init+0xa8>)
 80029a6:	4413      	add	r3, r2
 80029a8:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <HAL_DMA_Init+0xac>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <HAL_DMA_Init+0xb0>)
 80029ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	bffdfff8 	.word	0xbffdfff8
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_DMA_Start_IT+0x20>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e04a      	b.n	8002af2 <HAL_DMA_Start_IT+0xb6>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d13a      	bne.n	8002ae4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f938 	bl	8002d08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 020e 	orr.w	r2, r2, #14
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e00f      	b.n	8002ad2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0204 	bic.w	r2, r2, #4
 8002ac0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 020a 	orr.w	r2, r2, #10
 8002ad0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e005      	b.n	8002af0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002aec:	2302      	movs	r3, #2
 8002aee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d04f      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0xc8>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d04a      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a66      	ldr	r2, [pc, #408]	; (8002cec <HAL_DMA_IRQHandler+0x1f0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d029      	beq.n	8002baa <HAL_DMA_IRQHandler+0xae>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a65      	ldr	r2, [pc, #404]	; (8002cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d022      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0xaa>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a63      	ldr	r2, [pc, #396]	; (8002cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01a      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0xa4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a62      	ldr	r2, [pc, #392]	; (8002cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d012      	beq.n	8002b9a <HAL_DMA_IRQHandler+0x9e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a60      	ldr	r2, [pc, #384]	; (8002cfc <HAL_DMA_IRQHandler+0x200>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x98>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a5f      	ldr	r2, [pc, #380]	; (8002d00 <HAL_DMA_IRQHandler+0x204>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d102      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x92>
 8002b88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b8c:	e00e      	b.n	8002bac <HAL_DMA_IRQHandler+0xb0>
 8002b8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b92:	e00b      	b.n	8002bac <HAL_DMA_IRQHandler+0xb0>
 8002b94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b98:	e008      	b.n	8002bac <HAL_DMA_IRQHandler+0xb0>
 8002b9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b9e:	e005      	b.n	8002bac <HAL_DMA_IRQHandler+0xb0>
 8002ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba4:	e002      	b.n	8002bac <HAL_DMA_IRQHandler+0xb0>
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	e000      	b.n	8002bac <HAL_DMA_IRQHandler+0xb0>
 8002baa:	2304      	movs	r3, #4
 8002bac:	4a55      	ldr	r2, [pc, #340]	; (8002d04 <HAL_DMA_IRQHandler+0x208>)
 8002bae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8094 	beq.w	8002ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc2:	e08e      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	2202      	movs	r2, #2
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d056      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x186>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d051      	beq.n	8002c82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0320 	and.w	r3, r3, #32
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 020a 	bic.w	r2, r2, #10
 8002bfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a38      	ldr	r2, [pc, #224]	; (8002cec <HAL_DMA_IRQHandler+0x1f0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d029      	beq.n	8002c62 <HAL_DMA_IRQHandler+0x166>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a37      	ldr	r2, [pc, #220]	; (8002cf0 <HAL_DMA_IRQHandler+0x1f4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x162>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a35      	ldr	r2, [pc, #212]	; (8002cf4 <HAL_DMA_IRQHandler+0x1f8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01a      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x15c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a34      	ldr	r2, [pc, #208]	; (8002cf8 <HAL_DMA_IRQHandler+0x1fc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d012      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x156>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <HAL_DMA_IRQHandler+0x200>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x150>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a31      	ldr	r2, [pc, #196]	; (8002d00 <HAL_DMA_IRQHandler+0x204>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d102      	bne.n	8002c46 <HAL_DMA_IRQHandler+0x14a>
 8002c40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c44:	e00e      	b.n	8002c64 <HAL_DMA_IRQHandler+0x168>
 8002c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c4a:	e00b      	b.n	8002c64 <HAL_DMA_IRQHandler+0x168>
 8002c4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c50:	e008      	b.n	8002c64 <HAL_DMA_IRQHandler+0x168>
 8002c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c56:	e005      	b.n	8002c64 <HAL_DMA_IRQHandler+0x168>
 8002c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c5c:	e002      	b.n	8002c64 <HAL_DMA_IRQHandler+0x168>
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e000      	b.n	8002c64 <HAL_DMA_IRQHandler+0x168>
 8002c62:	2302      	movs	r3, #2
 8002c64:	4a27      	ldr	r2, [pc, #156]	; (8002d04 <HAL_DMA_IRQHandler+0x208>)
 8002c66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d034      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c80:	e02f      	b.n	8002ce2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2208      	movs	r2, #8
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d028      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x1e8>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	f003 0308 	and.w	r3, r3, #8
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d023      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 020e 	bic.w	r2, r2, #14
 8002caa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
    }
  }
  return;
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
}
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40020008 	.word	0x40020008
 8002cf0:	4002001c 	.word	0x4002001c
 8002cf4:	40020030 	.word	0x40020030
 8002cf8:	40020044 	.word	0x40020044
 8002cfc:	40020058 	.word	0x40020058
 8002d00:	4002006c 	.word	0x4002006c
 8002d04:	40020000 	.word	0x40020000

08002d08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f202 	lsl.w	r2, r1, r2
 8002d24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d108      	bne.n	8002d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d46:	e007      	b.n	8002d58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	60da      	str	r2, [r3, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b08b      	sub	sp, #44	; 0x2c
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d72:	2300      	movs	r3, #0
 8002d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d76:	e169      	b.n	800304c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f040 8158 	bne.w	8003046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	4a9a      	ldr	r2, [pc, #616]	; (8003004 <HAL_GPIO_Init+0x2a0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002da0:	4a98      	ldr	r2, [pc, #608]	; (8003004 <HAL_GPIO_Init+0x2a0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d875      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002da6:	4a98      	ldr	r2, [pc, #608]	; (8003008 <HAL_GPIO_Init+0x2a4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d058      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002dac:	4a96      	ldr	r2, [pc, #600]	; (8003008 <HAL_GPIO_Init+0x2a4>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d86f      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002db2:	4a96      	ldr	r2, [pc, #600]	; (800300c <HAL_GPIO_Init+0x2a8>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d052      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002db8:	4a94      	ldr	r2, [pc, #592]	; (800300c <HAL_GPIO_Init+0x2a8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d869      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dbe:	4a94      	ldr	r2, [pc, #592]	; (8003010 <HAL_GPIO_Init+0x2ac>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d04c      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002dc4:	4a92      	ldr	r2, [pc, #584]	; (8003010 <HAL_GPIO_Init+0x2ac>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d863      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dca:	4a92      	ldr	r2, [pc, #584]	; (8003014 <HAL_GPIO_Init+0x2b0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d046      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
 8002dd0:	4a90      	ldr	r2, [pc, #576]	; (8003014 <HAL_GPIO_Init+0x2b0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d85d      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dd6:	2b12      	cmp	r3, #18
 8002dd8:	d82a      	bhi.n	8002e30 <HAL_GPIO_Init+0xcc>
 8002dda:	2b12      	cmp	r3, #18
 8002ddc:	d859      	bhi.n	8002e92 <HAL_GPIO_Init+0x12e>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_GPIO_Init+0x80>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e5f 	.word	0x08002e5f
 8002de8:	08002e39 	.word	0x08002e39
 8002dec:	08002e4b 	.word	0x08002e4b
 8002df0:	08002e8d 	.word	0x08002e8d
 8002df4:	08002e93 	.word	0x08002e93
 8002df8:	08002e93 	.word	0x08002e93
 8002dfc:	08002e93 	.word	0x08002e93
 8002e00:	08002e93 	.word	0x08002e93
 8002e04:	08002e93 	.word	0x08002e93
 8002e08:	08002e93 	.word	0x08002e93
 8002e0c:	08002e93 	.word	0x08002e93
 8002e10:	08002e93 	.word	0x08002e93
 8002e14:	08002e93 	.word	0x08002e93
 8002e18:	08002e93 	.word	0x08002e93
 8002e1c:	08002e93 	.word	0x08002e93
 8002e20:	08002e93 	.word	0x08002e93
 8002e24:	08002e93 	.word	0x08002e93
 8002e28:	08002e41 	.word	0x08002e41
 8002e2c:	08002e55 	.word	0x08002e55
 8002e30:	4a79      	ldr	r2, [pc, #484]	; (8003018 <HAL_GPIO_Init+0x2b4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e36:	e02c      	b.n	8002e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	623b      	str	r3, [r7, #32]
          break;
 8002e3e:	e029      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	3304      	adds	r3, #4
 8002e46:	623b      	str	r3, [r7, #32]
          break;
 8002e48:	e024      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	3308      	adds	r3, #8
 8002e50:	623b      	str	r3, [r7, #32]
          break;
 8002e52:	e01f      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	623b      	str	r3, [r7, #32]
          break;
 8002e5c:	e01a      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e66:	2304      	movs	r3, #4
 8002e68:	623b      	str	r3, [r7, #32]
          break;
 8002e6a:	e013      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e74:	2308      	movs	r3, #8
 8002e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	611a      	str	r2, [r3, #16]
          break;
 8002e7e:	e009      	b.n	8002e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e80:	2308      	movs	r3, #8
 8002e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	615a      	str	r2, [r3, #20]
          break;
 8002e8a:	e003      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	623b      	str	r3, [r7, #32]
          break;
 8002e90:	e000      	b.n	8002e94 <HAL_GPIO_Init+0x130>
          break;
 8002e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2bff      	cmp	r3, #255	; 0xff
 8002e98:	d801      	bhi.n	8002e9e <HAL_GPIO_Init+0x13a>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	e001      	b.n	8002ea2 <HAL_GPIO_Init+0x13e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2bff      	cmp	r3, #255	; 0xff
 8002ea8:	d802      	bhi.n	8002eb0 <HAL_GPIO_Init+0x14c>
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	e002      	b.n	8002eb6 <HAL_GPIO_Init+0x152>
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	3b08      	subs	r3, #8
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	6a39      	ldr	r1, [r7, #32]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80b1 	beq.w	8003046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4a4c      	ldr	r2, [pc, #304]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002eea:	f043 0301 	orr.w	r3, r3, #1
 8002eee:	6193      	str	r3, [r2, #24]
 8002ef0:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_GPIO_Init+0x2b8>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002efc:	4a48      	ldr	r2, [pc, #288]	; (8003020 <HAL_GPIO_Init+0x2bc>)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	220f      	movs	r2, #15
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a40      	ldr	r2, [pc, #256]	; (8003024 <HAL_GPIO_Init+0x2c0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <HAL_GPIO_Init+0x1ec>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a3f      	ldr	r2, [pc, #252]	; (8003028 <HAL_GPIO_Init+0x2c4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00d      	beq.n	8002f4c <HAL_GPIO_Init+0x1e8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a3e      	ldr	r2, [pc, #248]	; (800302c <HAL_GPIO_Init+0x2c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d007      	beq.n	8002f48 <HAL_GPIO_Init+0x1e4>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a3d      	ldr	r2, [pc, #244]	; (8003030 <HAL_GPIO_Init+0x2cc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d101      	bne.n	8002f44 <HAL_GPIO_Init+0x1e0>
 8002f40:	2303      	movs	r3, #3
 8002f42:	e006      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f44:	2304      	movs	r3, #4
 8002f46:	e004      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e002      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <HAL_GPIO_Init+0x1ee>
 8002f50:	2300      	movs	r3, #0
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	f002 0203 	and.w	r2, r2, #3
 8002f58:	0092      	lsls	r2, r2, #2
 8002f5a:	4093      	lsls	r3, r2
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f62:	492f      	ldr	r1, [pc, #188]	; (8003020 <HAL_GPIO_Init+0x2bc>)
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	492c      	ldr	r1, [pc, #176]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	43db      	mvns	r3, r3
 8002f92:	4928      	ldr	r1, [pc, #160]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002fa4:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	4922      	ldr	r1, [pc, #136]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
 8002fb0:	e006      	b.n	8002fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	491e      	ldr	r1, [pc, #120]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d006      	beq.n	8002fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4918      	ldr	r1, [pc, #96]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
 8002fd8:	e006      	b.n	8002fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	4914      	ldr	r1, [pc, #80]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d021      	beq.n	8003038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	490e      	ldr	r1, [pc, #56]	; (8003034 <HAL_GPIO_Init+0x2d0>)
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
 8003000:	e021      	b.n	8003046 <HAL_GPIO_Init+0x2e2>
 8003002:	bf00      	nop
 8003004:	10320000 	.word	0x10320000
 8003008:	10310000 	.word	0x10310000
 800300c:	10220000 	.word	0x10220000
 8003010:	10210000 	.word	0x10210000
 8003014:	10120000 	.word	0x10120000
 8003018:	10110000 	.word	0x10110000
 800301c:	40021000 	.word	0x40021000
 8003020:	40010000 	.word	0x40010000
 8003024:	40010800 	.word	0x40010800
 8003028:	40010c00 	.word	0x40010c00
 800302c:	40011000 	.word	0x40011000
 8003030:	40011400 	.word	0x40011400
 8003034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003038:	4b0b      	ldr	r3, [pc, #44]	; (8003068 <HAL_GPIO_Init+0x304>)
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	43db      	mvns	r3, r3
 8003040:	4909      	ldr	r1, [pc, #36]	; (8003068 <HAL_GPIO_Init+0x304>)
 8003042:	4013      	ands	r3, r2
 8003044:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	3301      	adds	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	f47f ae8e 	bne.w	8002d78 <HAL_GPIO_Init+0x14>
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	372c      	adds	r7, #44	; 0x2c
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40010400 	.word	0x40010400

0800306c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800307c:	787b      	ldrb	r3, [r7, #1]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003088:	e003      	b.n	8003092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	041a      	lsls	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4013      	ands	r3, r2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030b2:	4a05      	ldr	r2, [pc, #20]	; (80030c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f806 	bl	80030cc <HAL_GPIO_EXTI_Callback>
  }
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e12b      	b.n	800334a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe fcb2 	bl	8001a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	; 0x24
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003132:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003142:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003144:	f000 ffea 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8003148:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a81      	ldr	r2, [pc, #516]	; (8003354 <HAL_I2C_Init+0x274>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d807      	bhi.n	8003164 <HAL_I2C_Init+0x84>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4a80      	ldr	r2, [pc, #512]	; (8003358 <HAL_I2C_Init+0x278>)
 8003158:	4293      	cmp	r3, r2
 800315a:	bf94      	ite	ls
 800315c:	2301      	movls	r3, #1
 800315e:	2300      	movhi	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e006      	b.n	8003172 <HAL_I2C_Init+0x92>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4a7d      	ldr	r2, [pc, #500]	; (800335c <HAL_I2C_Init+0x27c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	bf94      	ite	ls
 800316c:	2301      	movls	r3, #1
 800316e:	2300      	movhi	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e0e7      	b.n	800334a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a78      	ldr	r2, [pc, #480]	; (8003360 <HAL_I2C_Init+0x280>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0c9b      	lsrs	r3, r3, #18
 8003184:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a6a      	ldr	r2, [pc, #424]	; (8003354 <HAL_I2C_Init+0x274>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d802      	bhi.n	80031b4 <HAL_I2C_Init+0xd4>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	3301      	adds	r3, #1
 80031b2:	e009      	b.n	80031c8 <HAL_I2C_Init+0xe8>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ba:	fb02 f303 	mul.w	r3, r2, r3
 80031be:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_I2C_Init+0x284>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	3301      	adds	r3, #1
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	495c      	ldr	r1, [pc, #368]	; (8003354 <HAL_I2C_Init+0x274>)
 80031e4:	428b      	cmp	r3, r1
 80031e6:	d819      	bhi.n	800321c <HAL_I2C_Init+0x13c>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e59      	subs	r1, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031fc:	400b      	ands	r3, r1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_I2C_Init+0x138>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e59      	subs	r1, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003216:	e051      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 8003218:	2304      	movs	r3, #4
 800321a:	e04f      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d111      	bne.n	8003248 <HAL_I2C_Init+0x168>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	1e58      	subs	r0, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e012      	b.n	800326e <HAL_I2C_Init+0x18e>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1e58      	subs	r0, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6859      	ldr	r1, [r3, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	0099      	lsls	r1, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Init+0x196>
 8003272:	2301      	movs	r3, #1
 8003274:	e022      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10e      	bne.n	800329c <HAL_I2C_Init+0x1bc>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1e58      	subs	r0, r3, #1
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6859      	ldr	r1, [r3, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	440b      	add	r3, r1
 800328c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800329a:	e00f      	b.n	80032bc <HAL_I2C_Init+0x1dc>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e58      	subs	r0, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6859      	ldr	r1, [r3, #4]
 80032a4:	460b      	mov	r3, r1
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	0099      	lsls	r1, r3, #2
 80032ac:	440b      	add	r3, r1
 80032ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b2:	3301      	adds	r3, #1
 80032b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	6809      	ldr	r1, [r1, #0]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69da      	ldr	r2, [r3, #28]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6911      	ldr	r1, [r2, #16]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68d2      	ldr	r2, [r2, #12]
 80032f6:	4311      	orrs	r1, r2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6812      	ldr	r2, [r2, #0]
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f042 0201 	orr.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	000186a0 	.word	0x000186a0
 8003358:	001e847f 	.word	0x001e847f
 800335c:	003d08ff 	.word	0x003d08ff
 8003360:	431bde83 	.word	0x431bde83
 8003364:	10624dd3 	.word	0x10624dd3

08003368 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	461a      	mov	r2, r3
 8003374:	460b      	mov	r3, r1
 8003376:	817b      	strh	r3, [r7, #10]
 8003378:	4613      	mov	r3, r2
 800337a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7fe fdfc 	bl	8001f78 <HAL_GetTick>
 8003380:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b20      	cmp	r3, #32
 800338c:	f040 80e0 	bne.w	8003550 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2319      	movs	r3, #25
 8003396:	2201      	movs	r2, #1
 8003398:	4970      	ldr	r1, [pc, #448]	; (800355c <HAL_I2C_Master_Transmit+0x1f4>)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f964 	bl	8003668 <I2C_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0d3      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_I2C_Master_Transmit+0x50>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e0cc      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1ea>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d007      	beq.n	80033de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2221      	movs	r2, #33	; 0x21
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2210      	movs	r2, #16
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	893a      	ldrh	r2, [r7, #8]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a50      	ldr	r2, [pc, #320]	; (8003560 <HAL_I2C_Master_Transmit+0x1f8>)
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003420:	8979      	ldrh	r1, [r7, #10]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	6a3a      	ldr	r2, [r7, #32]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f89c 	bl	8003564 <I2C_MasterRequestWrite>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e08d      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800344c:	e066      	b.n	800351c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6a39      	ldr	r1, [r7, #32]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f9de 	bl	8003814 <I2C_WaitOnTXEFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00d      	beq.n	800347a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b04      	cmp	r3, #4
 8003464:	d107      	bne.n	8003476 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003474:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06b      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d11b      	bne.n	80034f0 <HAL_I2C_Master_Transmit+0x188>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d017      	beq.n	80034f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	6a39      	ldr	r1, [r7, #32]
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f9ce 	bl	8003896 <I2C_WaitOnBTFFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	2b04      	cmp	r3, #4
 8003506:	d107      	bne.n	8003518 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003516:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e01a      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	2b00      	cmp	r3, #0
 8003522:	d194      	bne.n	800344e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e000      	b.n	8003552 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003550:	2302      	movs	r3, #2
  }
}
 8003552:	4618      	mov	r0, r3
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	00100002 	.word	0x00100002
 8003560:	ffff0000 	.word	0xffff0000

08003564 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af02      	add	r7, sp, #8
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	460b      	mov	r3, r1
 8003572:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d006      	beq.n	800358e <I2C_MasterRequestWrite+0x2a>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d003      	beq.n	800358e <I2C_MasterRequestWrite+0x2a>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800358c:	d108      	bne.n	80035a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	e00b      	b.n	80035b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	2b12      	cmp	r3, #18
 80035a6:	d107      	bne.n	80035b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f000 f84f 	bl	8003668 <I2C_WaitOnFlagUntilTimeout>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00d      	beq.n	80035ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035de:	d103      	bne.n	80035e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e035      	b.n	8003658 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f4:	d108      	bne.n	8003608 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035f6:	897b      	ldrh	r3, [r7, #10]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003604:	611a      	str	r2, [r3, #16]
 8003606:	e01b      	b.n	8003640 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003608:	897b      	ldrh	r3, [r7, #10]
 800360a:	11db      	asrs	r3, r3, #7
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 0306 	and.w	r3, r3, #6
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f063 030f 	orn	r3, r3, #15
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	490e      	ldr	r1, [pc, #56]	; (8003660 <I2C_MasterRequestWrite+0xfc>)
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f875 	bl	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e010      	b.n	8003658 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003636:	897b      	ldrh	r3, [r7, #10]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4907      	ldr	r1, [pc, #28]	; (8003664 <I2C_MasterRequestWrite+0x100>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f865 	bl	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	00010008 	.word	0x00010008
 8003664:	00010002 	.word	0x00010002

08003668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	603b      	str	r3, [r7, #0]
 8003674:	4613      	mov	r3, r2
 8003676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003678:	e025      	b.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003680:	d021      	beq.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003682:	f7fe fc79 	bl	8001f78 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d302      	bcc.n	8003698 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d116      	bne.n	80036c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f043 0220 	orr.w	r2, r3, #32
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e023      	b.n	800370e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	0c1b      	lsrs	r3, r3, #16
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d10d      	bne.n	80036ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf0c      	ite	eq
 80036e2:	2301      	moveq	r3, #1
 80036e4:	2300      	movne	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	e00c      	b.n	8003706 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	43da      	mvns	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d0b6      	beq.n	800367a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003724:	e051      	b.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003730:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003734:	d123      	bne.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003744:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800374e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f043 0204 	orr.w	r2, r3, #4
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e046      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d021      	beq.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fe fbf7 	bl	8001f78 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d116      	bne.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e020      	b.n	800380c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10c      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e00b      	b.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	43da      	mvns	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d18d      	bne.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003820:	e02d      	b.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f878 	bl	8003918 <I2C_IsAcknowledgeFailed>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e02d      	b.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d021      	beq.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7fe fb9d 	bl	8001f78 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f043 0220 	orr.w	r2, r3, #32
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e007      	b.n	800388e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b80      	cmp	r3, #128	; 0x80
 800388a:	d1ca      	bne.n	8003822 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b084      	sub	sp, #16
 800389a:	af00      	add	r7, sp, #0
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038a2:	e02d      	b.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f837 	bl	8003918 <I2C_IsAcknowledgeFailed>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e02d      	b.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d021      	beq.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038bc:	f7fe fb5c 	bl	8001f78 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d116      	bne.n	8003900 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e007      	b.n	8003910 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b04      	cmp	r3, #4
 800390c:	d1ca      	bne.n	80038a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392e:	d11b      	bne.n	8003968 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003938:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bc80      	pop	{r7}
 8003972:	4770      	bx	lr

08003974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e272      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8087 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 030c 	and.w	r3, r3, #12
 800399c:	2b04      	cmp	r3, #4
 800399e:	d00c      	beq.n	80039ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039a0:	4b8f      	ldr	r3, [pc, #572]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d112      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5e>
 80039ac:	4b8c      	ldr	r3, [pc, #560]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ba:	4b89      	ldr	r3, [pc, #548]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d06c      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x12c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d168      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e24c      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x76>
 80039dc:	4b80      	ldr	r3, [pc, #512]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a7f      	ldr	r2, [pc, #508]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e02e      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x98>
 80039f2:	4b7b      	ldr	r3, [pc, #492]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a7a      	ldr	r2, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 80039f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	4b78      	ldr	r3, [pc, #480]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a77      	ldr	r2, [pc, #476]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	e01d      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a14:	d10c      	bne.n	8003a30 <HAL_RCC_OscConfig+0xbc>
 8003a16:	4b72      	ldr	r3, [pc, #456]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a71      	ldr	r2, [pc, #452]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	4b6f      	ldr	r3, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a6e      	ldr	r2, [pc, #440]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2c:	6013      	str	r3, [r2, #0]
 8003a2e:	e00b      	b.n	8003a48 <HAL_RCC_OscConfig+0xd4>
 8003a30:	4b6b      	ldr	r3, [pc, #428]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6a      	ldr	r2, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	6013      	str	r3, [r2, #0]
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a67      	ldr	r2, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a46:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d013      	beq.n	8003a78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe fa92 	bl	8001f78 <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe fa8e 	bl	8001f78 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e200      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	4b5d      	ldr	r3, [pc, #372]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe4>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a78:	f7fe fa7e 	bl	8001f78 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe fa7a 	bl	8001f78 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e1ec      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x10c>
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d063      	beq.n	8003b76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aae:	4b4c      	ldr	r3, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f003 030c 	and.w	r3, r3, #12
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00b      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003aba:	4b49      	ldr	r3, [pc, #292]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d11c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x18c>
 8003ac6:	4b46      	ldr	r3, [pc, #280]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d116      	bne.n	8003b00 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_RCC_OscConfig+0x176>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e1c0      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aea:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4939      	ldr	r1, [pc, #228]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003afe:	e03a      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b08:	4b36      	ldr	r3, [pc, #216]	; (8003be4 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe fa33 	bl	8001f78 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b16:	f7fe fa2f 	bl	8001f78 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1a1      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b28:	4b2d      	ldr	r3, [pc, #180]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4927      	ldr	r1, [pc, #156]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
 8003b48:	e015      	b.n	8003b76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fa12 	bl	8001f78 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fe fa0e 	bl	8001f78 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e180      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d03a      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d019      	beq.n	8003bbe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fe f9f2 	bl	8001f78 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b98:	f7fe f9ee 	bl	8001f78 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e160      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bb6:	2001      	movs	r0, #1
 8003bb8:	f000 fad8 	bl	800416c <RCC_Delay>
 8003bbc:	e01c      	b.n	8003bf8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbe:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <HAL_RCC_OscConfig+0x274>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc4:	f7fe f9d8 	bl	8001f78 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bca:	e00f      	b.n	8003bec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fe f9d4 	bl	8001f78 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d908      	bls.n	8003bec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e146      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	42420000 	.word	0x42420000
 8003be8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bec:	4b92      	ldr	r3, [pc, #584]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e9      	bne.n	8003bcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a6 	beq.w	8003d52 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0a:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4a87      	ldr	r2, [pc, #540]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	61d3      	str	r3, [r2, #28]
 8003c22:	4b85      	ldr	r3, [pc, #532]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c32:	4b82      	ldr	r3, [pc, #520]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d118      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c3e:	4b7f      	ldr	r3, [pc, #508]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7e      	ldr	r2, [pc, #504]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4a:	f7fe f995 	bl	8001f78 <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fe f991 	bl	8001f78 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b64      	cmp	r3, #100	; 0x64
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e103      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	4b75      	ldr	r3, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x4c8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0f0      	beq.n	8003c52 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x312>
 8003c78:	4b6f      	ldr	r3, [pc, #444]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	4a6e      	ldr	r2, [pc, #440]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	6213      	str	r3, [r2, #32]
 8003c84:	e02d      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x334>
 8003c8e:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a69      	ldr	r2, [pc, #420]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	6213      	str	r3, [r2, #32]
 8003c9a:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a66      	ldr	r2, [pc, #408]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	6213      	str	r3, [r2, #32]
 8003ca6:	e01c      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b05      	cmp	r3, #5
 8003cae:	d10c      	bne.n	8003cca <HAL_RCC_OscConfig+0x356>
 8003cb0:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4a60      	ldr	r2, [pc, #384]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	6213      	str	r3, [r2, #32]
 8003cbc:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a5d      	ldr	r2, [pc, #372]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	e00b      	b.n	8003ce2 <HAL_RCC_OscConfig+0x36e>
 8003cca:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4a5a      	ldr	r2, [pc, #360]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	6213      	str	r3, [r2, #32]
 8003cd6:	4b58      	ldr	r3, [pc, #352]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	4a57      	ldr	r2, [pc, #348]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d015      	beq.n	8003d16 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cea:	f7fe f945 	bl	8001f78 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe f941 	bl	8001f78 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0b1      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ee      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x37e>
 8003d14:	e014      	b.n	8003d40 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fe f92f 	bl	8001f78 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1c:	e00a      	b.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d1e:	f7fe f92b 	bl	8001f78 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e09b      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ee      	bne.n	8003d1e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d105      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d46:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4a3b      	ldr	r2, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d50:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 8087 	beq.w	8003e6a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d5c:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d061      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d146      	bne.n	8003dfe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d70:	4b33      	ldr	r3, [pc, #204]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fe f8ff 	bl	8001f78 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fe f8fb 	bl	8001f78 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e06d      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d90:	4b29      	ldr	r3, [pc, #164]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d108      	bne.n	8003db8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	4921      	ldr	r1, [pc, #132]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003db8:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a19      	ldr	r1, [r3, #32]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	491b      	ldr	r1, [pc, #108]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fe f8cf 	bl	8001f78 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fe f8cb 	bl	8001f78 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e03d      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x46a>
 8003dfc:	e035      	b.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe f8b8 	bl	8001f78 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fe f8b4 	bl	8001f78 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e026      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x498>
 8003e2a:	e01e      	b.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e019      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_OscConfig+0x500>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d001      	beq.n	8003e6a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3718      	adds	r7, #24
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40021000 	.word	0x40021000

08003e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0d0      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d910      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b67      	ldr	r3, [pc, #412]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 0207 	bic.w	r2, r3, #7
 8003ea2:	4965      	ldr	r1, [pc, #404]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b63      	ldr	r3, [pc, #396]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0b8      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ede:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b53      	ldr	r3, [pc, #332]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ef6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	494d      	ldr	r1, [pc, #308]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d040      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d115      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07f      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	4b41      	ldr	r3, [pc, #260]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e073      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e06b      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f56:	4b39      	ldr	r3, [pc, #228]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f023 0203 	bic.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4936      	ldr	r1, [pc, #216]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f68:	f7fe f806 	bl	8001f78 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f70:	f7fe f802 	bl	8001f78 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e053      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	4b2d      	ldr	r3, [pc, #180]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f003 020c 	and.w	r2, r3, #12
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d1eb      	bne.n	8003f70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f98:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d210      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa6:	4b24      	ldr	r3, [pc, #144]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f023 0207 	bic.w	r2, r3, #7
 8003fae:	4922      	ldr	r1, [pc, #136]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4916      	ldr	r1, [pc, #88]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	490e      	ldr	r1, [pc, #56]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004006:	f000 f821 	bl	800404c <HAL_RCC_GetSysClockFreq>
 800400a:	4602      	mov	r2, r0
 800400c:	4b0b      	ldr	r3, [pc, #44]	; (800403c <HAL_RCC_ClockConfig+0x1c4>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	490a      	ldr	r1, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	5ccb      	ldrb	r3, [r1, r3]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_RCC_ClockConfig+0x1cc>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1d0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd ff64 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40022000 	.word	0x40022000
 800403c:	40021000 	.word	0x40021000
 8004040:	08007bc4 	.word	0x08007bc4
 8004044:	20000004 	.word	0x20000004
 8004048:	20000008 	.word	0x20000008

0800404c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	b490      	push	{r4, r7}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004052:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004054:	1d3c      	adds	r4, r7, #4
 8004056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800405c:	f240 2301 	movw	r3, #513	; 0x201
 8004060:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	2300      	movs	r3, #0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b04      	cmp	r3, #4
 8004084:	d002      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x40>
 8004086:	2b08      	cmp	r3, #8
 8004088:	d003      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x46>
 800408a:	e02b      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800408c:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb4>)
 800408e:	623b      	str	r3, [r7, #32]
      break;
 8004090:	e02b      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	0c9b      	lsrs	r3, r3, #18
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	3328      	adds	r3, #40	; 0x28
 800409c:	443b      	add	r3, r7
 800409e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d012      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040ae:	4b13      	ldr	r3, [pc, #76]	; (80040fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	0c5b      	lsrs	r3, r3, #17
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	3328      	adds	r3, #40	; 0x28
 80040ba:	443b      	add	r3, r7
 80040bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040c6:	fb03 f202 	mul.w	r2, r3, r2
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
 80040d2:	e004      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	623b      	str	r3, [r7, #32]
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b06      	ldr	r3, [pc, #24]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040e6:	623b      	str	r3, [r7, #32]
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	6a3b      	ldr	r3, [r7, #32]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3728      	adds	r7, #40	; 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc90      	pop	{r4, r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	08007bb4 	.word	0x08007bb4
 80040fc:	40021000 	.word	0x40021000
 8004100:	007a1200 	.word	0x007a1200
 8004104:	003d0900 	.word	0x003d0900

08004108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800410c:	4b02      	ldr	r3, [pc, #8]	; (8004118 <HAL_RCC_GetHCLKFreq+0x10>)
 800410e:	681b      	ldr	r3, [r3, #0]
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004120:	f7ff fff2 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 8004124:	4602      	mov	r2, r0
 8004126:	4b05      	ldr	r3, [pc, #20]	; (800413c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	4903      	ldr	r1, [pc, #12]	; (8004140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004132:	5ccb      	ldrb	r3, [r1, r3]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	08007bd4 	.word	0x08007bd4

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004148:	f7ff ffde 	bl	8004108 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	0adb      	lsrs	r3, r3, #11
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4903      	ldr	r1, [pc, #12]	; (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004160:	4618      	mov	r0, r3
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000
 8004168:	08007bd4 	.word	0x08007bd4

0800416c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <RCC_Delay+0x34>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <RCC_Delay+0x38>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0a5b      	lsrs	r3, r3, #9
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004188:	bf00      	nop
  }
  while (Delay --);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	1e5a      	subs	r2, r3, #1
 800418e:	60fa      	str	r2, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1f9      	bne.n	8004188 <RCC_Delay+0x1c>
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	20000004 	.word	0x20000004
 80041a4:	10624dd3 	.word	0x10624dd3

080041a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d07d      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c8:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10d      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d4:	4b4c      	ldr	r3, [pc, #304]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041de:	61d3      	str	r3, [r2, #28]
 80041e0:	4b49      	ldr	r3, [pc, #292]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f0:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d118      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041fc:	4b43      	ldr	r3, [pc, #268]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a42      	ldr	r2, [pc, #264]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004208:	f7fd feb6 	bl	8001f78 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	e008      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004210:	f7fd feb2 	bl	8001f78 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e06d      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	4b3a      	ldr	r3, [pc, #232]	; (800430c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800422e:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004236:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02e      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d027      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004254:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004256:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800425c:	4b2c      	ldr	r3, [pc, #176]	; (8004310 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004262:	4a29      	ldr	r2, [pc, #164]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d014      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004272:	f7fd fe81 	bl	8001f78 <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	e00a      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427a:	f7fd fe7d 	bl	8001f78 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f241 3288 	movw	r2, #5000	; 0x1388
 8004288:	4293      	cmp	r3, r2
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e036      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ee      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4917      	ldr	r1, [pc, #92]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	4a13      	ldr	r2, [pc, #76]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	490b      	ldr	r1, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ea:	4b07      	ldr	r3, [pc, #28]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	4904      	ldr	r1, [pc, #16]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
 8004310:	42420440 	.word	0x42420440

08004314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e041      	b.n	80043aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd fbd6 	bl	8001aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3304      	adds	r3, #4
 8004350:	4619      	mov	r1, r3
 8004352:	4610      	mov	r0, r2
 8004354:	f000 fa7a 	bl	800484c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
	...

080043b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e03a      	b.n	8004442 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIM_Base_Start_IT+0x98>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00e      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x58>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f6:	d009      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x58>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <HAL_TIM_Base_Start_IT+0x9c>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x58>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a13      	ldr	r2, [pc, #76]	; (8004454 <HAL_TIM_Base_Start_IT+0xa0>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b06      	cmp	r3, #6
 800441c:	d010      	beq.n	8004440 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442e:	e007      	b.n	8004440 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800

08004458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d122      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b02      	cmp	r3, #2
 800447a:	d11b      	bne.n	80044b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0202 	mvn.w	r2, #2
 8004484:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9ba 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f9ad 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f9bc 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0204 	mvn.w	r2, #4
 80044d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f990 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f983 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f992 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0308 	and.w	r3, r3, #8
 8004512:	2b08      	cmp	r3, #8
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b08      	cmp	r3, #8
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0208 	mvn.w	r2, #8
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2204      	movs	r2, #4
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f966 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f959 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f968 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d122      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b10      	cmp	r3, #16
 8004576:	d11b      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0210 	mvn.w	r2, #16
 8004580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2208      	movs	r2, #8
 8004586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f93c 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f92f 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f93e 	bl	8004826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10e      	bne.n	80045dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d107      	bne.n	80045dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0201 	mvn.w	r2, #1
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f90a 	bl	80047f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	2b80      	cmp	r3, #128	; 0x80
 80045e8:	d10e      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d107      	bne.n	8004608 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa81 	bl	8004b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004620:	2b40      	cmp	r3, #64	; 0x40
 8004622:	d107      	bne.n	8004634 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800462c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f902 	bl	8004838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b20      	cmp	r3, #32
 8004640:	d10e      	bne.n	8004660 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b20      	cmp	r3, #32
 800464e:	d107      	bne.n	8004660 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f06f 0220 	mvn.w	r2, #32
 8004658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fa4c 	bl	8004af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIM_ConfigClockSource+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e0b3      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x180>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800469e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b8:	d03e      	beq.n	8004738 <HAL_TIM_ConfigClockSource+0xd0>
 80046ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046be:	f200 8087 	bhi.w	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	f000 8085 	beq.w	80047d4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d87f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 80046d0:	2b70      	cmp	r3, #112	; 0x70
 80046d2:	d01a      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xa2>
 80046d4:	2b70      	cmp	r3, #112	; 0x70
 80046d6:	d87b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 80046d8:	2b60      	cmp	r3, #96	; 0x60
 80046da:	d050      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x116>
 80046dc:	2b60      	cmp	r3, #96	; 0x60
 80046de:	d877      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 80046e0:	2b50      	cmp	r3, #80	; 0x50
 80046e2:	d03c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0xf6>
 80046e4:	2b50      	cmp	r3, #80	; 0x50
 80046e6:	d873      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 80046e8:	2b40      	cmp	r3, #64	; 0x40
 80046ea:	d058      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x136>
 80046ec:	2b40      	cmp	r3, #64	; 0x40
 80046ee:	d86f      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 80046f0:	2b30      	cmp	r3, #48	; 0x30
 80046f2:	d064      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x156>
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d86b      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d060      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x156>
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d867      	bhi.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d05c      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x156>
 8004704:	2b10      	cmp	r3, #16
 8004706:	d05a      	beq.n	80047be <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004708:	e062      	b.n	80047d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f000 f970 	bl	80049fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800472c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	609a      	str	r2, [r3, #8]
      break;
 8004736:	e04e      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6818      	ldr	r0, [r3, #0]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6899      	ldr	r1, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f000 f959 	bl	80049fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800475a:	609a      	str	r2, [r3, #8]
      break;
 800475c:	e03b      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 f8d0 	bl	8004910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2150      	movs	r1, #80	; 0x50
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f927 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 800477c:	e02b      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	461a      	mov	r2, r3
 800478c:	f000 f8ee 	bl	800496c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2160      	movs	r1, #96	; 0x60
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f917 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 800479c:	e01b      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6859      	ldr	r1, [r3, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	f000 f8b0 	bl	8004910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2140      	movs	r1, #64	; 0x40
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f907 	bl	80049ca <TIM_ITRx_SetConfig>
      break;
 80047bc:	e00b      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4619      	mov	r1, r3
 80047c8:	4610      	mov	r0, r2
 80047ca:	f000 f8fe 	bl	80049ca <TIM_ITRx_SetConfig>
        break;
 80047ce:	e002      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047d0:	bf00      	nop
 80047d2:	e000      	b.n	80047d6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
	...

0800484c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a29      	ldr	r2, [pc, #164]	; (8004904 <TIM_Base_SetConfig+0xb8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00b      	beq.n	800487c <TIM_Base_SetConfig+0x30>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486a:	d007      	beq.n	800487c <TIM_Base_SetConfig+0x30>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a26      	ldr	r2, [pc, #152]	; (8004908 <TIM_Base_SetConfig+0xbc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_Base_SetConfig+0x30>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a25      	ldr	r2, [pc, #148]	; (800490c <TIM_Base_SetConfig+0xc0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <TIM_Base_SetConfig+0xb8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00b      	beq.n	80048ae <TIM_Base_SetConfig+0x62>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d007      	beq.n	80048ae <TIM_Base_SetConfig+0x62>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <TIM_Base_SetConfig+0xbc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_Base_SetConfig+0x62>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <TIM_Base_SetConfig+0xc0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d108      	bne.n	80048c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a07      	ldr	r2, [pc, #28]	; (8004904 <TIM_Base_SetConfig+0xb8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d103      	bne.n	80048f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	615a      	str	r2, [r3, #20]
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800

08004910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0201 	bic.w	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 030a 	bic.w	r3, r3, #10
 800494c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f023 0210 	bic.w	r2, r3, #16
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	031b      	lsls	r3, r3, #12
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	621a      	str	r2, [r3, #32]
}
 80049c0:	bf00      	nop
 80049c2:	371c      	adds	r7, #28
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f043 0307 	orr.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr

080049fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	609a      	str	r2, [r3, #8]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e046      	b.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a10      	ldr	r2, [pc, #64]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800

08004af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr

08004b0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e03f      	b.n	8004bae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc fff8 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	; 0x24
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f829 	bl	8004bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	695a      	ldr	r2, [r3, #20]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004bf2:	f023 030c 	bic.w	r3, r3, #12
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	68b9      	ldr	r1, [r7, #8]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ccc <UART_SetConfig+0x114>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d103      	bne.n	8004c28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c20:	f7ff fa90 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	e002      	b.n	8004c2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7ff fa78 	bl	800411c <HAL_RCC_GetPCLK1Freq>
 8004c2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009a      	lsls	r2, r3, #2
 8004c38:	441a      	add	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	4a22      	ldr	r2, [pc, #136]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	0119      	lsls	r1, r3, #4
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009a      	lsls	r2, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c64:	4b1a      	ldr	r3, [pc, #104]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c66:	fba3 0302 	umull	r0, r3, r3, r2
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2064      	movs	r0, #100	; 0x64
 8004c6e:	fb00 f303 	mul.w	r3, r0, r3
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	; 0x32
 8004c78:	4a15      	ldr	r2, [pc, #84]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c84:	4419      	add	r1, r3
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <UART_SetConfig+0x118>)
 8004c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2064      	movs	r0, #100	; 0x64
 8004ca6:	fb00 f303 	mul.w	r3, r0, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	3332      	adds	r3, #50	; 0x32
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <UART_SetConfig+0x118>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	51eb851f 	.word	0x51eb851f

08004cd4 <__errno>:
 8004cd4:	4b01      	ldr	r3, [pc, #4]	; (8004cdc <__errno+0x8>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000010 	.word	0x20000010

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	4d0c      	ldr	r5, [pc, #48]	; (8004d18 <__libc_init_array+0x38>)
 8004ce6:	4c0d      	ldr	r4, [pc, #52]	; (8004d1c <__libc_init_array+0x3c>)
 8004ce8:	1b64      	subs	r4, r4, r5
 8004cea:	10a4      	asrs	r4, r4, #2
 8004cec:	42a6      	cmp	r6, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	f002 fefa 	bl	8007ae8 <_init>
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	4d0a      	ldr	r5, [pc, #40]	; (8004d20 <__libc_init_array+0x40>)
 8004cf8:	4c0a      	ldr	r4, [pc, #40]	; (8004d24 <__libc_init_array+0x44>)
 8004cfa:	1b64      	subs	r4, r4, r5
 8004cfc:	10a4      	asrs	r4, r4, #2
 8004cfe:	42a6      	cmp	r6, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d08:	4798      	blx	r3
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08007fb4 	.word	0x08007fb4
 8004d1c:	08007fb4 	.word	0x08007fb4
 8004d20:	08007fb4 	.word	0x08007fb4
 8004d24:	08007fb8 	.word	0x08007fb8

08004d28 <memset>:
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4402      	add	r2, r0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	f803 1b01 	strb.w	r1, [r3], #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <__cvt>:
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3e:	461f      	mov	r7, r3
 8004d40:	bfbb      	ittet	lt
 8004d42:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004d46:	461f      	movlt	r7, r3
 8004d48:	2300      	movge	r3, #0
 8004d4a:	232d      	movlt	r3, #45	; 0x2d
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	4614      	mov	r4, r2
 8004d50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d52:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004d54:	7013      	strb	r3, [r2, #0]
 8004d56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d58:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004d5c:	f023 0820 	bic.w	r8, r3, #32
 8004d60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d64:	d005      	beq.n	8004d72 <__cvt+0x3a>
 8004d66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d6a:	d100      	bne.n	8004d6e <__cvt+0x36>
 8004d6c:	3501      	adds	r5, #1
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e000      	b.n	8004d74 <__cvt+0x3c>
 8004d72:	2303      	movs	r3, #3
 8004d74:	aa07      	add	r2, sp, #28
 8004d76:	9204      	str	r2, [sp, #16]
 8004d78:	aa06      	add	r2, sp, #24
 8004d7a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d7e:	e9cd 3500 	strd	r3, r5, [sp]
 8004d82:	4622      	mov	r2, r4
 8004d84:	463b      	mov	r3, r7
 8004d86:	f000 fce3 	bl	8005750 <_dtoa_r>
 8004d8a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d8e:	4606      	mov	r6, r0
 8004d90:	d102      	bne.n	8004d98 <__cvt+0x60>
 8004d92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d94:	07db      	lsls	r3, r3, #31
 8004d96:	d522      	bpl.n	8004dde <__cvt+0xa6>
 8004d98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d9c:	eb06 0905 	add.w	r9, r6, r5
 8004da0:	d110      	bne.n	8004dc4 <__cvt+0x8c>
 8004da2:	7833      	ldrb	r3, [r6, #0]
 8004da4:	2b30      	cmp	r3, #48	; 0x30
 8004da6:	d10a      	bne.n	8004dbe <__cvt+0x86>
 8004da8:	2200      	movs	r2, #0
 8004daa:	2300      	movs	r3, #0
 8004dac:	4620      	mov	r0, r4
 8004dae:	4639      	mov	r1, r7
 8004db0:	f7fb fdfa 	bl	80009a8 <__aeabi_dcmpeq>
 8004db4:	b918      	cbnz	r0, 8004dbe <__cvt+0x86>
 8004db6:	f1c5 0501 	rsb	r5, r5, #1
 8004dba:	f8ca 5000 	str.w	r5, [sl]
 8004dbe:	f8da 3000 	ldr.w	r3, [sl]
 8004dc2:	4499      	add	r9, r3
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4620      	mov	r0, r4
 8004dca:	4639      	mov	r1, r7
 8004dcc:	f7fb fdec 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd0:	b108      	cbz	r0, 8004dd6 <__cvt+0x9e>
 8004dd2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dd6:	2230      	movs	r2, #48	; 0x30
 8004dd8:	9b07      	ldr	r3, [sp, #28]
 8004dda:	454b      	cmp	r3, r9
 8004ddc:	d307      	bcc.n	8004dee <__cvt+0xb6>
 8004dde:	4630      	mov	r0, r6
 8004de0:	9b07      	ldr	r3, [sp, #28]
 8004de2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004de4:	1b9b      	subs	r3, r3, r6
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	b008      	add	sp, #32
 8004dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	9107      	str	r1, [sp, #28]
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e7f0      	b.n	8004dd8 <__cvt+0xa0>

08004df6 <__exponent>:
 8004df6:	4603      	mov	r3, r0
 8004df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dfa:	2900      	cmp	r1, #0
 8004dfc:	f803 2b02 	strb.w	r2, [r3], #2
 8004e00:	bfb6      	itet	lt
 8004e02:	222d      	movlt	r2, #45	; 0x2d
 8004e04:	222b      	movge	r2, #43	; 0x2b
 8004e06:	4249      	neglt	r1, r1
 8004e08:	2909      	cmp	r1, #9
 8004e0a:	7042      	strb	r2, [r0, #1]
 8004e0c:	dd2b      	ble.n	8004e66 <__exponent+0x70>
 8004e0e:	f10d 0407 	add.w	r4, sp, #7
 8004e12:	46a4      	mov	ip, r4
 8004e14:	270a      	movs	r7, #10
 8004e16:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e1a:	460a      	mov	r2, r1
 8004e1c:	46a6      	mov	lr, r4
 8004e1e:	fb07 1516 	mls	r5, r7, r6, r1
 8004e22:	2a63      	cmp	r2, #99	; 0x63
 8004e24:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004e28:	4631      	mov	r1, r6
 8004e2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e32:	dcf0      	bgt.n	8004e16 <__exponent+0x20>
 8004e34:	3130      	adds	r1, #48	; 0x30
 8004e36:	f1ae 0502 	sub.w	r5, lr, #2
 8004e3a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e3e:	4629      	mov	r1, r5
 8004e40:	1c44      	adds	r4, r0, #1
 8004e42:	4561      	cmp	r1, ip
 8004e44:	d30a      	bcc.n	8004e5c <__exponent+0x66>
 8004e46:	f10d 0209 	add.w	r2, sp, #9
 8004e4a:	eba2 020e 	sub.w	r2, r2, lr
 8004e4e:	4565      	cmp	r5, ip
 8004e50:	bf88      	it	hi
 8004e52:	2200      	movhi	r2, #0
 8004e54:	4413      	add	r3, r2
 8004e56:	1a18      	subs	r0, r3, r0
 8004e58:	b003      	add	sp, #12
 8004e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e60:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e64:	e7ed      	b.n	8004e42 <__exponent+0x4c>
 8004e66:	2330      	movs	r3, #48	; 0x30
 8004e68:	3130      	adds	r1, #48	; 0x30
 8004e6a:	7083      	strb	r3, [r0, #2]
 8004e6c:	70c1      	strb	r1, [r0, #3]
 8004e6e:	1d03      	adds	r3, r0, #4
 8004e70:	e7f1      	b.n	8004e56 <__exponent+0x60>
	...

08004e74 <_printf_float>:
 8004e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	b091      	sub	sp, #68	; 0x44
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004e80:	4616      	mov	r6, r2
 8004e82:	461f      	mov	r7, r3
 8004e84:	4605      	mov	r5, r0
 8004e86:	f001 fa51 	bl	800632c <_localeconv_r>
 8004e8a:	6803      	ldr	r3, [r0, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e90:	f7fb f95e 	bl	8000150 <strlen>
 8004e94:	2300      	movs	r3, #0
 8004e96:	930e      	str	r3, [sp, #56]	; 0x38
 8004e98:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e9e:	3307      	adds	r3, #7
 8004ea0:	f023 0307 	bic.w	r3, r3, #7
 8004ea4:	f103 0208 	add.w	r2, r3, #8
 8004ea8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004eac:	f8d4 b000 	ldr.w	fp, [r4]
 8004eb0:	f8c8 2000 	str.w	r2, [r8]
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ebc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004ec0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ec4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4b9c      	ldr	r3, [pc, #624]	; (8005140 <_printf_float+0x2cc>)
 8004ece:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ed0:	f7fb fd9c 	bl	8000a0c <__aeabi_dcmpun>
 8004ed4:	bb70      	cbnz	r0, 8004f34 <_printf_float+0xc0>
 8004ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eda:	4640      	mov	r0, r8
 8004edc:	4b98      	ldr	r3, [pc, #608]	; (8005140 <_printf_float+0x2cc>)
 8004ede:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ee0:	f7fb fd76 	bl	80009d0 <__aeabi_dcmple>
 8004ee4:	bb30      	cbnz	r0, 8004f34 <_printf_float+0xc0>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4640      	mov	r0, r8
 8004eec:	4651      	mov	r1, sl
 8004eee:	f7fb fd65 	bl	80009bc <__aeabi_dcmplt>
 8004ef2:	b110      	cbz	r0, 8004efa <_printf_float+0x86>
 8004ef4:	232d      	movs	r3, #45	; 0x2d
 8004ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efa:	4b92      	ldr	r3, [pc, #584]	; (8005144 <_printf_float+0x2d0>)
 8004efc:	4892      	ldr	r0, [pc, #584]	; (8005148 <_printf_float+0x2d4>)
 8004efe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f02:	bf94      	ite	ls
 8004f04:	4698      	movls	r8, r3
 8004f06:	4680      	movhi	r8, r0
 8004f08:	2303      	movs	r3, #3
 8004f0a:	f04f 0a00 	mov.w	sl, #0
 8004f0e:	6123      	str	r3, [r4, #16]
 8004f10:	f02b 0304 	bic.w	r3, fp, #4
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	4633      	mov	r3, r6
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	9700      	str	r7, [sp, #0]
 8004f1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f20:	f000 f9d4 	bl	80052cc <_printf_common>
 8004f24:	3001      	adds	r0, #1
 8004f26:	f040 8090 	bne.w	800504a <_printf_float+0x1d6>
 8004f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2e:	b011      	add	sp, #68	; 0x44
 8004f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f34:	4642      	mov	r2, r8
 8004f36:	4653      	mov	r3, sl
 8004f38:	4640      	mov	r0, r8
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	f7fb fd66 	bl	8000a0c <__aeabi_dcmpun>
 8004f40:	b148      	cbz	r0, 8004f56 <_printf_float+0xe2>
 8004f42:	f1ba 0f00 	cmp.w	sl, #0
 8004f46:	bfb8      	it	lt
 8004f48:	232d      	movlt	r3, #45	; 0x2d
 8004f4a:	4880      	ldr	r0, [pc, #512]	; (800514c <_printf_float+0x2d8>)
 8004f4c:	bfb8      	it	lt
 8004f4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f52:	4b7f      	ldr	r3, [pc, #508]	; (8005150 <_printf_float+0x2dc>)
 8004f54:	e7d3      	b.n	8004efe <_printf_float+0x8a>
 8004f56:	6863      	ldr	r3, [r4, #4]
 8004f58:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	d142      	bne.n	8004fe6 <_printf_float+0x172>
 8004f60:	2306      	movs	r3, #6
 8004f62:	6063      	str	r3, [r4, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	9206      	str	r2, [sp, #24]
 8004f68:	aa0e      	add	r2, sp, #56	; 0x38
 8004f6a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004f6e:	aa0d      	add	r2, sp, #52	; 0x34
 8004f70:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004f74:	9203      	str	r2, [sp, #12]
 8004f76:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004f7a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	4642      	mov	r2, r8
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4628      	mov	r0, r5
 8004f88:	4653      	mov	r3, sl
 8004f8a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004f8c:	f7ff fed4 	bl	8004d38 <__cvt>
 8004f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f92:	4680      	mov	r8, r0
 8004f94:	2947      	cmp	r1, #71	; 0x47
 8004f96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f98:	d108      	bne.n	8004fac <_printf_float+0x138>
 8004f9a:	1cc8      	adds	r0, r1, #3
 8004f9c:	db02      	blt.n	8004fa4 <_printf_float+0x130>
 8004f9e:	6863      	ldr	r3, [r4, #4]
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	dd40      	ble.n	8005026 <_printf_float+0x1b2>
 8004fa4:	f1a9 0902 	sub.w	r9, r9, #2
 8004fa8:	fa5f f989 	uxtb.w	r9, r9
 8004fac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fb0:	d81f      	bhi.n	8004ff2 <_printf_float+0x17e>
 8004fb2:	464a      	mov	r2, r9
 8004fb4:	3901      	subs	r1, #1
 8004fb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fba:	910d      	str	r1, [sp, #52]	; 0x34
 8004fbc:	f7ff ff1b 	bl	8004df6 <__exponent>
 8004fc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fc2:	4682      	mov	sl, r0
 8004fc4:	1813      	adds	r3, r2, r0
 8004fc6:	2a01      	cmp	r2, #1
 8004fc8:	6123      	str	r3, [r4, #16]
 8004fca:	dc02      	bgt.n	8004fd2 <_printf_float+0x15e>
 8004fcc:	6822      	ldr	r2, [r4, #0]
 8004fce:	07d2      	lsls	r2, r2, #31
 8004fd0:	d501      	bpl.n	8004fd6 <_printf_float+0x162>
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d09b      	beq.n	8004f16 <_printf_float+0xa2>
 8004fde:	232d      	movs	r3, #45	; 0x2d
 8004fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe4:	e797      	b.n	8004f16 <_printf_float+0xa2>
 8004fe6:	2947      	cmp	r1, #71	; 0x47
 8004fe8:	d1bc      	bne.n	8004f64 <_printf_float+0xf0>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1ba      	bne.n	8004f64 <_printf_float+0xf0>
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e7b7      	b.n	8004f62 <_printf_float+0xee>
 8004ff2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004ff6:	d118      	bne.n	800502a <_printf_float+0x1b6>
 8004ff8:	2900      	cmp	r1, #0
 8004ffa:	6863      	ldr	r3, [r4, #4]
 8004ffc:	dd0b      	ble.n	8005016 <_printf_float+0x1a2>
 8004ffe:	6121      	str	r1, [r4, #16]
 8005000:	b913      	cbnz	r3, 8005008 <_printf_float+0x194>
 8005002:	6822      	ldr	r2, [r4, #0]
 8005004:	07d0      	lsls	r0, r2, #31
 8005006:	d502      	bpl.n	800500e <_printf_float+0x19a>
 8005008:	3301      	adds	r3, #1
 800500a:	440b      	add	r3, r1
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	f04f 0a00 	mov.w	sl, #0
 8005012:	65a1      	str	r1, [r4, #88]	; 0x58
 8005014:	e7df      	b.n	8004fd6 <_printf_float+0x162>
 8005016:	b913      	cbnz	r3, 800501e <_printf_float+0x1aa>
 8005018:	6822      	ldr	r2, [r4, #0]
 800501a:	07d2      	lsls	r2, r2, #31
 800501c:	d501      	bpl.n	8005022 <_printf_float+0x1ae>
 800501e:	3302      	adds	r3, #2
 8005020:	e7f4      	b.n	800500c <_printf_float+0x198>
 8005022:	2301      	movs	r3, #1
 8005024:	e7f2      	b.n	800500c <_printf_float+0x198>
 8005026:	f04f 0967 	mov.w	r9, #103	; 0x67
 800502a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800502c:	4299      	cmp	r1, r3
 800502e:	db05      	blt.n	800503c <_printf_float+0x1c8>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	6121      	str	r1, [r4, #16]
 8005034:	07d8      	lsls	r0, r3, #31
 8005036:	d5ea      	bpl.n	800500e <_printf_float+0x19a>
 8005038:	1c4b      	adds	r3, r1, #1
 800503a:	e7e7      	b.n	800500c <_printf_float+0x198>
 800503c:	2900      	cmp	r1, #0
 800503e:	bfcc      	ite	gt
 8005040:	2201      	movgt	r2, #1
 8005042:	f1c1 0202 	rsble	r2, r1, #2
 8005046:	4413      	add	r3, r2
 8005048:	e7e0      	b.n	800500c <_printf_float+0x198>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	055a      	lsls	r2, r3, #21
 800504e:	d407      	bmi.n	8005060 <_printf_float+0x1ec>
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	4642      	mov	r2, r8
 8005054:	4631      	mov	r1, r6
 8005056:	4628      	mov	r0, r5
 8005058:	47b8      	blx	r7
 800505a:	3001      	adds	r0, #1
 800505c:	d12b      	bne.n	80050b6 <_printf_float+0x242>
 800505e:	e764      	b.n	8004f2a <_printf_float+0xb6>
 8005060:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005064:	f240 80dd 	bls.w	8005222 <_printf_float+0x3ae>
 8005068:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800506c:	2200      	movs	r2, #0
 800506e:	2300      	movs	r3, #0
 8005070:	f7fb fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8005074:	2800      	cmp	r0, #0
 8005076:	d033      	beq.n	80050e0 <_printf_float+0x26c>
 8005078:	2301      	movs	r3, #1
 800507a:	4631      	mov	r1, r6
 800507c:	4628      	mov	r0, r5
 800507e:	4a35      	ldr	r2, [pc, #212]	; (8005154 <_printf_float+0x2e0>)
 8005080:	47b8      	blx	r7
 8005082:	3001      	adds	r0, #1
 8005084:	f43f af51 	beq.w	8004f2a <_printf_float+0xb6>
 8005088:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800508c:	429a      	cmp	r2, r3
 800508e:	db02      	blt.n	8005096 <_printf_float+0x222>
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	07d8      	lsls	r0, r3, #31
 8005094:	d50f      	bpl.n	80050b6 <_printf_float+0x242>
 8005096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f af42 	beq.w	8004f2a <_printf_float+0xb6>
 80050a6:	f04f 0800 	mov.w	r8, #0
 80050aa:	f104 091a 	add.w	r9, r4, #26
 80050ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050b0:	3b01      	subs	r3, #1
 80050b2:	4543      	cmp	r3, r8
 80050b4:	dc09      	bgt.n	80050ca <_printf_float+0x256>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	079b      	lsls	r3, r3, #30
 80050ba:	f100 8102 	bmi.w	80052c2 <_printf_float+0x44e>
 80050be:	68e0      	ldr	r0, [r4, #12]
 80050c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050c2:	4298      	cmp	r0, r3
 80050c4:	bfb8      	it	lt
 80050c6:	4618      	movlt	r0, r3
 80050c8:	e731      	b.n	8004f2e <_printf_float+0xba>
 80050ca:	2301      	movs	r3, #1
 80050cc:	464a      	mov	r2, r9
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f af28 	beq.w	8004f2a <_printf_float+0xb6>
 80050da:	f108 0801 	add.w	r8, r8, #1
 80050de:	e7e6      	b.n	80050ae <_printf_float+0x23a>
 80050e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	dc38      	bgt.n	8005158 <_printf_float+0x2e4>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4631      	mov	r1, r6
 80050ea:	4628      	mov	r0, r5
 80050ec:	4a19      	ldr	r2, [pc, #100]	; (8005154 <_printf_float+0x2e0>)
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	f43f af1a 	beq.w	8004f2a <_printf_float+0xb6>
 80050f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050fa:	4313      	orrs	r3, r2
 80050fc:	d102      	bne.n	8005104 <_printf_float+0x290>
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	07d9      	lsls	r1, r3, #31
 8005102:	d5d8      	bpl.n	80050b6 <_printf_float+0x242>
 8005104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005108:	4631      	mov	r1, r6
 800510a:	4628      	mov	r0, r5
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f af0b 	beq.w	8004f2a <_printf_float+0xb6>
 8005114:	f04f 0900 	mov.w	r9, #0
 8005118:	f104 0a1a 	add.w	sl, r4, #26
 800511c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511e:	425b      	negs	r3, r3
 8005120:	454b      	cmp	r3, r9
 8005122:	dc01      	bgt.n	8005128 <_printf_float+0x2b4>
 8005124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005126:	e794      	b.n	8005052 <_printf_float+0x1de>
 8005128:	2301      	movs	r3, #1
 800512a:	4652      	mov	r2, sl
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f aef9 	beq.w	8004f2a <_printf_float+0xb6>
 8005138:	f109 0901 	add.w	r9, r9, #1
 800513c:	e7ee      	b.n	800511c <_printf_float+0x2a8>
 800513e:	bf00      	nop
 8005140:	7fefffff 	.word	0x7fefffff
 8005144:	08007be0 	.word	0x08007be0
 8005148:	08007be4 	.word	0x08007be4
 800514c:	08007bec 	.word	0x08007bec
 8005150:	08007be8 	.word	0x08007be8
 8005154:	08007bf0 	.word	0x08007bf0
 8005158:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800515a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800515c:	429a      	cmp	r2, r3
 800515e:	bfa8      	it	ge
 8005160:	461a      	movge	r2, r3
 8005162:	2a00      	cmp	r2, #0
 8005164:	4691      	mov	r9, r2
 8005166:	dc37      	bgt.n	80051d8 <_printf_float+0x364>
 8005168:	f04f 0b00 	mov.w	fp, #0
 800516c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005170:	f104 021a 	add.w	r2, r4, #26
 8005174:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005178:	ebaa 0309 	sub.w	r3, sl, r9
 800517c:	455b      	cmp	r3, fp
 800517e:	dc33      	bgt.n	80051e8 <_printf_float+0x374>
 8005180:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005184:	429a      	cmp	r2, r3
 8005186:	db3b      	blt.n	8005200 <_printf_float+0x38c>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	07da      	lsls	r2, r3, #31
 800518c:	d438      	bmi.n	8005200 <_printf_float+0x38c>
 800518e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005190:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005192:	eba3 020a 	sub.w	r2, r3, sl
 8005196:	eba3 0901 	sub.w	r9, r3, r1
 800519a:	4591      	cmp	r9, r2
 800519c:	bfa8      	it	ge
 800519e:	4691      	movge	r9, r2
 80051a0:	f1b9 0f00 	cmp.w	r9, #0
 80051a4:	dc34      	bgt.n	8005210 <_printf_float+0x39c>
 80051a6:	f04f 0800 	mov.w	r8, #0
 80051aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ae:	f104 0a1a 	add.w	sl, r4, #26
 80051b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	eba3 0309 	sub.w	r3, r3, r9
 80051bc:	4543      	cmp	r3, r8
 80051be:	f77f af7a 	ble.w	80050b6 <_printf_float+0x242>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4652      	mov	r2, sl
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f aeac 	beq.w	8004f2a <_printf_float+0xb6>
 80051d2:	f108 0801 	add.w	r8, r8, #1
 80051d6:	e7ec      	b.n	80051b2 <_printf_float+0x33e>
 80051d8:	4613      	mov	r3, r2
 80051da:	4631      	mov	r1, r6
 80051dc:	4642      	mov	r2, r8
 80051de:	4628      	mov	r0, r5
 80051e0:	47b8      	blx	r7
 80051e2:	3001      	adds	r0, #1
 80051e4:	d1c0      	bne.n	8005168 <_printf_float+0x2f4>
 80051e6:	e6a0      	b.n	8004f2a <_printf_float+0xb6>
 80051e8:	2301      	movs	r3, #1
 80051ea:	4631      	mov	r1, r6
 80051ec:	4628      	mov	r0, r5
 80051ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80051f0:	47b8      	blx	r7
 80051f2:	3001      	adds	r0, #1
 80051f4:	f43f ae99 	beq.w	8004f2a <_printf_float+0xb6>
 80051f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051fa:	f10b 0b01 	add.w	fp, fp, #1
 80051fe:	e7b9      	b.n	8005174 <_printf_float+0x300>
 8005200:	4631      	mov	r1, r6
 8005202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005206:	4628      	mov	r0, r5
 8005208:	47b8      	blx	r7
 800520a:	3001      	adds	r0, #1
 800520c:	d1bf      	bne.n	800518e <_printf_float+0x31a>
 800520e:	e68c      	b.n	8004f2a <_printf_float+0xb6>
 8005210:	464b      	mov	r3, r9
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	eb08 020a 	add.w	r2, r8, sl
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	d1c2      	bne.n	80051a6 <_printf_float+0x332>
 8005220:	e683      	b.n	8004f2a <_printf_float+0xb6>
 8005222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005224:	2a01      	cmp	r2, #1
 8005226:	dc01      	bgt.n	800522c <_printf_float+0x3b8>
 8005228:	07db      	lsls	r3, r3, #31
 800522a:	d537      	bpl.n	800529c <_printf_float+0x428>
 800522c:	2301      	movs	r3, #1
 800522e:	4642      	mov	r2, r8
 8005230:	4631      	mov	r1, r6
 8005232:	4628      	mov	r0, r5
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f ae77 	beq.w	8004f2a <_printf_float+0xb6>
 800523c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005240:	4631      	mov	r1, r6
 8005242:	4628      	mov	r0, r5
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	f43f ae6f 	beq.w	8004f2a <_printf_float+0xb6>
 800524c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005250:	2200      	movs	r2, #0
 8005252:	2300      	movs	r3, #0
 8005254:	f7fb fba8 	bl	80009a8 <__aeabi_dcmpeq>
 8005258:	b9d8      	cbnz	r0, 8005292 <_printf_float+0x41e>
 800525a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800525c:	f108 0201 	add.w	r2, r8, #1
 8005260:	3b01      	subs	r3, #1
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	d10e      	bne.n	800528a <_printf_float+0x416>
 800526c:	e65d      	b.n	8004f2a <_printf_float+0xb6>
 800526e:	2301      	movs	r3, #1
 8005270:	464a      	mov	r2, r9
 8005272:	4631      	mov	r1, r6
 8005274:	4628      	mov	r0, r5
 8005276:	47b8      	blx	r7
 8005278:	3001      	adds	r0, #1
 800527a:	f43f ae56 	beq.w	8004f2a <_printf_float+0xb6>
 800527e:	f108 0801 	add.w	r8, r8, #1
 8005282:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005284:	3b01      	subs	r3, #1
 8005286:	4543      	cmp	r3, r8
 8005288:	dcf1      	bgt.n	800526e <_printf_float+0x3fa>
 800528a:	4653      	mov	r3, sl
 800528c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005290:	e6e0      	b.n	8005054 <_printf_float+0x1e0>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	f104 091a 	add.w	r9, r4, #26
 800529a:	e7f2      	b.n	8005282 <_printf_float+0x40e>
 800529c:	2301      	movs	r3, #1
 800529e:	4642      	mov	r2, r8
 80052a0:	e7df      	b.n	8005262 <_printf_float+0x3ee>
 80052a2:	2301      	movs	r3, #1
 80052a4:	464a      	mov	r2, r9
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f ae3c 	beq.w	8004f2a <_printf_float+0xb6>
 80052b2:	f108 0801 	add.w	r8, r8, #1
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80052ba:	1a5b      	subs	r3, r3, r1
 80052bc:	4543      	cmp	r3, r8
 80052be:	dcf0      	bgt.n	80052a2 <_printf_float+0x42e>
 80052c0:	e6fd      	b.n	80050be <_printf_float+0x24a>
 80052c2:	f04f 0800 	mov.w	r8, #0
 80052c6:	f104 0919 	add.w	r9, r4, #25
 80052ca:	e7f4      	b.n	80052b6 <_printf_float+0x442>

080052cc <_printf_common>:
 80052cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	4616      	mov	r6, r2
 80052d2:	4699      	mov	r9, r3
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	690b      	ldr	r3, [r1, #16]
 80052d8:	4607      	mov	r7, r0
 80052da:	4293      	cmp	r3, r2
 80052dc:	bfb8      	it	lt
 80052de:	4613      	movlt	r3, r2
 80052e0:	6033      	str	r3, [r6, #0]
 80052e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e6:	460c      	mov	r4, r1
 80052e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052ec:	b10a      	cbz	r2, 80052f2 <_printf_common+0x26>
 80052ee:	3301      	adds	r3, #1
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0699      	lsls	r1, r3, #26
 80052f6:	bf42      	ittt	mi
 80052f8:	6833      	ldrmi	r3, [r6, #0]
 80052fa:	3302      	addmi	r3, #2
 80052fc:	6033      	strmi	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	f015 0506 	ands.w	r5, r5, #6
 8005304:	d106      	bne.n	8005314 <_printf_common+0x48>
 8005306:	f104 0a19 	add.w	sl, r4, #25
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc28      	bgt.n	8005366 <_printf_common+0x9a>
 8005314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005318:	1e13      	subs	r3, r2, #0
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	bf18      	it	ne
 800531e:	2301      	movne	r3, #1
 8005320:	0692      	lsls	r2, r2, #26
 8005322:	d42d      	bmi.n	8005380 <_printf_common+0xb4>
 8005324:	4649      	mov	r1, r9
 8005326:	4638      	mov	r0, r7
 8005328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d020      	beq.n	8005374 <_printf_common+0xa8>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	68e5      	ldr	r5, [r4, #12]
 8005336:	f003 0306 	and.w	r3, r3, #6
 800533a:	2b04      	cmp	r3, #4
 800533c:	bf18      	it	ne
 800533e:	2500      	movne	r5, #0
 8005340:	6832      	ldr	r2, [r6, #0]
 8005342:	f04f 0600 	mov.w	r6, #0
 8005346:	68a3      	ldr	r3, [r4, #8]
 8005348:	bf08      	it	eq
 800534a:	1aad      	subeq	r5, r5, r2
 800534c:	6922      	ldr	r2, [r4, #16]
 800534e:	bf08      	it	eq
 8005350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005354:	4293      	cmp	r3, r2
 8005356:	bfc4      	itt	gt
 8005358:	1a9b      	subgt	r3, r3, r2
 800535a:	18ed      	addgt	r5, r5, r3
 800535c:	341a      	adds	r4, #26
 800535e:	42b5      	cmp	r5, r6
 8005360:	d11a      	bne.n	8005398 <_printf_common+0xcc>
 8005362:	2000      	movs	r0, #0
 8005364:	e008      	b.n	8005378 <_printf_common+0xac>
 8005366:	2301      	movs	r3, #1
 8005368:	4652      	mov	r2, sl
 800536a:	4649      	mov	r1, r9
 800536c:	4638      	mov	r0, r7
 800536e:	47c0      	blx	r8
 8005370:	3001      	adds	r0, #1
 8005372:	d103      	bne.n	800537c <_printf_common+0xb0>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537c:	3501      	adds	r5, #1
 800537e:	e7c4      	b.n	800530a <_printf_common+0x3e>
 8005380:	2030      	movs	r0, #48	; 0x30
 8005382:	18e1      	adds	r1, r4, r3
 8005384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538e:	4422      	add	r2, r4
 8005390:	3302      	adds	r3, #2
 8005392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005396:	e7c5      	b.n	8005324 <_printf_common+0x58>
 8005398:	2301      	movs	r3, #1
 800539a:	4622      	mov	r2, r4
 800539c:	4649      	mov	r1, r9
 800539e:	4638      	mov	r0, r7
 80053a0:	47c0      	blx	r8
 80053a2:	3001      	adds	r0, #1
 80053a4:	d0e6      	beq.n	8005374 <_printf_common+0xa8>
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7d9      	b.n	800535e <_printf_common+0x92>
	...

080053ac <_printf_i>:
 80053ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	7e0f      	ldrb	r7, [r1, #24]
 80053b2:	4691      	mov	r9, r2
 80053b4:	2f78      	cmp	r7, #120	; 0x78
 80053b6:	4680      	mov	r8, r0
 80053b8:	460c      	mov	r4, r1
 80053ba:	469a      	mov	sl, r3
 80053bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053c2:	d807      	bhi.n	80053d4 <_printf_i+0x28>
 80053c4:	2f62      	cmp	r7, #98	; 0x62
 80053c6:	d80a      	bhi.n	80053de <_printf_i+0x32>
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	f000 80d9 	beq.w	8005580 <_printf_i+0x1d4>
 80053ce:	2f58      	cmp	r7, #88	; 0x58
 80053d0:	f000 80a4 	beq.w	800551c <_printf_i+0x170>
 80053d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053dc:	e03a      	b.n	8005454 <_printf_i+0xa8>
 80053de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053e2:	2b15      	cmp	r3, #21
 80053e4:	d8f6      	bhi.n	80053d4 <_printf_i+0x28>
 80053e6:	a101      	add	r1, pc, #4	; (adr r1, 80053ec <_printf_i+0x40>)
 80053e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053ec:	08005445 	.word	0x08005445
 80053f0:	08005459 	.word	0x08005459
 80053f4:	080053d5 	.word	0x080053d5
 80053f8:	080053d5 	.word	0x080053d5
 80053fc:	080053d5 	.word	0x080053d5
 8005400:	080053d5 	.word	0x080053d5
 8005404:	08005459 	.word	0x08005459
 8005408:	080053d5 	.word	0x080053d5
 800540c:	080053d5 	.word	0x080053d5
 8005410:	080053d5 	.word	0x080053d5
 8005414:	080053d5 	.word	0x080053d5
 8005418:	08005567 	.word	0x08005567
 800541c:	08005489 	.word	0x08005489
 8005420:	08005549 	.word	0x08005549
 8005424:	080053d5 	.word	0x080053d5
 8005428:	080053d5 	.word	0x080053d5
 800542c:	08005589 	.word	0x08005589
 8005430:	080053d5 	.word	0x080053d5
 8005434:	08005489 	.word	0x08005489
 8005438:	080053d5 	.word	0x080053d5
 800543c:	080053d5 	.word	0x080053d5
 8005440:	08005551 	.word	0x08005551
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	1d1a      	adds	r2, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	602a      	str	r2, [r5, #0]
 800544c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005454:	2301      	movs	r3, #1
 8005456:	e0a4      	b.n	80055a2 <_printf_i+0x1f6>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	6829      	ldr	r1, [r5, #0]
 800545c:	0606      	lsls	r6, r0, #24
 800545e:	f101 0304 	add.w	r3, r1, #4
 8005462:	d50a      	bpl.n	800547a <_printf_i+0xce>
 8005464:	680e      	ldr	r6, [r1, #0]
 8005466:	602b      	str	r3, [r5, #0]
 8005468:	2e00      	cmp	r6, #0
 800546a:	da03      	bge.n	8005474 <_printf_i+0xc8>
 800546c:	232d      	movs	r3, #45	; 0x2d
 800546e:	4276      	negs	r6, r6
 8005470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005474:	230a      	movs	r3, #10
 8005476:	485e      	ldr	r0, [pc, #376]	; (80055f0 <_printf_i+0x244>)
 8005478:	e019      	b.n	80054ae <_printf_i+0x102>
 800547a:	680e      	ldr	r6, [r1, #0]
 800547c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	bf18      	it	ne
 8005484:	b236      	sxthne	r6, r6
 8005486:	e7ef      	b.n	8005468 <_printf_i+0xbc>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	6820      	ldr	r0, [r4, #0]
 800548c:	1d19      	adds	r1, r3, #4
 800548e:	6029      	str	r1, [r5, #0]
 8005490:	0601      	lsls	r1, r0, #24
 8005492:	d501      	bpl.n	8005498 <_printf_i+0xec>
 8005494:	681e      	ldr	r6, [r3, #0]
 8005496:	e002      	b.n	800549e <_printf_i+0xf2>
 8005498:	0646      	lsls	r6, r0, #25
 800549a:	d5fb      	bpl.n	8005494 <_printf_i+0xe8>
 800549c:	881e      	ldrh	r6, [r3, #0]
 800549e:	2f6f      	cmp	r7, #111	; 0x6f
 80054a0:	bf0c      	ite	eq
 80054a2:	2308      	moveq	r3, #8
 80054a4:	230a      	movne	r3, #10
 80054a6:	4852      	ldr	r0, [pc, #328]	; (80055f0 <_printf_i+0x244>)
 80054a8:	2100      	movs	r1, #0
 80054aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ae:	6865      	ldr	r5, [r4, #4]
 80054b0:	2d00      	cmp	r5, #0
 80054b2:	bfa8      	it	ge
 80054b4:	6821      	ldrge	r1, [r4, #0]
 80054b6:	60a5      	str	r5, [r4, #8]
 80054b8:	bfa4      	itt	ge
 80054ba:	f021 0104 	bicge.w	r1, r1, #4
 80054be:	6021      	strge	r1, [r4, #0]
 80054c0:	b90e      	cbnz	r6, 80054c6 <_printf_i+0x11a>
 80054c2:	2d00      	cmp	r5, #0
 80054c4:	d04d      	beq.n	8005562 <_printf_i+0x1b6>
 80054c6:	4615      	mov	r5, r2
 80054c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80054cc:	fb03 6711 	mls	r7, r3, r1, r6
 80054d0:	5dc7      	ldrb	r7, [r0, r7]
 80054d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054d6:	4637      	mov	r7, r6
 80054d8:	42bb      	cmp	r3, r7
 80054da:	460e      	mov	r6, r1
 80054dc:	d9f4      	bls.n	80054c8 <_printf_i+0x11c>
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d10b      	bne.n	80054fa <_printf_i+0x14e>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	07de      	lsls	r6, r3, #31
 80054e6:	d508      	bpl.n	80054fa <_printf_i+0x14e>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	6861      	ldr	r1, [r4, #4]
 80054ec:	4299      	cmp	r1, r3
 80054ee:	bfde      	ittt	le
 80054f0:	2330      	movle	r3, #48	; 0x30
 80054f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054fa:	1b52      	subs	r2, r2, r5
 80054fc:	6122      	str	r2, [r4, #16]
 80054fe:	464b      	mov	r3, r9
 8005500:	4621      	mov	r1, r4
 8005502:	4640      	mov	r0, r8
 8005504:	f8cd a000 	str.w	sl, [sp]
 8005508:	aa03      	add	r2, sp, #12
 800550a:	f7ff fedf 	bl	80052cc <_printf_common>
 800550e:	3001      	adds	r0, #1
 8005510:	d14c      	bne.n	80055ac <_printf_i+0x200>
 8005512:	f04f 30ff 	mov.w	r0, #4294967295
 8005516:	b004      	add	sp, #16
 8005518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551c:	4834      	ldr	r0, [pc, #208]	; (80055f0 <_printf_i+0x244>)
 800551e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005522:	6829      	ldr	r1, [r5, #0]
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	f851 6b04 	ldr.w	r6, [r1], #4
 800552a:	6029      	str	r1, [r5, #0]
 800552c:	061d      	lsls	r5, r3, #24
 800552e:	d514      	bpl.n	800555a <_printf_i+0x1ae>
 8005530:	07df      	lsls	r7, r3, #31
 8005532:	bf44      	itt	mi
 8005534:	f043 0320 	orrmi.w	r3, r3, #32
 8005538:	6023      	strmi	r3, [r4, #0]
 800553a:	b91e      	cbnz	r6, 8005544 <_printf_i+0x198>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	f023 0320 	bic.w	r3, r3, #32
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	2310      	movs	r3, #16
 8005546:	e7af      	b.n	80054a8 <_printf_i+0xfc>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f043 0320 	orr.w	r3, r3, #32
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	2378      	movs	r3, #120	; 0x78
 8005552:	4828      	ldr	r0, [pc, #160]	; (80055f4 <_printf_i+0x248>)
 8005554:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005558:	e7e3      	b.n	8005522 <_printf_i+0x176>
 800555a:	0659      	lsls	r1, r3, #25
 800555c:	bf48      	it	mi
 800555e:	b2b6      	uxthmi	r6, r6
 8005560:	e7e6      	b.n	8005530 <_printf_i+0x184>
 8005562:	4615      	mov	r5, r2
 8005564:	e7bb      	b.n	80054de <_printf_i+0x132>
 8005566:	682b      	ldr	r3, [r5, #0]
 8005568:	6826      	ldr	r6, [r4, #0]
 800556a:	1d18      	adds	r0, r3, #4
 800556c:	6961      	ldr	r1, [r4, #20]
 800556e:	6028      	str	r0, [r5, #0]
 8005570:	0635      	lsls	r5, r6, #24
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	d501      	bpl.n	800557a <_printf_i+0x1ce>
 8005576:	6019      	str	r1, [r3, #0]
 8005578:	e002      	b.n	8005580 <_printf_i+0x1d4>
 800557a:	0670      	lsls	r0, r6, #25
 800557c:	d5fb      	bpl.n	8005576 <_printf_i+0x1ca>
 800557e:	8019      	strh	r1, [r3, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	4615      	mov	r5, r2
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	e7ba      	b.n	80054fe <_printf_i+0x152>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	2100      	movs	r1, #0
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	602a      	str	r2, [r5, #0]
 8005590:	681d      	ldr	r5, [r3, #0]
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	4628      	mov	r0, r5
 8005596:	f000 fed5 	bl	8006344 <memchr>
 800559a:	b108      	cbz	r0, 80055a0 <_printf_i+0x1f4>
 800559c:	1b40      	subs	r0, r0, r5
 800559e:	6060      	str	r0, [r4, #4]
 80055a0:	6863      	ldr	r3, [r4, #4]
 80055a2:	6123      	str	r3, [r4, #16]
 80055a4:	2300      	movs	r3, #0
 80055a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055aa:	e7a8      	b.n	80054fe <_printf_i+0x152>
 80055ac:	462a      	mov	r2, r5
 80055ae:	4649      	mov	r1, r9
 80055b0:	4640      	mov	r0, r8
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	47d0      	blx	sl
 80055b6:	3001      	adds	r0, #1
 80055b8:	d0ab      	beq.n	8005512 <_printf_i+0x166>
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	079b      	lsls	r3, r3, #30
 80055be:	d413      	bmi.n	80055e8 <_printf_i+0x23c>
 80055c0:	68e0      	ldr	r0, [r4, #12]
 80055c2:	9b03      	ldr	r3, [sp, #12]
 80055c4:	4298      	cmp	r0, r3
 80055c6:	bfb8      	it	lt
 80055c8:	4618      	movlt	r0, r3
 80055ca:	e7a4      	b.n	8005516 <_printf_i+0x16a>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4632      	mov	r2, r6
 80055d0:	4649      	mov	r1, r9
 80055d2:	4640      	mov	r0, r8
 80055d4:	47d0      	blx	sl
 80055d6:	3001      	adds	r0, #1
 80055d8:	d09b      	beq.n	8005512 <_printf_i+0x166>
 80055da:	3501      	adds	r5, #1
 80055dc:	68e3      	ldr	r3, [r4, #12]
 80055de:	9903      	ldr	r1, [sp, #12]
 80055e0:	1a5b      	subs	r3, r3, r1
 80055e2:	42ab      	cmp	r3, r5
 80055e4:	dcf2      	bgt.n	80055cc <_printf_i+0x220>
 80055e6:	e7eb      	b.n	80055c0 <_printf_i+0x214>
 80055e8:	2500      	movs	r5, #0
 80055ea:	f104 0619 	add.w	r6, r4, #25
 80055ee:	e7f5      	b.n	80055dc <_printf_i+0x230>
 80055f0:	08007bf2 	.word	0x08007bf2
 80055f4:	08007c03 	.word	0x08007c03

080055f8 <siprintf>:
 80055f8:	b40e      	push	{r1, r2, r3}
 80055fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055fe:	b500      	push	{lr}
 8005600:	b09c      	sub	sp, #112	; 0x70
 8005602:	ab1d      	add	r3, sp, #116	; 0x74
 8005604:	9002      	str	r0, [sp, #8]
 8005606:	9006      	str	r0, [sp, #24]
 8005608:	9107      	str	r1, [sp, #28]
 800560a:	9104      	str	r1, [sp, #16]
 800560c:	4808      	ldr	r0, [pc, #32]	; (8005630 <siprintf+0x38>)
 800560e:	4909      	ldr	r1, [pc, #36]	; (8005634 <siprintf+0x3c>)
 8005610:	f853 2b04 	ldr.w	r2, [r3], #4
 8005614:	9105      	str	r1, [sp, #20]
 8005616:	6800      	ldr	r0, [r0, #0]
 8005618:	a902      	add	r1, sp, #8
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	f001 fb7c 	bl	8006d18 <_svfiprintf_r>
 8005620:	2200      	movs	r2, #0
 8005622:	9b02      	ldr	r3, [sp, #8]
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	b01c      	add	sp, #112	; 0x70
 8005628:	f85d eb04 	ldr.w	lr, [sp], #4
 800562c:	b003      	add	sp, #12
 800562e:	4770      	bx	lr
 8005630:	20000010 	.word	0x20000010
 8005634:	ffff0208 	.word	0xffff0208

08005638 <quorem>:
 8005638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800563c:	6903      	ldr	r3, [r0, #16]
 800563e:	690c      	ldr	r4, [r1, #16]
 8005640:	4607      	mov	r7, r0
 8005642:	42a3      	cmp	r3, r4
 8005644:	f2c0 8082 	blt.w	800574c <quorem+0x114>
 8005648:	3c01      	subs	r4, #1
 800564a:	f100 0514 	add.w	r5, r0, #20
 800564e:	f101 0814 	add.w	r8, r1, #20
 8005652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005656:	9301      	str	r3, [sp, #4]
 8005658:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800565c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005660:	3301      	adds	r3, #1
 8005662:	429a      	cmp	r2, r3
 8005664:	fbb2 f6f3 	udiv	r6, r2, r3
 8005668:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800566c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005670:	d331      	bcc.n	80056d6 <quorem+0x9e>
 8005672:	f04f 0e00 	mov.w	lr, #0
 8005676:	4640      	mov	r0, r8
 8005678:	46ac      	mov	ip, r5
 800567a:	46f2      	mov	sl, lr
 800567c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005680:	b293      	uxth	r3, r2
 8005682:	fb06 e303 	mla	r3, r6, r3, lr
 8005686:	0c12      	lsrs	r2, r2, #16
 8005688:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800568c:	b29b      	uxth	r3, r3
 800568e:	fb06 e202 	mla	r2, r6, r2, lr
 8005692:	ebaa 0303 	sub.w	r3, sl, r3
 8005696:	f8dc a000 	ldr.w	sl, [ip]
 800569a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800569e:	fa1f fa8a 	uxth.w	sl, sl
 80056a2:	4453      	add	r3, sl
 80056a4:	f8dc a000 	ldr.w	sl, [ip]
 80056a8:	b292      	uxth	r2, r2
 80056aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80056ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b8:	4581      	cmp	r9, r0
 80056ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056be:	f84c 3b04 	str.w	r3, [ip], #4
 80056c2:	d2db      	bcs.n	800567c <quorem+0x44>
 80056c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80056c8:	b92b      	cbnz	r3, 80056d6 <quorem+0x9e>
 80056ca:	9b01      	ldr	r3, [sp, #4]
 80056cc:	3b04      	subs	r3, #4
 80056ce:	429d      	cmp	r5, r3
 80056d0:	461a      	mov	r2, r3
 80056d2:	d32f      	bcc.n	8005734 <quorem+0xfc>
 80056d4:	613c      	str	r4, [r7, #16]
 80056d6:	4638      	mov	r0, r7
 80056d8:	f001 f8ce 	bl	8006878 <__mcmp>
 80056dc:	2800      	cmp	r0, #0
 80056de:	db25      	blt.n	800572c <quorem+0xf4>
 80056e0:	4628      	mov	r0, r5
 80056e2:	f04f 0c00 	mov.w	ip, #0
 80056e6:	3601      	adds	r6, #1
 80056e8:	f858 1b04 	ldr.w	r1, [r8], #4
 80056ec:	f8d0 e000 	ldr.w	lr, [r0]
 80056f0:	b28b      	uxth	r3, r1
 80056f2:	ebac 0303 	sub.w	r3, ip, r3
 80056f6:	fa1f f28e 	uxth.w	r2, lr
 80056fa:	4413      	add	r3, r2
 80056fc:	0c0a      	lsrs	r2, r1, #16
 80056fe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005702:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800570c:	45c1      	cmp	r9, r8
 800570e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005712:	f840 3b04 	str.w	r3, [r0], #4
 8005716:	d2e7      	bcs.n	80056e8 <quorem+0xb0>
 8005718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800571c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005720:	b922      	cbnz	r2, 800572c <quorem+0xf4>
 8005722:	3b04      	subs	r3, #4
 8005724:	429d      	cmp	r5, r3
 8005726:	461a      	mov	r2, r3
 8005728:	d30a      	bcc.n	8005740 <quorem+0x108>
 800572a:	613c      	str	r4, [r7, #16]
 800572c:	4630      	mov	r0, r6
 800572e:	b003      	add	sp, #12
 8005730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	3b04      	subs	r3, #4
 8005738:	2a00      	cmp	r2, #0
 800573a:	d1cb      	bne.n	80056d4 <quorem+0x9c>
 800573c:	3c01      	subs	r4, #1
 800573e:	e7c6      	b.n	80056ce <quorem+0x96>
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	3b04      	subs	r3, #4
 8005744:	2a00      	cmp	r2, #0
 8005746:	d1f0      	bne.n	800572a <quorem+0xf2>
 8005748:	3c01      	subs	r4, #1
 800574a:	e7eb      	b.n	8005724 <quorem+0xec>
 800574c:	2000      	movs	r0, #0
 800574e:	e7ee      	b.n	800572e <quorem+0xf6>

08005750 <_dtoa_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	4616      	mov	r6, r2
 8005756:	461f      	mov	r7, r3
 8005758:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800575a:	b099      	sub	sp, #100	; 0x64
 800575c:	4605      	mov	r5, r0
 800575e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005762:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005766:	b974      	cbnz	r4, 8005786 <_dtoa_r+0x36>
 8005768:	2010      	movs	r0, #16
 800576a:	f000 fde3 	bl	8006334 <malloc>
 800576e:	4602      	mov	r2, r0
 8005770:	6268      	str	r0, [r5, #36]	; 0x24
 8005772:	b920      	cbnz	r0, 800577e <_dtoa_r+0x2e>
 8005774:	21ea      	movs	r1, #234	; 0xea
 8005776:	4ba8      	ldr	r3, [pc, #672]	; (8005a18 <_dtoa_r+0x2c8>)
 8005778:	48a8      	ldr	r0, [pc, #672]	; (8005a1c <_dtoa_r+0x2cc>)
 800577a:	f001 fbdd 	bl	8006f38 <__assert_func>
 800577e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005782:	6004      	str	r4, [r0, #0]
 8005784:	60c4      	str	r4, [r0, #12]
 8005786:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	b151      	cbz	r1, 80057a2 <_dtoa_r+0x52>
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	2301      	movs	r3, #1
 8005790:	4093      	lsls	r3, r2
 8005792:	604a      	str	r2, [r1, #4]
 8005794:	608b      	str	r3, [r1, #8]
 8005796:	4628      	mov	r0, r5
 8005798:	f000 fe30 	bl	80063fc <_Bfree>
 800579c:	2200      	movs	r2, #0
 800579e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	1e3b      	subs	r3, r7, #0
 80057a4:	bfaf      	iteee	ge
 80057a6:	2300      	movge	r3, #0
 80057a8:	2201      	movlt	r2, #1
 80057aa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057ae:	9305      	strlt	r3, [sp, #20]
 80057b0:	bfa8      	it	ge
 80057b2:	f8c8 3000 	strge.w	r3, [r8]
 80057b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80057ba:	4b99      	ldr	r3, [pc, #612]	; (8005a20 <_dtoa_r+0x2d0>)
 80057bc:	bfb8      	it	lt
 80057be:	f8c8 2000 	strlt.w	r2, [r8]
 80057c2:	ea33 0309 	bics.w	r3, r3, r9
 80057c6:	d119      	bne.n	80057fc <_dtoa_r+0xac>
 80057c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80057cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057d4:	4333      	orrs	r3, r6
 80057d6:	f000 857f 	beq.w	80062d8 <_dtoa_r+0xb88>
 80057da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80057dc:	b953      	cbnz	r3, 80057f4 <_dtoa_r+0xa4>
 80057de:	4b91      	ldr	r3, [pc, #580]	; (8005a24 <_dtoa_r+0x2d4>)
 80057e0:	e022      	b.n	8005828 <_dtoa_r+0xd8>
 80057e2:	4b91      	ldr	r3, [pc, #580]	; (8005a28 <_dtoa_r+0x2d8>)
 80057e4:	9303      	str	r3, [sp, #12]
 80057e6:	3308      	adds	r3, #8
 80057e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	9803      	ldr	r0, [sp, #12]
 80057ee:	b019      	add	sp, #100	; 0x64
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	4b8b      	ldr	r3, [pc, #556]	; (8005a24 <_dtoa_r+0x2d4>)
 80057f6:	9303      	str	r3, [sp, #12]
 80057f8:	3303      	adds	r3, #3
 80057fa:	e7f5      	b.n	80057e8 <_dtoa_r+0x98>
 80057fc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005800:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005808:	2200      	movs	r2, #0
 800580a:	2300      	movs	r3, #0
 800580c:	f7fb f8cc 	bl	80009a8 <__aeabi_dcmpeq>
 8005810:	4680      	mov	r8, r0
 8005812:	b158      	cbz	r0, 800582c <_dtoa_r+0xdc>
 8005814:	2301      	movs	r3, #1
 8005816:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8558 	beq.w	80062d2 <_dtoa_r+0xb82>
 8005822:	4882      	ldr	r0, [pc, #520]	; (8005a2c <_dtoa_r+0x2dc>)
 8005824:	6018      	str	r0, [r3, #0]
 8005826:	1e43      	subs	r3, r0, #1
 8005828:	9303      	str	r3, [sp, #12]
 800582a:	e7df      	b.n	80057ec <_dtoa_r+0x9c>
 800582c:	ab16      	add	r3, sp, #88	; 0x58
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	ab17      	add	r3, sp, #92	; 0x5c
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	4628      	mov	r0, r5
 8005836:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800583a:	f001 f8c5 	bl	80069c8 <__d2b>
 800583e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005842:	4683      	mov	fp, r0
 8005844:	2c00      	cmp	r4, #0
 8005846:	d07f      	beq.n	8005948 <_dtoa_r+0x1f8>
 8005848:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800584c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005856:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800585a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800585e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005862:	2200      	movs	r2, #0
 8005864:	4b72      	ldr	r3, [pc, #456]	; (8005a30 <_dtoa_r+0x2e0>)
 8005866:	f7fa fc7f 	bl	8000168 <__aeabi_dsub>
 800586a:	a365      	add	r3, pc, #404	; (adr r3, 8005a00 <_dtoa_r+0x2b0>)
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fe32 	bl	80004d8 <__aeabi_dmul>
 8005874:	a364      	add	r3, pc, #400	; (adr r3, 8005a08 <_dtoa_r+0x2b8>)
 8005876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587a:	f7fa fc77 	bl	800016c <__adddf3>
 800587e:	4606      	mov	r6, r0
 8005880:	4620      	mov	r0, r4
 8005882:	460f      	mov	r7, r1
 8005884:	f7fa fdbe 	bl	8000404 <__aeabi_i2d>
 8005888:	a361      	add	r3, pc, #388	; (adr r3, 8005a10 <_dtoa_r+0x2c0>)
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	f7fa fe23 	bl	80004d8 <__aeabi_dmul>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4630      	mov	r0, r6
 8005898:	4639      	mov	r1, r7
 800589a:	f7fa fc67 	bl	800016c <__adddf3>
 800589e:	4606      	mov	r6, r0
 80058a0:	460f      	mov	r7, r1
 80058a2:	f7fb f8c9 	bl	8000a38 <__aeabi_d2iz>
 80058a6:	2200      	movs	r2, #0
 80058a8:	4682      	mov	sl, r0
 80058aa:	2300      	movs	r3, #0
 80058ac:	4630      	mov	r0, r6
 80058ae:	4639      	mov	r1, r7
 80058b0:	f7fb f884 	bl	80009bc <__aeabi_dcmplt>
 80058b4:	b148      	cbz	r0, 80058ca <_dtoa_r+0x17a>
 80058b6:	4650      	mov	r0, sl
 80058b8:	f7fa fda4 	bl	8000404 <__aeabi_i2d>
 80058bc:	4632      	mov	r2, r6
 80058be:	463b      	mov	r3, r7
 80058c0:	f7fb f872 	bl	80009a8 <__aeabi_dcmpeq>
 80058c4:	b908      	cbnz	r0, 80058ca <_dtoa_r+0x17a>
 80058c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ca:	f1ba 0f16 	cmp.w	sl, #22
 80058ce:	d858      	bhi.n	8005982 <_dtoa_r+0x232>
 80058d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058d4:	4b57      	ldr	r3, [pc, #348]	; (8005a34 <_dtoa_r+0x2e4>)
 80058d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f7fb f86d 	bl	80009bc <__aeabi_dcmplt>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d04f      	beq.n	8005986 <_dtoa_r+0x236>
 80058e6:	2300      	movs	r3, #0
 80058e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80058ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058f0:	1b1c      	subs	r4, r3, r4
 80058f2:	1e63      	subs	r3, r4, #1
 80058f4:	9309      	str	r3, [sp, #36]	; 0x24
 80058f6:	bf49      	itett	mi
 80058f8:	f1c4 0301 	rsbmi	r3, r4, #1
 80058fc:	2300      	movpl	r3, #0
 80058fe:	9306      	strmi	r3, [sp, #24]
 8005900:	2300      	movmi	r3, #0
 8005902:	bf54      	ite	pl
 8005904:	9306      	strpl	r3, [sp, #24]
 8005906:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005908:	f1ba 0f00 	cmp.w	sl, #0
 800590c:	db3d      	blt.n	800598a <_dtoa_r+0x23a>
 800590e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005910:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005914:	4453      	add	r3, sl
 8005916:	9309      	str	r3, [sp, #36]	; 0x24
 8005918:	2300      	movs	r3, #0
 800591a:	930a      	str	r3, [sp, #40]	; 0x28
 800591c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800591e:	2b09      	cmp	r3, #9
 8005920:	f200 808c 	bhi.w	8005a3c <_dtoa_r+0x2ec>
 8005924:	2b05      	cmp	r3, #5
 8005926:	bfc4      	itt	gt
 8005928:	3b04      	subgt	r3, #4
 800592a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800592c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800592e:	bfc8      	it	gt
 8005930:	2400      	movgt	r4, #0
 8005932:	f1a3 0302 	sub.w	r3, r3, #2
 8005936:	bfd8      	it	le
 8005938:	2401      	movle	r4, #1
 800593a:	2b03      	cmp	r3, #3
 800593c:	f200 808a 	bhi.w	8005a54 <_dtoa_r+0x304>
 8005940:	e8df f003 	tbb	[pc, r3]
 8005944:	5b4d4f2d 	.word	0x5b4d4f2d
 8005948:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800594c:	441c      	add	r4, r3
 800594e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005952:	2b20      	cmp	r3, #32
 8005954:	bfc3      	ittte	gt
 8005956:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800595a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800595e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005962:	f1c3 0320 	rsble	r3, r3, #32
 8005966:	bfc6      	itte	gt
 8005968:	fa26 f000 	lsrgt.w	r0, r6, r0
 800596c:	4318      	orrgt	r0, r3
 800596e:	fa06 f003 	lslle.w	r0, r6, r3
 8005972:	f7fa fd37 	bl	80003e4 <__aeabi_ui2d>
 8005976:	2301      	movs	r3, #1
 8005978:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800597c:	3c01      	subs	r4, #1
 800597e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005980:	e76f      	b.n	8005862 <_dtoa_r+0x112>
 8005982:	2301      	movs	r3, #1
 8005984:	e7b2      	b.n	80058ec <_dtoa_r+0x19c>
 8005986:	900f      	str	r0, [sp, #60]	; 0x3c
 8005988:	e7b1      	b.n	80058ee <_dtoa_r+0x19e>
 800598a:	9b06      	ldr	r3, [sp, #24]
 800598c:	eba3 030a 	sub.w	r3, r3, sl
 8005990:	9306      	str	r3, [sp, #24]
 8005992:	f1ca 0300 	rsb	r3, sl, #0
 8005996:	930a      	str	r3, [sp, #40]	; 0x28
 8005998:	2300      	movs	r3, #0
 800599a:	930e      	str	r3, [sp, #56]	; 0x38
 800599c:	e7be      	b.n	800591c <_dtoa_r+0x1cc>
 800599e:	2300      	movs	r3, #0
 80059a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80059a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dc58      	bgt.n	8005a5a <_dtoa_r+0x30a>
 80059a8:	f04f 0901 	mov.w	r9, #1
 80059ac:	464b      	mov	r3, r9
 80059ae:	f8cd 9020 	str.w	r9, [sp, #32]
 80059b2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80059b6:	2200      	movs	r2, #0
 80059b8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80059ba:	6042      	str	r2, [r0, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	f102 0614 	add.w	r6, r2, #20
 80059c2:	429e      	cmp	r6, r3
 80059c4:	6841      	ldr	r1, [r0, #4]
 80059c6:	d94e      	bls.n	8005a66 <_dtoa_r+0x316>
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 fcd7 	bl	800637c <_Balloc>
 80059ce:	9003      	str	r0, [sp, #12]
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d14c      	bne.n	8005a6e <_dtoa_r+0x31e>
 80059d4:	4602      	mov	r2, r0
 80059d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059da:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <_dtoa_r+0x2e8>)
 80059dc:	e6cc      	b.n	8005778 <_dtoa_r+0x28>
 80059de:	2301      	movs	r3, #1
 80059e0:	e7de      	b.n	80059a0 <_dtoa_r+0x250>
 80059e2:	2300      	movs	r3, #0
 80059e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80059e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059e8:	eb0a 0903 	add.w	r9, sl, r3
 80059ec:	f109 0301 	add.w	r3, r9, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	9308      	str	r3, [sp, #32]
 80059f4:	bfb8      	it	lt
 80059f6:	2301      	movlt	r3, #1
 80059f8:	e7dd      	b.n	80059b6 <_dtoa_r+0x266>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7f2      	b.n	80059e4 <_dtoa_r+0x294>
 80059fe:	bf00      	nop
 8005a00:	636f4361 	.word	0x636f4361
 8005a04:	3fd287a7 	.word	0x3fd287a7
 8005a08:	8b60c8b3 	.word	0x8b60c8b3
 8005a0c:	3fc68a28 	.word	0x3fc68a28
 8005a10:	509f79fb 	.word	0x509f79fb
 8005a14:	3fd34413 	.word	0x3fd34413
 8005a18:	08007c21 	.word	0x08007c21
 8005a1c:	08007c38 	.word	0x08007c38
 8005a20:	7ff00000 	.word	0x7ff00000
 8005a24:	08007c1d 	.word	0x08007c1d
 8005a28:	08007c14 	.word	0x08007c14
 8005a2c:	08007bf1 	.word	0x08007bf1
 8005a30:	3ff80000 	.word	0x3ff80000
 8005a34:	08007d28 	.word	0x08007d28
 8005a38:	08007c93 	.word	0x08007c93
 8005a3c:	2401      	movs	r4, #1
 8005a3e:	2300      	movs	r3, #0
 8005a40:	940b      	str	r4, [sp, #44]	; 0x2c
 8005a42:	9322      	str	r3, [sp, #136]	; 0x88
 8005a44:	f04f 39ff 	mov.w	r9, #4294967295
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2312      	movs	r3, #18
 8005a4c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a50:	9223      	str	r2, [sp, #140]	; 0x8c
 8005a52:	e7b0      	b.n	80059b6 <_dtoa_r+0x266>
 8005a54:	2301      	movs	r3, #1
 8005a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a58:	e7f4      	b.n	8005a44 <_dtoa_r+0x2f4>
 8005a5a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005a5e:	464b      	mov	r3, r9
 8005a60:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a64:	e7a7      	b.n	80059b6 <_dtoa_r+0x266>
 8005a66:	3101      	adds	r1, #1
 8005a68:	6041      	str	r1, [r0, #4]
 8005a6a:	0052      	lsls	r2, r2, #1
 8005a6c:	e7a7      	b.n	80059be <_dtoa_r+0x26e>
 8005a6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a70:	9a03      	ldr	r2, [sp, #12]
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	9b08      	ldr	r3, [sp, #32]
 8005a76:	2b0e      	cmp	r3, #14
 8005a78:	f200 80a8 	bhi.w	8005bcc <_dtoa_r+0x47c>
 8005a7c:	2c00      	cmp	r4, #0
 8005a7e:	f000 80a5 	beq.w	8005bcc <_dtoa_r+0x47c>
 8005a82:	f1ba 0f00 	cmp.w	sl, #0
 8005a86:	dd34      	ble.n	8005af2 <_dtoa_r+0x3a2>
 8005a88:	4a9a      	ldr	r2, [pc, #616]	; (8005cf4 <_dtoa_r+0x5a4>)
 8005a8a:	f00a 030f 	and.w	r3, sl, #15
 8005a8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a92:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a9e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005aa2:	d016      	beq.n	8005ad2 <_dtoa_r+0x382>
 8005aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005aa8:	4b93      	ldr	r3, [pc, #588]	; (8005cf8 <_dtoa_r+0x5a8>)
 8005aaa:	2703      	movs	r7, #3
 8005aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ab0:	f7fa fe3c 	bl	800072c <__aeabi_ddiv>
 8005ab4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab8:	f004 040f 	and.w	r4, r4, #15
 8005abc:	4e8e      	ldr	r6, [pc, #568]	; (8005cf8 <_dtoa_r+0x5a8>)
 8005abe:	b954      	cbnz	r4, 8005ad6 <_dtoa_r+0x386>
 8005ac0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ac8:	f7fa fe30 	bl	800072c <__aeabi_ddiv>
 8005acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ad0:	e029      	b.n	8005b26 <_dtoa_r+0x3d6>
 8005ad2:	2702      	movs	r7, #2
 8005ad4:	e7f2      	b.n	8005abc <_dtoa_r+0x36c>
 8005ad6:	07e1      	lsls	r1, r4, #31
 8005ad8:	d508      	bpl.n	8005aec <_dtoa_r+0x39c>
 8005ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ade:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ae2:	f7fa fcf9 	bl	80004d8 <__aeabi_dmul>
 8005ae6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005aea:	3701      	adds	r7, #1
 8005aec:	1064      	asrs	r4, r4, #1
 8005aee:	3608      	adds	r6, #8
 8005af0:	e7e5      	b.n	8005abe <_dtoa_r+0x36e>
 8005af2:	f000 80a5 	beq.w	8005c40 <_dtoa_r+0x4f0>
 8005af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005afa:	f1ca 0400 	rsb	r4, sl, #0
 8005afe:	4b7d      	ldr	r3, [pc, #500]	; (8005cf4 <_dtoa_r+0x5a4>)
 8005b00:	f004 020f 	and.w	r2, r4, #15
 8005b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fce4 	bl	80004d8 <__aeabi_dmul>
 8005b10:	2702      	movs	r7, #2
 8005b12:	2300      	movs	r3, #0
 8005b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b18:	4e77      	ldr	r6, [pc, #476]	; (8005cf8 <_dtoa_r+0x5a8>)
 8005b1a:	1124      	asrs	r4, r4, #4
 8005b1c:	2c00      	cmp	r4, #0
 8005b1e:	f040 8084 	bne.w	8005c2a <_dtoa_r+0x4da>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1d2      	bne.n	8005acc <_dtoa_r+0x37c>
 8005b26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 808b 	beq.w	8005c44 <_dtoa_r+0x4f4>
 8005b2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <_dtoa_r+0x5ac>)
 8005b3e:	f7fa ff3d 	bl	80009bc <__aeabi_dcmplt>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d07e      	beq.n	8005c44 <_dtoa_r+0x4f4>
 8005b46:	9b08      	ldr	r3, [sp, #32]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d07b      	beq.n	8005c44 <_dtoa_r+0x4f4>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	dd38      	ble.n	8005bc4 <_dtoa_r+0x474>
 8005b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b56:	2200      	movs	r2, #0
 8005b58:	4b69      	ldr	r3, [pc, #420]	; (8005d00 <_dtoa_r+0x5b0>)
 8005b5a:	f7fa fcbd 	bl	80004d8 <__aeabi_dmul>
 8005b5e:	464c      	mov	r4, r9
 8005b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b64:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005b68:	3701      	adds	r7, #1
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	f7fa fc4a 	bl	8000404 <__aeabi_i2d>
 8005b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b74:	f7fa fcb0 	bl	80004d8 <__aeabi_dmul>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4b62      	ldr	r3, [pc, #392]	; (8005d04 <_dtoa_r+0x5b4>)
 8005b7c:	f7fa faf6 	bl	800016c <__adddf3>
 8005b80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b88:	9611      	str	r6, [sp, #68]	; 0x44
 8005b8a:	2c00      	cmp	r4, #0
 8005b8c:	d15d      	bne.n	8005c4a <_dtoa_r+0x4fa>
 8005b8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b92:	2200      	movs	r2, #0
 8005b94:	4b5c      	ldr	r3, [pc, #368]	; (8005d08 <_dtoa_r+0x5b8>)
 8005b96:	f7fa fae7 	bl	8000168 <__aeabi_dsub>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ba2:	4633      	mov	r3, r6
 8005ba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ba6:	f7fa ff27 	bl	80009f8 <__aeabi_dcmpgt>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	f040 829c 	bne.w	80060e8 <_dtoa_r+0x998>
 8005bb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005bba:	f7fa feff 	bl	80009bc <__aeabi_dcmplt>
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	f040 8290 	bne.w	80060e4 <_dtoa_r+0x994>
 8005bc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005bc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005bcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f2c0 8152 	blt.w	8005e78 <_dtoa_r+0x728>
 8005bd4:	f1ba 0f0e 	cmp.w	sl, #14
 8005bd8:	f300 814e 	bgt.w	8005e78 <_dtoa_r+0x728>
 8005bdc:	4b45      	ldr	r3, [pc, #276]	; (8005cf4 <_dtoa_r+0x5a4>)
 8005bde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005be2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005be6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005bea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f280 80db 	bge.w	8005da8 <_dtoa_r+0x658>
 8005bf2:	9b08      	ldr	r3, [sp, #32]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f300 80d7 	bgt.w	8005da8 <_dtoa_r+0x658>
 8005bfa:	f040 8272 	bne.w	80060e2 <_dtoa_r+0x992>
 8005bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c02:	2200      	movs	r2, #0
 8005c04:	4b40      	ldr	r3, [pc, #256]	; (8005d08 <_dtoa_r+0x5b8>)
 8005c06:	f7fa fc67 	bl	80004d8 <__aeabi_dmul>
 8005c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c0e:	f7fa fee9 	bl	80009e4 <__aeabi_dcmpge>
 8005c12:	9c08      	ldr	r4, [sp, #32]
 8005c14:	4626      	mov	r6, r4
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f040 8248 	bne.w	80060ac <_dtoa_r+0x95c>
 8005c1c:	2331      	movs	r3, #49	; 0x31
 8005c1e:	9f03      	ldr	r7, [sp, #12]
 8005c20:	f10a 0a01 	add.w	sl, sl, #1
 8005c24:	f807 3b01 	strb.w	r3, [r7], #1
 8005c28:	e244      	b.n	80060b4 <_dtoa_r+0x964>
 8005c2a:	07e2      	lsls	r2, r4, #31
 8005c2c:	d505      	bpl.n	8005c3a <_dtoa_r+0x4ea>
 8005c2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c32:	f7fa fc51 	bl	80004d8 <__aeabi_dmul>
 8005c36:	2301      	movs	r3, #1
 8005c38:	3701      	adds	r7, #1
 8005c3a:	1064      	asrs	r4, r4, #1
 8005c3c:	3608      	adds	r6, #8
 8005c3e:	e76d      	b.n	8005b1c <_dtoa_r+0x3cc>
 8005c40:	2702      	movs	r7, #2
 8005c42:	e770      	b.n	8005b26 <_dtoa_r+0x3d6>
 8005c44:	46d0      	mov	r8, sl
 8005c46:	9c08      	ldr	r4, [sp, #32]
 8005c48:	e78f      	b.n	8005b6a <_dtoa_r+0x41a>
 8005c4a:	9903      	ldr	r1, [sp, #12]
 8005c4c:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <_dtoa_r+0x5a4>)
 8005c4e:	4421      	add	r1, r4
 8005c50:	9112      	str	r1, [sp, #72]	; 0x48
 8005c52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c54:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c58:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005c5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c60:	2900      	cmp	r1, #0
 8005c62:	d055      	beq.n	8005d10 <_dtoa_r+0x5c0>
 8005c64:	2000      	movs	r0, #0
 8005c66:	4929      	ldr	r1, [pc, #164]	; (8005d0c <_dtoa_r+0x5bc>)
 8005c68:	f7fa fd60 	bl	800072c <__aeabi_ddiv>
 8005c6c:	463b      	mov	r3, r7
 8005c6e:	4632      	mov	r2, r6
 8005c70:	f7fa fa7a 	bl	8000168 <__aeabi_dsub>
 8005c74:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c78:	9f03      	ldr	r7, [sp, #12]
 8005c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c7e:	f7fa fedb 	bl	8000a38 <__aeabi_d2iz>
 8005c82:	4604      	mov	r4, r0
 8005c84:	f7fa fbbe 	bl	8000404 <__aeabi_i2d>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c90:	f7fa fa6a 	bl	8000168 <__aeabi_dsub>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	3430      	adds	r4, #48	; 0x30
 8005c9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ca2:	f807 4b01 	strb.w	r4, [r7], #1
 8005ca6:	f7fa fe89 	bl	80009bc <__aeabi_dcmplt>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	d174      	bne.n	8005d98 <_dtoa_r+0x648>
 8005cae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cb2:	2000      	movs	r0, #0
 8005cb4:	4911      	ldr	r1, [pc, #68]	; (8005cfc <_dtoa_r+0x5ac>)
 8005cb6:	f7fa fa57 	bl	8000168 <__aeabi_dsub>
 8005cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cbe:	f7fa fe7d 	bl	80009bc <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	f040 80b7 	bne.w	8005e36 <_dtoa_r+0x6e6>
 8005cc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005cca:	429f      	cmp	r7, r3
 8005ccc:	f43f af7a 	beq.w	8005bc4 <_dtoa_r+0x474>
 8005cd0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	; (8005d00 <_dtoa_r+0x5b0>)
 8005cd8:	f7fa fbfe 	bl	80004d8 <__aeabi_dmul>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <_dtoa_r+0x5b0>)
 8005ce8:	f7fa fbf6 	bl	80004d8 <__aeabi_dmul>
 8005cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cf0:	e7c3      	b.n	8005c7a <_dtoa_r+0x52a>
 8005cf2:	bf00      	nop
 8005cf4:	08007d28 	.word	0x08007d28
 8005cf8:	08007d00 	.word	0x08007d00
 8005cfc:	3ff00000 	.word	0x3ff00000
 8005d00:	40240000 	.word	0x40240000
 8005d04:	401c0000 	.word	0x401c0000
 8005d08:	40140000 	.word	0x40140000
 8005d0c:	3fe00000 	.word	0x3fe00000
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fbe0 	bl	80004d8 <__aeabi_dmul>
 8005d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d1e:	9c03      	ldr	r4, [sp, #12]
 8005d20:	9314      	str	r3, [sp, #80]	; 0x50
 8005d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d26:	f7fa fe87 	bl	8000a38 <__aeabi_d2iz>
 8005d2a:	9015      	str	r0, [sp, #84]	; 0x54
 8005d2c:	f7fa fb6a 	bl	8000404 <__aeabi_i2d>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d38:	f7fa fa16 	bl	8000168 <__aeabi_dsub>
 8005d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d3e:	4606      	mov	r6, r0
 8005d40:	3330      	adds	r3, #48	; 0x30
 8005d42:	f804 3b01 	strb.w	r3, [r4], #1
 8005d46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d48:	460f      	mov	r7, r1
 8005d4a:	429c      	cmp	r4, r3
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	d124      	bne.n	8005d9c <_dtoa_r+0x64c>
 8005d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d56:	4bb0      	ldr	r3, [pc, #704]	; (8006018 <_dtoa_r+0x8c8>)
 8005d58:	f7fa fa08 	bl	800016c <__adddf3>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	4630      	mov	r0, r6
 8005d62:	4639      	mov	r1, r7
 8005d64:	f7fa fe48 	bl	80009f8 <__aeabi_dcmpgt>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d163      	bne.n	8005e34 <_dtoa_r+0x6e4>
 8005d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d70:	2000      	movs	r0, #0
 8005d72:	49a9      	ldr	r1, [pc, #676]	; (8006018 <_dtoa_r+0x8c8>)
 8005d74:	f7fa f9f8 	bl	8000168 <__aeabi_dsub>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa fe1c 	bl	80009bc <__aeabi_dcmplt>
 8005d84:	2800      	cmp	r0, #0
 8005d86:	f43f af1d 	beq.w	8005bc4 <_dtoa_r+0x474>
 8005d8a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005d8c:	1e7b      	subs	r3, r7, #1
 8005d8e:	9314      	str	r3, [sp, #80]	; 0x50
 8005d90:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005d94:	2b30      	cmp	r3, #48	; 0x30
 8005d96:	d0f8      	beq.n	8005d8a <_dtoa_r+0x63a>
 8005d98:	46c2      	mov	sl, r8
 8005d9a:	e03b      	b.n	8005e14 <_dtoa_r+0x6c4>
 8005d9c:	4b9f      	ldr	r3, [pc, #636]	; (800601c <_dtoa_r+0x8cc>)
 8005d9e:	f7fa fb9b 	bl	80004d8 <__aeabi_dmul>
 8005da2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005da6:	e7bc      	b.n	8005d22 <_dtoa_r+0x5d2>
 8005da8:	9f03      	ldr	r7, [sp, #12]
 8005daa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005dae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa fcb9 	bl	800072c <__aeabi_ddiv>
 8005dba:	f7fa fe3d 	bl	8000a38 <__aeabi_d2iz>
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f7fa fb20 	bl	8000404 <__aeabi_i2d>
 8005dc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dc8:	f7fa fb86 	bl	80004d8 <__aeabi_dmul>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4640      	mov	r0, r8
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	f7fa f9c8 	bl	8000168 <__aeabi_dsub>
 8005dd8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005ddc:	f807 6b01 	strb.w	r6, [r7], #1
 8005de0:	9e03      	ldr	r6, [sp, #12]
 8005de2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005de6:	1bbe      	subs	r6, r7, r6
 8005de8:	45b4      	cmp	ip, r6
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	d136      	bne.n	8005e5e <_dtoa_r+0x70e>
 8005df0:	f7fa f9bc 	bl	800016c <__adddf3>
 8005df4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4689      	mov	r9, r1
 8005dfc:	f7fa fdfc 	bl	80009f8 <__aeabi_dcmpgt>
 8005e00:	bb58      	cbnz	r0, 8005e5a <_dtoa_r+0x70a>
 8005e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa fdcd 	bl	80009a8 <__aeabi_dcmpeq>
 8005e0e:	b108      	cbz	r0, 8005e14 <_dtoa_r+0x6c4>
 8005e10:	07e1      	lsls	r1, r4, #31
 8005e12:	d422      	bmi.n	8005e5a <_dtoa_r+0x70a>
 8005e14:	4628      	mov	r0, r5
 8005e16:	4659      	mov	r1, fp
 8005e18:	f000 faf0 	bl	80063fc <_Bfree>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	703b      	strb	r3, [r7, #0]
 8005e20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e22:	f10a 0001 	add.w	r0, sl, #1
 8005e26:	6018      	str	r0, [r3, #0]
 8005e28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f43f acde 	beq.w	80057ec <_dtoa_r+0x9c>
 8005e30:	601f      	str	r7, [r3, #0]
 8005e32:	e4db      	b.n	80057ec <_dtoa_r+0x9c>
 8005e34:	4627      	mov	r7, r4
 8005e36:	463b      	mov	r3, r7
 8005e38:	461f      	mov	r7, r3
 8005e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e3e:	2a39      	cmp	r2, #57	; 0x39
 8005e40:	d107      	bne.n	8005e52 <_dtoa_r+0x702>
 8005e42:	9a03      	ldr	r2, [sp, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1f7      	bne.n	8005e38 <_dtoa_r+0x6e8>
 8005e48:	2230      	movs	r2, #48	; 0x30
 8005e4a:	9903      	ldr	r1, [sp, #12]
 8005e4c:	f108 0801 	add.w	r8, r8, #1
 8005e50:	700a      	strb	r2, [r1, #0]
 8005e52:	781a      	ldrb	r2, [r3, #0]
 8005e54:	3201      	adds	r2, #1
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	e79e      	b.n	8005d98 <_dtoa_r+0x648>
 8005e5a:	46d0      	mov	r8, sl
 8005e5c:	e7eb      	b.n	8005e36 <_dtoa_r+0x6e6>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4b6e      	ldr	r3, [pc, #440]	; (800601c <_dtoa_r+0x8cc>)
 8005e62:	f7fa fb39 	bl	80004d8 <__aeabi_dmul>
 8005e66:	2200      	movs	r2, #0
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4689      	mov	r9, r1
 8005e6e:	f7fa fd9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d09b      	beq.n	8005dae <_dtoa_r+0x65e>
 8005e76:	e7cd      	b.n	8005e14 <_dtoa_r+0x6c4>
 8005e78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e7a:	2a00      	cmp	r2, #0
 8005e7c:	f000 80d0 	beq.w	8006020 <_dtoa_r+0x8d0>
 8005e80:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e82:	2a01      	cmp	r2, #1
 8005e84:	f300 80ae 	bgt.w	8005fe4 <_dtoa_r+0x894>
 8005e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	f000 80a6 	beq.w	8005fdc <_dtoa_r+0x88c>
 8005e90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e96:	9f06      	ldr	r7, [sp, #24]
 8005e98:	9a06      	ldr	r2, [sp, #24]
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	441a      	add	r2, r3
 8005e9e:	9206      	str	r2, [sp, #24]
 8005ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	441a      	add	r2, r3
 8005ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea8:	f000 fb5e 	bl	8006568 <__i2b>
 8005eac:	4606      	mov	r6, r0
 8005eae:	2f00      	cmp	r7, #0
 8005eb0:	dd0c      	ble.n	8005ecc <_dtoa_r+0x77c>
 8005eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd09      	ble.n	8005ecc <_dtoa_r+0x77c>
 8005eb8:	42bb      	cmp	r3, r7
 8005eba:	bfa8      	it	ge
 8005ebc:	463b      	movge	r3, r7
 8005ebe:	9a06      	ldr	r2, [sp, #24]
 8005ec0:	1aff      	subs	r7, r7, r3
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	9206      	str	r2, [sp, #24]
 8005ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	9309      	str	r3, [sp, #36]	; 0x24
 8005ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ece:	b1f3      	cbz	r3, 8005f0e <_dtoa_r+0x7be>
 8005ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80a8 	beq.w	8006028 <_dtoa_r+0x8d8>
 8005ed8:	2c00      	cmp	r4, #0
 8005eda:	dd10      	ble.n	8005efe <_dtoa_r+0x7ae>
 8005edc:	4631      	mov	r1, r6
 8005ede:	4622      	mov	r2, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 fbff 	bl	80066e4 <__pow5mult>
 8005ee6:	465a      	mov	r2, fp
 8005ee8:	4601      	mov	r1, r0
 8005eea:	4606      	mov	r6, r0
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 fb51 	bl	8006594 <__multiply>
 8005ef2:	4680      	mov	r8, r0
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f000 fa80 	bl	80063fc <_Bfree>
 8005efc:	46c3      	mov	fp, r8
 8005efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f00:	1b1a      	subs	r2, r3, r4
 8005f02:	d004      	beq.n	8005f0e <_dtoa_r+0x7be>
 8005f04:	4659      	mov	r1, fp
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fbec 	bl	80066e4 <__pow5mult>
 8005f0c:	4683      	mov	fp, r0
 8005f0e:	2101      	movs	r1, #1
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 fb29 	bl	8006568 <__i2b>
 8005f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f18:	4604      	mov	r4, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f340 8086 	ble.w	800602c <_dtoa_r+0x8dc>
 8005f20:	461a      	mov	r2, r3
 8005f22:	4601      	mov	r1, r0
 8005f24:	4628      	mov	r0, r5
 8005f26:	f000 fbdd 	bl	80066e4 <__pow5mult>
 8005f2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	dd7f      	ble.n	8006032 <_dtoa_r+0x8e2>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005f3c:	6918      	ldr	r0, [r3, #16]
 8005f3e:	f000 fac5 	bl	80064cc <__hi0bits>
 8005f42:	f1c0 0020 	rsb	r0, r0, #32
 8005f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f48:	4418      	add	r0, r3
 8005f4a:	f010 001f 	ands.w	r0, r0, #31
 8005f4e:	f000 8092 	beq.w	8006076 <_dtoa_r+0x926>
 8005f52:	f1c0 0320 	rsb	r3, r0, #32
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	f340 808a 	ble.w	8006070 <_dtoa_r+0x920>
 8005f5c:	f1c0 001c 	rsb	r0, r0, #28
 8005f60:	9b06      	ldr	r3, [sp, #24]
 8005f62:	4407      	add	r7, r0
 8005f64:	4403      	add	r3, r0
 8005f66:	9306      	str	r3, [sp, #24]
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	4403      	add	r3, r0
 8005f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	dd05      	ble.n	8005f80 <_dtoa_r+0x830>
 8005f74:	4659      	mov	r1, fp
 8005f76:	461a      	mov	r2, r3
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 fc0d 	bl	8006798 <__lshift>
 8005f7e:	4683      	mov	fp, r0
 8005f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dd05      	ble.n	8005f92 <_dtoa_r+0x842>
 8005f86:	4621      	mov	r1, r4
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 fc04 	bl	8006798 <__lshift>
 8005f90:	4604      	mov	r4, r0
 8005f92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d070      	beq.n	800607a <_dtoa_r+0x92a>
 8005f98:	4621      	mov	r1, r4
 8005f9a:	4658      	mov	r0, fp
 8005f9c:	f000 fc6c 	bl	8006878 <__mcmp>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	da6a      	bge.n	800607a <_dtoa_r+0x92a>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	220a      	movs	r2, #10
 8005faa:	4628      	mov	r0, r5
 8005fac:	f000 fa48 	bl	8006440 <__multadd>
 8005fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fb2:	4683      	mov	fp, r0
 8005fb4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8194 	beq.w	80062e6 <_dtoa_r+0xb96>
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	220a      	movs	r2, #10
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	f000 fa3b 	bl	8006440 <__multadd>
 8005fca:	f1b9 0f00 	cmp.w	r9, #0
 8005fce:	4606      	mov	r6, r0
 8005fd0:	f300 8093 	bgt.w	80060fa <_dtoa_r+0x9aa>
 8005fd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	dc57      	bgt.n	800608a <_dtoa_r+0x93a>
 8005fda:	e08e      	b.n	80060fa <_dtoa_r+0x9aa>
 8005fdc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005fde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fe2:	e757      	b.n	8005e94 <_dtoa_r+0x744>
 8005fe4:	9b08      	ldr	r3, [sp, #32]
 8005fe6:	1e5c      	subs	r4, r3, #1
 8005fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fea:	42a3      	cmp	r3, r4
 8005fec:	bfb7      	itett	lt
 8005fee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ff0:	1b1c      	subge	r4, r3, r4
 8005ff2:	1ae2      	sublt	r2, r4, r3
 8005ff4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005ff6:	bfbe      	ittt	lt
 8005ff8:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005ffa:	189b      	addlt	r3, r3, r2
 8005ffc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ffe:	9b08      	ldr	r3, [sp, #32]
 8006000:	bfb8      	it	lt
 8006002:	2400      	movlt	r4, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	bfbb      	ittet	lt
 8006008:	9b06      	ldrlt	r3, [sp, #24]
 800600a:	9a08      	ldrlt	r2, [sp, #32]
 800600c:	9f06      	ldrge	r7, [sp, #24]
 800600e:	1a9f      	sublt	r7, r3, r2
 8006010:	bfac      	ite	ge
 8006012:	9b08      	ldrge	r3, [sp, #32]
 8006014:	2300      	movlt	r3, #0
 8006016:	e73f      	b.n	8005e98 <_dtoa_r+0x748>
 8006018:	3fe00000 	.word	0x3fe00000
 800601c:	40240000 	.word	0x40240000
 8006020:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006022:	9f06      	ldr	r7, [sp, #24]
 8006024:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006026:	e742      	b.n	8005eae <_dtoa_r+0x75e>
 8006028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800602a:	e76b      	b.n	8005f04 <_dtoa_r+0x7b4>
 800602c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800602e:	2b01      	cmp	r3, #1
 8006030:	dc19      	bgt.n	8006066 <_dtoa_r+0x916>
 8006032:	9b04      	ldr	r3, [sp, #16]
 8006034:	b9bb      	cbnz	r3, 8006066 <_dtoa_r+0x916>
 8006036:	9b05      	ldr	r3, [sp, #20]
 8006038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800603c:	b99b      	cbnz	r3, 8006066 <_dtoa_r+0x916>
 800603e:	9b05      	ldr	r3, [sp, #20]
 8006040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006044:	0d1b      	lsrs	r3, r3, #20
 8006046:	051b      	lsls	r3, r3, #20
 8006048:	b183      	cbz	r3, 800606c <_dtoa_r+0x91c>
 800604a:	f04f 0801 	mov.w	r8, #1
 800604e:	9b06      	ldr	r3, [sp, #24]
 8006050:	3301      	adds	r3, #1
 8006052:	9306      	str	r3, [sp, #24]
 8006054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	9309      	str	r3, [sp, #36]	; 0x24
 800605a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	f47f af6a 	bne.w	8005f36 <_dtoa_r+0x7e6>
 8006062:	2001      	movs	r0, #1
 8006064:	e76f      	b.n	8005f46 <_dtoa_r+0x7f6>
 8006066:	f04f 0800 	mov.w	r8, #0
 800606a:	e7f6      	b.n	800605a <_dtoa_r+0x90a>
 800606c:	4698      	mov	r8, r3
 800606e:	e7f4      	b.n	800605a <_dtoa_r+0x90a>
 8006070:	f43f af7d 	beq.w	8005f6e <_dtoa_r+0x81e>
 8006074:	4618      	mov	r0, r3
 8006076:	301c      	adds	r0, #28
 8006078:	e772      	b.n	8005f60 <_dtoa_r+0x810>
 800607a:	9b08      	ldr	r3, [sp, #32]
 800607c:	2b00      	cmp	r3, #0
 800607e:	dc36      	bgt.n	80060ee <_dtoa_r+0x99e>
 8006080:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006082:	2b02      	cmp	r3, #2
 8006084:	dd33      	ble.n	80060ee <_dtoa_r+0x99e>
 8006086:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800608a:	f1b9 0f00 	cmp.w	r9, #0
 800608e:	d10d      	bne.n	80060ac <_dtoa_r+0x95c>
 8006090:	4621      	mov	r1, r4
 8006092:	464b      	mov	r3, r9
 8006094:	2205      	movs	r2, #5
 8006096:	4628      	mov	r0, r5
 8006098:	f000 f9d2 	bl	8006440 <__multadd>
 800609c:	4601      	mov	r1, r0
 800609e:	4604      	mov	r4, r0
 80060a0:	4658      	mov	r0, fp
 80060a2:	f000 fbe9 	bl	8006878 <__mcmp>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	f73f adb8 	bgt.w	8005c1c <_dtoa_r+0x4cc>
 80060ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060ae:	9f03      	ldr	r7, [sp, #12]
 80060b0:	ea6f 0a03 	mvn.w	sl, r3
 80060b4:	f04f 0800 	mov.w	r8, #0
 80060b8:	4621      	mov	r1, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 f99e 	bl	80063fc <_Bfree>
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	f43f aea7 	beq.w	8005e14 <_dtoa_r+0x6c4>
 80060c6:	f1b8 0f00 	cmp.w	r8, #0
 80060ca:	d005      	beq.n	80060d8 <_dtoa_r+0x988>
 80060cc:	45b0      	cmp	r8, r6
 80060ce:	d003      	beq.n	80060d8 <_dtoa_r+0x988>
 80060d0:	4641      	mov	r1, r8
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 f992 	bl	80063fc <_Bfree>
 80060d8:	4631      	mov	r1, r6
 80060da:	4628      	mov	r0, r5
 80060dc:	f000 f98e 	bl	80063fc <_Bfree>
 80060e0:	e698      	b.n	8005e14 <_dtoa_r+0x6c4>
 80060e2:	2400      	movs	r4, #0
 80060e4:	4626      	mov	r6, r4
 80060e6:	e7e1      	b.n	80060ac <_dtoa_r+0x95c>
 80060e8:	46c2      	mov	sl, r8
 80060ea:	4626      	mov	r6, r4
 80060ec:	e596      	b.n	8005c1c <_dtoa_r+0x4cc>
 80060ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80fd 	beq.w	80062f4 <_dtoa_r+0xba4>
 80060fa:	2f00      	cmp	r7, #0
 80060fc:	dd05      	ble.n	800610a <_dtoa_r+0x9ba>
 80060fe:	4631      	mov	r1, r6
 8006100:	463a      	mov	r2, r7
 8006102:	4628      	mov	r0, r5
 8006104:	f000 fb48 	bl	8006798 <__lshift>
 8006108:	4606      	mov	r6, r0
 800610a:	f1b8 0f00 	cmp.w	r8, #0
 800610e:	d05c      	beq.n	80061ca <_dtoa_r+0xa7a>
 8006110:	4628      	mov	r0, r5
 8006112:	6871      	ldr	r1, [r6, #4]
 8006114:	f000 f932 	bl	800637c <_Balloc>
 8006118:	4607      	mov	r7, r0
 800611a:	b928      	cbnz	r0, 8006128 <_dtoa_r+0x9d8>
 800611c:	4602      	mov	r2, r0
 800611e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006122:	4b7f      	ldr	r3, [pc, #508]	; (8006320 <_dtoa_r+0xbd0>)
 8006124:	f7ff bb28 	b.w	8005778 <_dtoa_r+0x28>
 8006128:	6932      	ldr	r2, [r6, #16]
 800612a:	f106 010c 	add.w	r1, r6, #12
 800612e:	3202      	adds	r2, #2
 8006130:	0092      	lsls	r2, r2, #2
 8006132:	300c      	adds	r0, #12
 8006134:	f000 f914 	bl	8006360 <memcpy>
 8006138:	2201      	movs	r2, #1
 800613a:	4639      	mov	r1, r7
 800613c:	4628      	mov	r0, r5
 800613e:	f000 fb2b 	bl	8006798 <__lshift>
 8006142:	46b0      	mov	r8, r6
 8006144:	4606      	mov	r6, r0
 8006146:	9b03      	ldr	r3, [sp, #12]
 8006148:	3301      	adds	r3, #1
 800614a:	9308      	str	r3, [sp, #32]
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	444b      	add	r3, r9
 8006150:	930a      	str	r3, [sp, #40]	; 0x28
 8006152:	9b04      	ldr	r3, [sp, #16]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	9309      	str	r3, [sp, #36]	; 0x24
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	4621      	mov	r1, r4
 800615e:	3b01      	subs	r3, #1
 8006160:	4658      	mov	r0, fp
 8006162:	9304      	str	r3, [sp, #16]
 8006164:	f7ff fa68 	bl	8005638 <quorem>
 8006168:	4603      	mov	r3, r0
 800616a:	4641      	mov	r1, r8
 800616c:	3330      	adds	r3, #48	; 0x30
 800616e:	9006      	str	r0, [sp, #24]
 8006170:	4658      	mov	r0, fp
 8006172:	930b      	str	r3, [sp, #44]	; 0x2c
 8006174:	f000 fb80 	bl	8006878 <__mcmp>
 8006178:	4632      	mov	r2, r6
 800617a:	4681      	mov	r9, r0
 800617c:	4621      	mov	r1, r4
 800617e:	4628      	mov	r0, r5
 8006180:	f000 fb96 	bl	80068b0 <__mdiff>
 8006184:	68c2      	ldr	r2, [r0, #12]
 8006186:	4607      	mov	r7, r0
 8006188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800618a:	bb02      	cbnz	r2, 80061ce <_dtoa_r+0xa7e>
 800618c:	4601      	mov	r1, r0
 800618e:	4658      	mov	r0, fp
 8006190:	f000 fb72 	bl	8006878 <__mcmp>
 8006194:	4602      	mov	r2, r0
 8006196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006198:	4639      	mov	r1, r7
 800619a:	4628      	mov	r0, r5
 800619c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80061a0:	f000 f92c 	bl	80063fc <_Bfree>
 80061a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061a8:	9f08      	ldr	r7, [sp, #32]
 80061aa:	ea43 0102 	orr.w	r1, r3, r2
 80061ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b0:	430b      	orrs	r3, r1
 80061b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061b4:	d10d      	bne.n	80061d2 <_dtoa_r+0xa82>
 80061b6:	2b39      	cmp	r3, #57	; 0x39
 80061b8:	d029      	beq.n	800620e <_dtoa_r+0xabe>
 80061ba:	f1b9 0f00 	cmp.w	r9, #0
 80061be:	dd01      	ble.n	80061c4 <_dtoa_r+0xa74>
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	3331      	adds	r3, #49	; 0x31
 80061c4:	9a04      	ldr	r2, [sp, #16]
 80061c6:	7013      	strb	r3, [r2, #0]
 80061c8:	e776      	b.n	80060b8 <_dtoa_r+0x968>
 80061ca:	4630      	mov	r0, r6
 80061cc:	e7b9      	b.n	8006142 <_dtoa_r+0x9f2>
 80061ce:	2201      	movs	r2, #1
 80061d0:	e7e2      	b.n	8006198 <_dtoa_r+0xa48>
 80061d2:	f1b9 0f00 	cmp.w	r9, #0
 80061d6:	db06      	blt.n	80061e6 <_dtoa_r+0xa96>
 80061d8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80061da:	ea41 0909 	orr.w	r9, r1, r9
 80061de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061e0:	ea59 0101 	orrs.w	r1, r9, r1
 80061e4:	d120      	bne.n	8006228 <_dtoa_r+0xad8>
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	ddec      	ble.n	80061c4 <_dtoa_r+0xa74>
 80061ea:	4659      	mov	r1, fp
 80061ec:	2201      	movs	r2, #1
 80061ee:	4628      	mov	r0, r5
 80061f0:	9308      	str	r3, [sp, #32]
 80061f2:	f000 fad1 	bl	8006798 <__lshift>
 80061f6:	4621      	mov	r1, r4
 80061f8:	4683      	mov	fp, r0
 80061fa:	f000 fb3d 	bl	8006878 <__mcmp>
 80061fe:	2800      	cmp	r0, #0
 8006200:	9b08      	ldr	r3, [sp, #32]
 8006202:	dc02      	bgt.n	800620a <_dtoa_r+0xaba>
 8006204:	d1de      	bne.n	80061c4 <_dtoa_r+0xa74>
 8006206:	07da      	lsls	r2, r3, #31
 8006208:	d5dc      	bpl.n	80061c4 <_dtoa_r+0xa74>
 800620a:	2b39      	cmp	r3, #57	; 0x39
 800620c:	d1d8      	bne.n	80061c0 <_dtoa_r+0xa70>
 800620e:	2339      	movs	r3, #57	; 0x39
 8006210:	9a04      	ldr	r2, [sp, #16]
 8006212:	7013      	strb	r3, [r2, #0]
 8006214:	463b      	mov	r3, r7
 8006216:	461f      	mov	r7, r3
 8006218:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800621c:	3b01      	subs	r3, #1
 800621e:	2a39      	cmp	r2, #57	; 0x39
 8006220:	d050      	beq.n	80062c4 <_dtoa_r+0xb74>
 8006222:	3201      	adds	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e747      	b.n	80060b8 <_dtoa_r+0x968>
 8006228:	2a00      	cmp	r2, #0
 800622a:	dd03      	ble.n	8006234 <_dtoa_r+0xae4>
 800622c:	2b39      	cmp	r3, #57	; 0x39
 800622e:	d0ee      	beq.n	800620e <_dtoa_r+0xabe>
 8006230:	3301      	adds	r3, #1
 8006232:	e7c7      	b.n	80061c4 <_dtoa_r+0xa74>
 8006234:	9a08      	ldr	r2, [sp, #32]
 8006236:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006238:	f802 3c01 	strb.w	r3, [r2, #-1]
 800623c:	428a      	cmp	r2, r1
 800623e:	d02a      	beq.n	8006296 <_dtoa_r+0xb46>
 8006240:	4659      	mov	r1, fp
 8006242:	2300      	movs	r3, #0
 8006244:	220a      	movs	r2, #10
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f8fa 	bl	8006440 <__multadd>
 800624c:	45b0      	cmp	r8, r6
 800624e:	4683      	mov	fp, r0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	f04f 020a 	mov.w	r2, #10
 8006258:	4641      	mov	r1, r8
 800625a:	4628      	mov	r0, r5
 800625c:	d107      	bne.n	800626e <_dtoa_r+0xb1e>
 800625e:	f000 f8ef 	bl	8006440 <__multadd>
 8006262:	4680      	mov	r8, r0
 8006264:	4606      	mov	r6, r0
 8006266:	9b08      	ldr	r3, [sp, #32]
 8006268:	3301      	adds	r3, #1
 800626a:	9308      	str	r3, [sp, #32]
 800626c:	e775      	b.n	800615a <_dtoa_r+0xa0a>
 800626e:	f000 f8e7 	bl	8006440 <__multadd>
 8006272:	4631      	mov	r1, r6
 8006274:	4680      	mov	r8, r0
 8006276:	2300      	movs	r3, #0
 8006278:	220a      	movs	r2, #10
 800627a:	4628      	mov	r0, r5
 800627c:	f000 f8e0 	bl	8006440 <__multadd>
 8006280:	4606      	mov	r6, r0
 8006282:	e7f0      	b.n	8006266 <_dtoa_r+0xb16>
 8006284:	f1b9 0f00 	cmp.w	r9, #0
 8006288:	bfcc      	ite	gt
 800628a:	464f      	movgt	r7, r9
 800628c:	2701      	movle	r7, #1
 800628e:	f04f 0800 	mov.w	r8, #0
 8006292:	9a03      	ldr	r2, [sp, #12]
 8006294:	4417      	add	r7, r2
 8006296:	4659      	mov	r1, fp
 8006298:	2201      	movs	r2, #1
 800629a:	4628      	mov	r0, r5
 800629c:	9308      	str	r3, [sp, #32]
 800629e:	f000 fa7b 	bl	8006798 <__lshift>
 80062a2:	4621      	mov	r1, r4
 80062a4:	4683      	mov	fp, r0
 80062a6:	f000 fae7 	bl	8006878 <__mcmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	dcb2      	bgt.n	8006214 <_dtoa_r+0xac4>
 80062ae:	d102      	bne.n	80062b6 <_dtoa_r+0xb66>
 80062b0:	9b08      	ldr	r3, [sp, #32]
 80062b2:	07db      	lsls	r3, r3, #31
 80062b4:	d4ae      	bmi.n	8006214 <_dtoa_r+0xac4>
 80062b6:	463b      	mov	r3, r7
 80062b8:	461f      	mov	r7, r3
 80062ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062be:	2a30      	cmp	r2, #48	; 0x30
 80062c0:	d0fa      	beq.n	80062b8 <_dtoa_r+0xb68>
 80062c2:	e6f9      	b.n	80060b8 <_dtoa_r+0x968>
 80062c4:	9a03      	ldr	r2, [sp, #12]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d1a5      	bne.n	8006216 <_dtoa_r+0xac6>
 80062ca:	2331      	movs	r3, #49	; 0x31
 80062cc:	f10a 0a01 	add.w	sl, sl, #1
 80062d0:	e779      	b.n	80061c6 <_dtoa_r+0xa76>
 80062d2:	4b14      	ldr	r3, [pc, #80]	; (8006324 <_dtoa_r+0xbd4>)
 80062d4:	f7ff baa8 	b.w	8005828 <_dtoa_r+0xd8>
 80062d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f47f aa81 	bne.w	80057e2 <_dtoa_r+0x92>
 80062e0:	4b11      	ldr	r3, [pc, #68]	; (8006328 <_dtoa_r+0xbd8>)
 80062e2:	f7ff baa1 	b.w	8005828 <_dtoa_r+0xd8>
 80062e6:	f1b9 0f00 	cmp.w	r9, #0
 80062ea:	dc03      	bgt.n	80062f4 <_dtoa_r+0xba4>
 80062ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	f73f aecb 	bgt.w	800608a <_dtoa_r+0x93a>
 80062f4:	9f03      	ldr	r7, [sp, #12]
 80062f6:	4621      	mov	r1, r4
 80062f8:	4658      	mov	r0, fp
 80062fa:	f7ff f99d 	bl	8005638 <quorem>
 80062fe:	9a03      	ldr	r2, [sp, #12]
 8006300:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006304:	f807 3b01 	strb.w	r3, [r7], #1
 8006308:	1aba      	subs	r2, r7, r2
 800630a:	4591      	cmp	r9, r2
 800630c:	ddba      	ble.n	8006284 <_dtoa_r+0xb34>
 800630e:	4659      	mov	r1, fp
 8006310:	2300      	movs	r3, #0
 8006312:	220a      	movs	r2, #10
 8006314:	4628      	mov	r0, r5
 8006316:	f000 f893 	bl	8006440 <__multadd>
 800631a:	4683      	mov	fp, r0
 800631c:	e7eb      	b.n	80062f6 <_dtoa_r+0xba6>
 800631e:	bf00      	nop
 8006320:	08007c93 	.word	0x08007c93
 8006324:	08007bf0 	.word	0x08007bf0
 8006328:	08007c14 	.word	0x08007c14

0800632c <_localeconv_r>:
 800632c:	4800      	ldr	r0, [pc, #0]	; (8006330 <_localeconv_r+0x4>)
 800632e:	4770      	bx	lr
 8006330:	20000164 	.word	0x20000164

08006334 <malloc>:
 8006334:	4b02      	ldr	r3, [pc, #8]	; (8006340 <malloc+0xc>)
 8006336:	4601      	mov	r1, r0
 8006338:	6818      	ldr	r0, [r3, #0]
 800633a:	f000 bc1d 	b.w	8006b78 <_malloc_r>
 800633e:	bf00      	nop
 8006340:	20000010 	.word	0x20000010

08006344 <memchr>:
 8006344:	4603      	mov	r3, r0
 8006346:	b510      	push	{r4, lr}
 8006348:	b2c9      	uxtb	r1, r1
 800634a:	4402      	add	r2, r0
 800634c:	4293      	cmp	r3, r2
 800634e:	4618      	mov	r0, r3
 8006350:	d101      	bne.n	8006356 <memchr+0x12>
 8006352:	2000      	movs	r0, #0
 8006354:	e003      	b.n	800635e <memchr+0x1a>
 8006356:	7804      	ldrb	r4, [r0, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	428c      	cmp	r4, r1
 800635c:	d1f6      	bne.n	800634c <memchr+0x8>
 800635e:	bd10      	pop	{r4, pc}

08006360 <memcpy>:
 8006360:	440a      	add	r2, r1
 8006362:	4291      	cmp	r1, r2
 8006364:	f100 33ff 	add.w	r3, r0, #4294967295
 8006368:	d100      	bne.n	800636c <memcpy+0xc>
 800636a:	4770      	bx	lr
 800636c:	b510      	push	{r4, lr}
 800636e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006372:	4291      	cmp	r1, r2
 8006374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006378:	d1f9      	bne.n	800636e <memcpy+0xe>
 800637a:	bd10      	pop	{r4, pc}

0800637c <_Balloc>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006380:	4604      	mov	r4, r0
 8006382:	460d      	mov	r5, r1
 8006384:	b976      	cbnz	r6, 80063a4 <_Balloc+0x28>
 8006386:	2010      	movs	r0, #16
 8006388:	f7ff ffd4 	bl	8006334 <malloc>
 800638c:	4602      	mov	r2, r0
 800638e:	6260      	str	r0, [r4, #36]	; 0x24
 8006390:	b920      	cbnz	r0, 800639c <_Balloc+0x20>
 8006392:	2166      	movs	r1, #102	; 0x66
 8006394:	4b17      	ldr	r3, [pc, #92]	; (80063f4 <_Balloc+0x78>)
 8006396:	4818      	ldr	r0, [pc, #96]	; (80063f8 <_Balloc+0x7c>)
 8006398:	f000 fdce 	bl	8006f38 <__assert_func>
 800639c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063a0:	6006      	str	r6, [r0, #0]
 80063a2:	60c6      	str	r6, [r0, #12]
 80063a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063a6:	68f3      	ldr	r3, [r6, #12]
 80063a8:	b183      	cbz	r3, 80063cc <_Balloc+0x50>
 80063aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063b2:	b9b8      	cbnz	r0, 80063e4 <_Balloc+0x68>
 80063b4:	2101      	movs	r1, #1
 80063b6:	fa01 f605 	lsl.w	r6, r1, r5
 80063ba:	1d72      	adds	r2, r6, #5
 80063bc:	4620      	mov	r0, r4
 80063be:	0092      	lsls	r2, r2, #2
 80063c0:	f000 fb5e 	bl	8006a80 <_calloc_r>
 80063c4:	b160      	cbz	r0, 80063e0 <_Balloc+0x64>
 80063c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063ca:	e00e      	b.n	80063ea <_Balloc+0x6e>
 80063cc:	2221      	movs	r2, #33	; 0x21
 80063ce:	2104      	movs	r1, #4
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fb55 	bl	8006a80 <_calloc_r>
 80063d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d8:	60f0      	str	r0, [r6, #12]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1e4      	bne.n	80063aa <_Balloc+0x2e>
 80063e0:	2000      	movs	r0, #0
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	6802      	ldr	r2, [r0, #0]
 80063e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ea:	2300      	movs	r3, #0
 80063ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063f0:	e7f7      	b.n	80063e2 <_Balloc+0x66>
 80063f2:	bf00      	nop
 80063f4:	08007c21 	.word	0x08007c21
 80063f8:	08007ca4 	.word	0x08007ca4

080063fc <_Bfree>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006400:	4605      	mov	r5, r0
 8006402:	460c      	mov	r4, r1
 8006404:	b976      	cbnz	r6, 8006424 <_Bfree+0x28>
 8006406:	2010      	movs	r0, #16
 8006408:	f7ff ff94 	bl	8006334 <malloc>
 800640c:	4602      	mov	r2, r0
 800640e:	6268      	str	r0, [r5, #36]	; 0x24
 8006410:	b920      	cbnz	r0, 800641c <_Bfree+0x20>
 8006412:	218a      	movs	r1, #138	; 0x8a
 8006414:	4b08      	ldr	r3, [pc, #32]	; (8006438 <_Bfree+0x3c>)
 8006416:	4809      	ldr	r0, [pc, #36]	; (800643c <_Bfree+0x40>)
 8006418:	f000 fd8e 	bl	8006f38 <__assert_func>
 800641c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006420:	6006      	str	r6, [r0, #0]
 8006422:	60c6      	str	r6, [r0, #12]
 8006424:	b13c      	cbz	r4, 8006436 <_Bfree+0x3a>
 8006426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006428:	6862      	ldr	r2, [r4, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006430:	6021      	str	r1, [r4, #0]
 8006432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006436:	bd70      	pop	{r4, r5, r6, pc}
 8006438:	08007c21 	.word	0x08007c21
 800643c:	08007ca4 	.word	0x08007ca4

08006440 <__multadd>:
 8006440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	4607      	mov	r7, r0
 8006446:	460c      	mov	r4, r1
 8006448:	461e      	mov	r6, r3
 800644a:	2000      	movs	r0, #0
 800644c:	690d      	ldr	r5, [r1, #16]
 800644e:	f101 0c14 	add.w	ip, r1, #20
 8006452:	f8dc 3000 	ldr.w	r3, [ip]
 8006456:	3001      	adds	r0, #1
 8006458:	b299      	uxth	r1, r3
 800645a:	fb02 6101 	mla	r1, r2, r1, r6
 800645e:	0c1e      	lsrs	r6, r3, #16
 8006460:	0c0b      	lsrs	r3, r1, #16
 8006462:	fb02 3306 	mla	r3, r2, r6, r3
 8006466:	b289      	uxth	r1, r1
 8006468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800646c:	4285      	cmp	r5, r0
 800646e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006472:	f84c 1b04 	str.w	r1, [ip], #4
 8006476:	dcec      	bgt.n	8006452 <__multadd+0x12>
 8006478:	b30e      	cbz	r6, 80064be <__multadd+0x7e>
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	42ab      	cmp	r3, r5
 800647e:	dc19      	bgt.n	80064b4 <__multadd+0x74>
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	4638      	mov	r0, r7
 8006484:	3101      	adds	r1, #1
 8006486:	f7ff ff79 	bl	800637c <_Balloc>
 800648a:	4680      	mov	r8, r0
 800648c:	b928      	cbnz	r0, 800649a <__multadd+0x5a>
 800648e:	4602      	mov	r2, r0
 8006490:	21b5      	movs	r1, #181	; 0xb5
 8006492:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <__multadd+0x84>)
 8006494:	480c      	ldr	r0, [pc, #48]	; (80064c8 <__multadd+0x88>)
 8006496:	f000 fd4f 	bl	8006f38 <__assert_func>
 800649a:	6922      	ldr	r2, [r4, #16]
 800649c:	f104 010c 	add.w	r1, r4, #12
 80064a0:	3202      	adds	r2, #2
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	300c      	adds	r0, #12
 80064a6:	f7ff ff5b 	bl	8006360 <memcpy>
 80064aa:	4621      	mov	r1, r4
 80064ac:	4638      	mov	r0, r7
 80064ae:	f7ff ffa5 	bl	80063fc <_Bfree>
 80064b2:	4644      	mov	r4, r8
 80064b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064b8:	3501      	adds	r5, #1
 80064ba:	615e      	str	r6, [r3, #20]
 80064bc:	6125      	str	r5, [r4, #16]
 80064be:	4620      	mov	r0, r4
 80064c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c4:	08007c93 	.word	0x08007c93
 80064c8:	08007ca4 	.word	0x08007ca4

080064cc <__hi0bits>:
 80064cc:	0c02      	lsrs	r2, r0, #16
 80064ce:	0412      	lsls	r2, r2, #16
 80064d0:	4603      	mov	r3, r0
 80064d2:	b9ca      	cbnz	r2, 8006508 <__hi0bits+0x3c>
 80064d4:	0403      	lsls	r3, r0, #16
 80064d6:	2010      	movs	r0, #16
 80064d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80064dc:	bf04      	itt	eq
 80064de:	021b      	lsleq	r3, r3, #8
 80064e0:	3008      	addeq	r0, #8
 80064e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80064e6:	bf04      	itt	eq
 80064e8:	011b      	lsleq	r3, r3, #4
 80064ea:	3004      	addeq	r0, #4
 80064ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80064f0:	bf04      	itt	eq
 80064f2:	009b      	lsleq	r3, r3, #2
 80064f4:	3002      	addeq	r0, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	db05      	blt.n	8006506 <__hi0bits+0x3a>
 80064fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80064fe:	f100 0001 	add.w	r0, r0, #1
 8006502:	bf08      	it	eq
 8006504:	2020      	moveq	r0, #32
 8006506:	4770      	bx	lr
 8006508:	2000      	movs	r0, #0
 800650a:	e7e5      	b.n	80064d8 <__hi0bits+0xc>

0800650c <__lo0bits>:
 800650c:	6803      	ldr	r3, [r0, #0]
 800650e:	4602      	mov	r2, r0
 8006510:	f013 0007 	ands.w	r0, r3, #7
 8006514:	d00b      	beq.n	800652e <__lo0bits+0x22>
 8006516:	07d9      	lsls	r1, r3, #31
 8006518:	d421      	bmi.n	800655e <__lo0bits+0x52>
 800651a:	0798      	lsls	r0, r3, #30
 800651c:	bf49      	itett	mi
 800651e:	085b      	lsrmi	r3, r3, #1
 8006520:	089b      	lsrpl	r3, r3, #2
 8006522:	2001      	movmi	r0, #1
 8006524:	6013      	strmi	r3, [r2, #0]
 8006526:	bf5c      	itt	pl
 8006528:	2002      	movpl	r0, #2
 800652a:	6013      	strpl	r3, [r2, #0]
 800652c:	4770      	bx	lr
 800652e:	b299      	uxth	r1, r3
 8006530:	b909      	cbnz	r1, 8006536 <__lo0bits+0x2a>
 8006532:	2010      	movs	r0, #16
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	b2d9      	uxtb	r1, r3
 8006538:	b909      	cbnz	r1, 800653e <__lo0bits+0x32>
 800653a:	3008      	adds	r0, #8
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	0719      	lsls	r1, r3, #28
 8006540:	bf04      	itt	eq
 8006542:	091b      	lsreq	r3, r3, #4
 8006544:	3004      	addeq	r0, #4
 8006546:	0799      	lsls	r1, r3, #30
 8006548:	bf04      	itt	eq
 800654a:	089b      	lsreq	r3, r3, #2
 800654c:	3002      	addeq	r0, #2
 800654e:	07d9      	lsls	r1, r3, #31
 8006550:	d403      	bmi.n	800655a <__lo0bits+0x4e>
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	f100 0001 	add.w	r0, r0, #1
 8006558:	d003      	beq.n	8006562 <__lo0bits+0x56>
 800655a:	6013      	str	r3, [r2, #0]
 800655c:	4770      	bx	lr
 800655e:	2000      	movs	r0, #0
 8006560:	4770      	bx	lr
 8006562:	2020      	movs	r0, #32
 8006564:	4770      	bx	lr
	...

08006568 <__i2b>:
 8006568:	b510      	push	{r4, lr}
 800656a:	460c      	mov	r4, r1
 800656c:	2101      	movs	r1, #1
 800656e:	f7ff ff05 	bl	800637c <_Balloc>
 8006572:	4602      	mov	r2, r0
 8006574:	b928      	cbnz	r0, 8006582 <__i2b+0x1a>
 8006576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800657a:	4b04      	ldr	r3, [pc, #16]	; (800658c <__i2b+0x24>)
 800657c:	4804      	ldr	r0, [pc, #16]	; (8006590 <__i2b+0x28>)
 800657e:	f000 fcdb 	bl	8006f38 <__assert_func>
 8006582:	2301      	movs	r3, #1
 8006584:	6144      	str	r4, [r0, #20]
 8006586:	6103      	str	r3, [r0, #16]
 8006588:	bd10      	pop	{r4, pc}
 800658a:	bf00      	nop
 800658c:	08007c93 	.word	0x08007c93
 8006590:	08007ca4 	.word	0x08007ca4

08006594 <__multiply>:
 8006594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006598:	4691      	mov	r9, r2
 800659a:	690a      	ldr	r2, [r1, #16]
 800659c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065a0:	460c      	mov	r4, r1
 80065a2:	429a      	cmp	r2, r3
 80065a4:	bfbe      	ittt	lt
 80065a6:	460b      	movlt	r3, r1
 80065a8:	464c      	movlt	r4, r9
 80065aa:	4699      	movlt	r9, r3
 80065ac:	6927      	ldr	r7, [r4, #16]
 80065ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065b2:	68a3      	ldr	r3, [r4, #8]
 80065b4:	6861      	ldr	r1, [r4, #4]
 80065b6:	eb07 060a 	add.w	r6, r7, sl
 80065ba:	42b3      	cmp	r3, r6
 80065bc:	b085      	sub	sp, #20
 80065be:	bfb8      	it	lt
 80065c0:	3101      	addlt	r1, #1
 80065c2:	f7ff fedb 	bl	800637c <_Balloc>
 80065c6:	b930      	cbnz	r0, 80065d6 <__multiply+0x42>
 80065c8:	4602      	mov	r2, r0
 80065ca:	f240 115d 	movw	r1, #349	; 0x15d
 80065ce:	4b43      	ldr	r3, [pc, #268]	; (80066dc <__multiply+0x148>)
 80065d0:	4843      	ldr	r0, [pc, #268]	; (80066e0 <__multiply+0x14c>)
 80065d2:	f000 fcb1 	bl	8006f38 <__assert_func>
 80065d6:	f100 0514 	add.w	r5, r0, #20
 80065da:	462b      	mov	r3, r5
 80065dc:	2200      	movs	r2, #0
 80065de:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065e2:	4543      	cmp	r3, r8
 80065e4:	d321      	bcc.n	800662a <__multiply+0x96>
 80065e6:	f104 0314 	add.w	r3, r4, #20
 80065ea:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065ee:	f109 0314 	add.w	r3, r9, #20
 80065f2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065f6:	9202      	str	r2, [sp, #8]
 80065f8:	1b3a      	subs	r2, r7, r4
 80065fa:	3a15      	subs	r2, #21
 80065fc:	f022 0203 	bic.w	r2, r2, #3
 8006600:	3204      	adds	r2, #4
 8006602:	f104 0115 	add.w	r1, r4, #21
 8006606:	428f      	cmp	r7, r1
 8006608:	bf38      	it	cc
 800660a:	2204      	movcc	r2, #4
 800660c:	9201      	str	r2, [sp, #4]
 800660e:	9a02      	ldr	r2, [sp, #8]
 8006610:	9303      	str	r3, [sp, #12]
 8006612:	429a      	cmp	r2, r3
 8006614:	d80c      	bhi.n	8006630 <__multiply+0x9c>
 8006616:	2e00      	cmp	r6, #0
 8006618:	dd03      	ble.n	8006622 <__multiply+0x8e>
 800661a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800661e:	2b00      	cmp	r3, #0
 8006620:	d059      	beq.n	80066d6 <__multiply+0x142>
 8006622:	6106      	str	r6, [r0, #16]
 8006624:	b005      	add	sp, #20
 8006626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662a:	f843 2b04 	str.w	r2, [r3], #4
 800662e:	e7d8      	b.n	80065e2 <__multiply+0x4e>
 8006630:	f8b3 a000 	ldrh.w	sl, [r3]
 8006634:	f1ba 0f00 	cmp.w	sl, #0
 8006638:	d023      	beq.n	8006682 <__multiply+0xee>
 800663a:	46a9      	mov	r9, r5
 800663c:	f04f 0c00 	mov.w	ip, #0
 8006640:	f104 0e14 	add.w	lr, r4, #20
 8006644:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006648:	f8d9 1000 	ldr.w	r1, [r9]
 800664c:	fa1f fb82 	uxth.w	fp, r2
 8006650:	b289      	uxth	r1, r1
 8006652:	fb0a 110b 	mla	r1, sl, fp, r1
 8006656:	4461      	add	r1, ip
 8006658:	f8d9 c000 	ldr.w	ip, [r9]
 800665c:	0c12      	lsrs	r2, r2, #16
 800665e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006662:	fb0a c202 	mla	r2, sl, r2, ip
 8006666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800666a:	b289      	uxth	r1, r1
 800666c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006670:	4577      	cmp	r7, lr
 8006672:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006676:	f849 1b04 	str.w	r1, [r9], #4
 800667a:	d8e3      	bhi.n	8006644 <__multiply+0xb0>
 800667c:	9a01      	ldr	r2, [sp, #4]
 800667e:	f845 c002 	str.w	ip, [r5, r2]
 8006682:	9a03      	ldr	r2, [sp, #12]
 8006684:	3304      	adds	r3, #4
 8006686:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800668a:	f1b9 0f00 	cmp.w	r9, #0
 800668e:	d020      	beq.n	80066d2 <__multiply+0x13e>
 8006690:	46ae      	mov	lr, r5
 8006692:	f04f 0a00 	mov.w	sl, #0
 8006696:	6829      	ldr	r1, [r5, #0]
 8006698:	f104 0c14 	add.w	ip, r4, #20
 800669c:	f8bc b000 	ldrh.w	fp, [ip]
 80066a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066a4:	b289      	uxth	r1, r1
 80066a6:	fb09 220b 	mla	r2, r9, fp, r2
 80066aa:	4492      	add	sl, r2
 80066ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80066b0:	f84e 1b04 	str.w	r1, [lr], #4
 80066b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066b8:	f8be 1000 	ldrh.w	r1, [lr]
 80066bc:	0c12      	lsrs	r2, r2, #16
 80066be:	fb09 1102 	mla	r1, r9, r2, r1
 80066c2:	4567      	cmp	r7, ip
 80066c4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80066c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066cc:	d8e6      	bhi.n	800669c <__multiply+0x108>
 80066ce:	9a01      	ldr	r2, [sp, #4]
 80066d0:	50a9      	str	r1, [r5, r2]
 80066d2:	3504      	adds	r5, #4
 80066d4:	e79b      	b.n	800660e <__multiply+0x7a>
 80066d6:	3e01      	subs	r6, #1
 80066d8:	e79d      	b.n	8006616 <__multiply+0x82>
 80066da:	bf00      	nop
 80066dc:	08007c93 	.word	0x08007c93
 80066e0:	08007ca4 	.word	0x08007ca4

080066e4 <__pow5mult>:
 80066e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066e8:	4615      	mov	r5, r2
 80066ea:	f012 0203 	ands.w	r2, r2, #3
 80066ee:	4606      	mov	r6, r0
 80066f0:	460f      	mov	r7, r1
 80066f2:	d007      	beq.n	8006704 <__pow5mult+0x20>
 80066f4:	4c25      	ldr	r4, [pc, #148]	; (800678c <__pow5mult+0xa8>)
 80066f6:	3a01      	subs	r2, #1
 80066f8:	2300      	movs	r3, #0
 80066fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066fe:	f7ff fe9f 	bl	8006440 <__multadd>
 8006702:	4607      	mov	r7, r0
 8006704:	10ad      	asrs	r5, r5, #2
 8006706:	d03d      	beq.n	8006784 <__pow5mult+0xa0>
 8006708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800670a:	b97c      	cbnz	r4, 800672c <__pow5mult+0x48>
 800670c:	2010      	movs	r0, #16
 800670e:	f7ff fe11 	bl	8006334 <malloc>
 8006712:	4602      	mov	r2, r0
 8006714:	6270      	str	r0, [r6, #36]	; 0x24
 8006716:	b928      	cbnz	r0, 8006724 <__pow5mult+0x40>
 8006718:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800671c:	4b1c      	ldr	r3, [pc, #112]	; (8006790 <__pow5mult+0xac>)
 800671e:	481d      	ldr	r0, [pc, #116]	; (8006794 <__pow5mult+0xb0>)
 8006720:	f000 fc0a 	bl	8006f38 <__assert_func>
 8006724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006728:	6004      	str	r4, [r0, #0]
 800672a:	60c4      	str	r4, [r0, #12]
 800672c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006734:	b94c      	cbnz	r4, 800674a <__pow5mult+0x66>
 8006736:	f240 2171 	movw	r1, #625	; 0x271
 800673a:	4630      	mov	r0, r6
 800673c:	f7ff ff14 	bl	8006568 <__i2b>
 8006740:	2300      	movs	r3, #0
 8006742:	4604      	mov	r4, r0
 8006744:	f8c8 0008 	str.w	r0, [r8, #8]
 8006748:	6003      	str	r3, [r0, #0]
 800674a:	f04f 0900 	mov.w	r9, #0
 800674e:	07eb      	lsls	r3, r5, #31
 8006750:	d50a      	bpl.n	8006768 <__pow5mult+0x84>
 8006752:	4639      	mov	r1, r7
 8006754:	4622      	mov	r2, r4
 8006756:	4630      	mov	r0, r6
 8006758:	f7ff ff1c 	bl	8006594 <__multiply>
 800675c:	4680      	mov	r8, r0
 800675e:	4639      	mov	r1, r7
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff fe4b 	bl	80063fc <_Bfree>
 8006766:	4647      	mov	r7, r8
 8006768:	106d      	asrs	r5, r5, #1
 800676a:	d00b      	beq.n	8006784 <__pow5mult+0xa0>
 800676c:	6820      	ldr	r0, [r4, #0]
 800676e:	b938      	cbnz	r0, 8006780 <__pow5mult+0x9c>
 8006770:	4622      	mov	r2, r4
 8006772:	4621      	mov	r1, r4
 8006774:	4630      	mov	r0, r6
 8006776:	f7ff ff0d 	bl	8006594 <__multiply>
 800677a:	6020      	str	r0, [r4, #0]
 800677c:	f8c0 9000 	str.w	r9, [r0]
 8006780:	4604      	mov	r4, r0
 8006782:	e7e4      	b.n	800674e <__pow5mult+0x6a>
 8006784:	4638      	mov	r0, r7
 8006786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800678a:	bf00      	nop
 800678c:	08007df0 	.word	0x08007df0
 8006790:	08007c21 	.word	0x08007c21
 8006794:	08007ca4 	.word	0x08007ca4

08006798 <__lshift>:
 8006798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800679c:	460c      	mov	r4, r1
 800679e:	4607      	mov	r7, r0
 80067a0:	4691      	mov	r9, r2
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	6849      	ldr	r1, [r1, #4]
 80067a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067b0:	f108 0601 	add.w	r6, r8, #1
 80067b4:	42b3      	cmp	r3, r6
 80067b6:	db0b      	blt.n	80067d0 <__lshift+0x38>
 80067b8:	4638      	mov	r0, r7
 80067ba:	f7ff fddf 	bl	800637c <_Balloc>
 80067be:	4605      	mov	r5, r0
 80067c0:	b948      	cbnz	r0, 80067d6 <__lshift+0x3e>
 80067c2:	4602      	mov	r2, r0
 80067c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067c8:	4b29      	ldr	r3, [pc, #164]	; (8006870 <__lshift+0xd8>)
 80067ca:	482a      	ldr	r0, [pc, #168]	; (8006874 <__lshift+0xdc>)
 80067cc:	f000 fbb4 	bl	8006f38 <__assert_func>
 80067d0:	3101      	adds	r1, #1
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	e7ee      	b.n	80067b4 <__lshift+0x1c>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f100 0114 	add.w	r1, r0, #20
 80067dc:	f100 0210 	add.w	r2, r0, #16
 80067e0:	4618      	mov	r0, r3
 80067e2:	4553      	cmp	r3, sl
 80067e4:	db37      	blt.n	8006856 <__lshift+0xbe>
 80067e6:	6920      	ldr	r0, [r4, #16]
 80067e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067ec:	f104 0314 	add.w	r3, r4, #20
 80067f0:	f019 091f 	ands.w	r9, r9, #31
 80067f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067fc:	d02f      	beq.n	800685e <__lshift+0xc6>
 80067fe:	468a      	mov	sl, r1
 8006800:	f04f 0c00 	mov.w	ip, #0
 8006804:	f1c9 0e20 	rsb	lr, r9, #32
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	fa02 f209 	lsl.w	r2, r2, r9
 800680e:	ea42 020c 	orr.w	r2, r2, ip
 8006812:	f84a 2b04 	str.w	r2, [sl], #4
 8006816:	f853 2b04 	ldr.w	r2, [r3], #4
 800681a:	4298      	cmp	r0, r3
 800681c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006820:	d8f2      	bhi.n	8006808 <__lshift+0x70>
 8006822:	1b03      	subs	r3, r0, r4
 8006824:	3b15      	subs	r3, #21
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	3304      	adds	r3, #4
 800682c:	f104 0215 	add.w	r2, r4, #21
 8006830:	4290      	cmp	r0, r2
 8006832:	bf38      	it	cc
 8006834:	2304      	movcc	r3, #4
 8006836:	f841 c003 	str.w	ip, [r1, r3]
 800683a:	f1bc 0f00 	cmp.w	ip, #0
 800683e:	d001      	beq.n	8006844 <__lshift+0xac>
 8006840:	f108 0602 	add.w	r6, r8, #2
 8006844:	3e01      	subs	r6, #1
 8006846:	4638      	mov	r0, r7
 8006848:	4621      	mov	r1, r4
 800684a:	612e      	str	r6, [r5, #16]
 800684c:	f7ff fdd6 	bl	80063fc <_Bfree>
 8006850:	4628      	mov	r0, r5
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	f842 0f04 	str.w	r0, [r2, #4]!
 800685a:	3301      	adds	r3, #1
 800685c:	e7c1      	b.n	80067e2 <__lshift+0x4a>
 800685e:	3904      	subs	r1, #4
 8006860:	f853 2b04 	ldr.w	r2, [r3], #4
 8006864:	4298      	cmp	r0, r3
 8006866:	f841 2f04 	str.w	r2, [r1, #4]!
 800686a:	d8f9      	bhi.n	8006860 <__lshift+0xc8>
 800686c:	e7ea      	b.n	8006844 <__lshift+0xac>
 800686e:	bf00      	nop
 8006870:	08007c93 	.word	0x08007c93
 8006874:	08007ca4 	.word	0x08007ca4

08006878 <__mcmp>:
 8006878:	4603      	mov	r3, r0
 800687a:	690a      	ldr	r2, [r1, #16]
 800687c:	6900      	ldr	r0, [r0, #16]
 800687e:	b530      	push	{r4, r5, lr}
 8006880:	1a80      	subs	r0, r0, r2
 8006882:	d10d      	bne.n	80068a0 <__mcmp+0x28>
 8006884:	3314      	adds	r3, #20
 8006886:	3114      	adds	r1, #20
 8006888:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800688c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006898:	4295      	cmp	r5, r2
 800689a:	d002      	beq.n	80068a2 <__mcmp+0x2a>
 800689c:	d304      	bcc.n	80068a8 <__mcmp+0x30>
 800689e:	2001      	movs	r0, #1
 80068a0:	bd30      	pop	{r4, r5, pc}
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	d3f4      	bcc.n	8006890 <__mcmp+0x18>
 80068a6:	e7fb      	b.n	80068a0 <__mcmp+0x28>
 80068a8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ac:	e7f8      	b.n	80068a0 <__mcmp+0x28>
	...

080068b0 <__mdiff>:
 80068b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	460d      	mov	r5, r1
 80068b6:	4607      	mov	r7, r0
 80068b8:	4611      	mov	r1, r2
 80068ba:	4628      	mov	r0, r5
 80068bc:	4614      	mov	r4, r2
 80068be:	f7ff ffdb 	bl	8006878 <__mcmp>
 80068c2:	1e06      	subs	r6, r0, #0
 80068c4:	d111      	bne.n	80068ea <__mdiff+0x3a>
 80068c6:	4631      	mov	r1, r6
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7ff fd57 	bl	800637c <_Balloc>
 80068ce:	4602      	mov	r2, r0
 80068d0:	b928      	cbnz	r0, 80068de <__mdiff+0x2e>
 80068d2:	f240 2132 	movw	r1, #562	; 0x232
 80068d6:	4b3a      	ldr	r3, [pc, #232]	; (80069c0 <__mdiff+0x110>)
 80068d8:	483a      	ldr	r0, [pc, #232]	; (80069c4 <__mdiff+0x114>)
 80068da:	f000 fb2d 	bl	8006f38 <__assert_func>
 80068de:	2301      	movs	r3, #1
 80068e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80068e4:	4610      	mov	r0, r2
 80068e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ea:	bfa4      	itt	ge
 80068ec:	4623      	movge	r3, r4
 80068ee:	462c      	movge	r4, r5
 80068f0:	4638      	mov	r0, r7
 80068f2:	6861      	ldr	r1, [r4, #4]
 80068f4:	bfa6      	itte	ge
 80068f6:	461d      	movge	r5, r3
 80068f8:	2600      	movge	r6, #0
 80068fa:	2601      	movlt	r6, #1
 80068fc:	f7ff fd3e 	bl	800637c <_Balloc>
 8006900:	4602      	mov	r2, r0
 8006902:	b918      	cbnz	r0, 800690c <__mdiff+0x5c>
 8006904:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006908:	4b2d      	ldr	r3, [pc, #180]	; (80069c0 <__mdiff+0x110>)
 800690a:	e7e5      	b.n	80068d8 <__mdiff+0x28>
 800690c:	f102 0814 	add.w	r8, r2, #20
 8006910:	46c2      	mov	sl, r8
 8006912:	f04f 0c00 	mov.w	ip, #0
 8006916:	6927      	ldr	r7, [r4, #16]
 8006918:	60c6      	str	r6, [r0, #12]
 800691a:	692e      	ldr	r6, [r5, #16]
 800691c:	f104 0014 	add.w	r0, r4, #20
 8006920:	f105 0914 	add.w	r9, r5, #20
 8006924:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800692c:	3410      	adds	r4, #16
 800692e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006932:	f859 3b04 	ldr.w	r3, [r9], #4
 8006936:	fa1f f18b 	uxth.w	r1, fp
 800693a:	448c      	add	ip, r1
 800693c:	b299      	uxth	r1, r3
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	ebac 0101 	sub.w	r1, ip, r1
 8006944:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006948:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800694c:	b289      	uxth	r1, r1
 800694e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006952:	454e      	cmp	r6, r9
 8006954:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006958:	f84a 3b04 	str.w	r3, [sl], #4
 800695c:	d8e7      	bhi.n	800692e <__mdiff+0x7e>
 800695e:	1b73      	subs	r3, r6, r5
 8006960:	3b15      	subs	r3, #21
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	3515      	adds	r5, #21
 8006968:	3304      	adds	r3, #4
 800696a:	42ae      	cmp	r6, r5
 800696c:	bf38      	it	cc
 800696e:	2304      	movcc	r3, #4
 8006970:	4418      	add	r0, r3
 8006972:	4443      	add	r3, r8
 8006974:	461e      	mov	r6, r3
 8006976:	4605      	mov	r5, r0
 8006978:	4575      	cmp	r5, lr
 800697a:	d30e      	bcc.n	800699a <__mdiff+0xea>
 800697c:	f10e 0103 	add.w	r1, lr, #3
 8006980:	1a09      	subs	r1, r1, r0
 8006982:	f021 0103 	bic.w	r1, r1, #3
 8006986:	3803      	subs	r0, #3
 8006988:	4586      	cmp	lr, r0
 800698a:	bf38      	it	cc
 800698c:	2100      	movcc	r1, #0
 800698e:	4419      	add	r1, r3
 8006990:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006994:	b18b      	cbz	r3, 80069ba <__mdiff+0x10a>
 8006996:	6117      	str	r7, [r2, #16]
 8006998:	e7a4      	b.n	80068e4 <__mdiff+0x34>
 800699a:	f855 8b04 	ldr.w	r8, [r5], #4
 800699e:	fa1f f188 	uxth.w	r1, r8
 80069a2:	4461      	add	r1, ip
 80069a4:	140c      	asrs	r4, r1, #16
 80069a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80069aa:	b289      	uxth	r1, r1
 80069ac:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80069b0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80069b4:	f846 1b04 	str.w	r1, [r6], #4
 80069b8:	e7de      	b.n	8006978 <__mdiff+0xc8>
 80069ba:	3f01      	subs	r7, #1
 80069bc:	e7e8      	b.n	8006990 <__mdiff+0xe0>
 80069be:	bf00      	nop
 80069c0:	08007c93 	.word	0x08007c93
 80069c4:	08007ca4 	.word	0x08007ca4

080069c8 <__d2b>:
 80069c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80069cc:	2101      	movs	r1, #1
 80069ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80069d2:	4690      	mov	r8, r2
 80069d4:	461d      	mov	r5, r3
 80069d6:	f7ff fcd1 	bl	800637c <_Balloc>
 80069da:	4604      	mov	r4, r0
 80069dc:	b930      	cbnz	r0, 80069ec <__d2b+0x24>
 80069de:	4602      	mov	r2, r0
 80069e0:	f240 310a 	movw	r1, #778	; 0x30a
 80069e4:	4b24      	ldr	r3, [pc, #144]	; (8006a78 <__d2b+0xb0>)
 80069e6:	4825      	ldr	r0, [pc, #148]	; (8006a7c <__d2b+0xb4>)
 80069e8:	f000 faa6 	bl	8006f38 <__assert_func>
 80069ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80069f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80069f4:	bb2d      	cbnz	r5, 8006a42 <__d2b+0x7a>
 80069f6:	9301      	str	r3, [sp, #4]
 80069f8:	f1b8 0300 	subs.w	r3, r8, #0
 80069fc:	d026      	beq.n	8006a4c <__d2b+0x84>
 80069fe:	4668      	mov	r0, sp
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	f7ff fd83 	bl	800650c <__lo0bits>
 8006a06:	9900      	ldr	r1, [sp, #0]
 8006a08:	b1f0      	cbz	r0, 8006a48 <__d2b+0x80>
 8006a0a:	9a01      	ldr	r2, [sp, #4]
 8006a0c:	f1c0 0320 	rsb	r3, r0, #32
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	430b      	orrs	r3, r1
 8006a16:	40c2      	lsrs	r2, r0
 8006a18:	6163      	str	r3, [r4, #20]
 8006a1a:	9201      	str	r2, [sp, #4]
 8006a1c:	9b01      	ldr	r3, [sp, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	bf14      	ite	ne
 8006a22:	2102      	movne	r1, #2
 8006a24:	2101      	moveq	r1, #1
 8006a26:	61a3      	str	r3, [r4, #24]
 8006a28:	6121      	str	r1, [r4, #16]
 8006a2a:	b1c5      	cbz	r5, 8006a5e <__d2b+0x96>
 8006a2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a30:	4405      	add	r5, r0
 8006a32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a36:	603d      	str	r5, [r7, #0]
 8006a38:	6030      	str	r0, [r6, #0]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	b002      	add	sp, #8
 8006a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a46:	e7d6      	b.n	80069f6 <__d2b+0x2e>
 8006a48:	6161      	str	r1, [r4, #20]
 8006a4a:	e7e7      	b.n	8006a1c <__d2b+0x54>
 8006a4c:	a801      	add	r0, sp, #4
 8006a4e:	f7ff fd5d 	bl	800650c <__lo0bits>
 8006a52:	2101      	movs	r1, #1
 8006a54:	9b01      	ldr	r3, [sp, #4]
 8006a56:	6121      	str	r1, [r4, #16]
 8006a58:	6163      	str	r3, [r4, #20]
 8006a5a:	3020      	adds	r0, #32
 8006a5c:	e7e5      	b.n	8006a2a <__d2b+0x62>
 8006a5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006a62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a66:	6038      	str	r0, [r7, #0]
 8006a68:	6918      	ldr	r0, [r3, #16]
 8006a6a:	f7ff fd2f 	bl	80064cc <__hi0bits>
 8006a6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006a72:	6031      	str	r1, [r6, #0]
 8006a74:	e7e1      	b.n	8006a3a <__d2b+0x72>
 8006a76:	bf00      	nop
 8006a78:	08007c93 	.word	0x08007c93
 8006a7c:	08007ca4 	.word	0x08007ca4

08006a80 <_calloc_r>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	fba1 5402 	umull	r5, r4, r1, r2
 8006a86:	b934      	cbnz	r4, 8006a96 <_calloc_r+0x16>
 8006a88:	4629      	mov	r1, r5
 8006a8a:	f000 f875 	bl	8006b78 <_malloc_r>
 8006a8e:	4606      	mov	r6, r0
 8006a90:	b928      	cbnz	r0, 8006a9e <_calloc_r+0x1e>
 8006a92:	4630      	mov	r0, r6
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	220c      	movs	r2, #12
 8006a98:	2600      	movs	r6, #0
 8006a9a:	6002      	str	r2, [r0, #0]
 8006a9c:	e7f9      	b.n	8006a92 <_calloc_r+0x12>
 8006a9e:	462a      	mov	r2, r5
 8006aa0:	4621      	mov	r1, r4
 8006aa2:	f7fe f941 	bl	8004d28 <memset>
 8006aa6:	e7f4      	b.n	8006a92 <_calloc_r+0x12>

08006aa8 <_free_r>:
 8006aa8:	b538      	push	{r3, r4, r5, lr}
 8006aaa:	4605      	mov	r5, r0
 8006aac:	2900      	cmp	r1, #0
 8006aae:	d040      	beq.n	8006b32 <_free_r+0x8a>
 8006ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ab4:	1f0c      	subs	r4, r1, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	bfb8      	it	lt
 8006aba:	18e4      	addlt	r4, r4, r3
 8006abc:	f000 fa98 	bl	8006ff0 <__malloc_lock>
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <_free_r+0x8c>)
 8006ac2:	6813      	ldr	r3, [r2, #0]
 8006ac4:	b933      	cbnz	r3, 8006ad4 <_free_r+0x2c>
 8006ac6:	6063      	str	r3, [r4, #4]
 8006ac8:	6014      	str	r4, [r2, #0]
 8006aca:	4628      	mov	r0, r5
 8006acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ad0:	f000 ba94 	b.w	8006ffc <__malloc_unlock>
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d908      	bls.n	8006aea <_free_r+0x42>
 8006ad8:	6820      	ldr	r0, [r4, #0]
 8006ada:	1821      	adds	r1, r4, r0
 8006adc:	428b      	cmp	r3, r1
 8006ade:	bf01      	itttt	eq
 8006ae0:	6819      	ldreq	r1, [r3, #0]
 8006ae2:	685b      	ldreq	r3, [r3, #4]
 8006ae4:	1809      	addeq	r1, r1, r0
 8006ae6:	6021      	streq	r1, [r4, #0]
 8006ae8:	e7ed      	b.n	8006ac6 <_free_r+0x1e>
 8006aea:	461a      	mov	r2, r3
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	b10b      	cbz	r3, 8006af4 <_free_r+0x4c>
 8006af0:	42a3      	cmp	r3, r4
 8006af2:	d9fa      	bls.n	8006aea <_free_r+0x42>
 8006af4:	6811      	ldr	r1, [r2, #0]
 8006af6:	1850      	adds	r0, r2, r1
 8006af8:	42a0      	cmp	r0, r4
 8006afa:	d10b      	bne.n	8006b14 <_free_r+0x6c>
 8006afc:	6820      	ldr	r0, [r4, #0]
 8006afe:	4401      	add	r1, r0
 8006b00:	1850      	adds	r0, r2, r1
 8006b02:	4283      	cmp	r3, r0
 8006b04:	6011      	str	r1, [r2, #0]
 8006b06:	d1e0      	bne.n	8006aca <_free_r+0x22>
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	4401      	add	r1, r0
 8006b0e:	6011      	str	r1, [r2, #0]
 8006b10:	6053      	str	r3, [r2, #4]
 8006b12:	e7da      	b.n	8006aca <_free_r+0x22>
 8006b14:	d902      	bls.n	8006b1c <_free_r+0x74>
 8006b16:	230c      	movs	r3, #12
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	e7d6      	b.n	8006aca <_free_r+0x22>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	1821      	adds	r1, r4, r0
 8006b20:	428b      	cmp	r3, r1
 8006b22:	bf01      	itttt	eq
 8006b24:	6819      	ldreq	r1, [r3, #0]
 8006b26:	685b      	ldreq	r3, [r3, #4]
 8006b28:	1809      	addeq	r1, r1, r0
 8006b2a:	6021      	streq	r1, [r4, #0]
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6054      	str	r4, [r2, #4]
 8006b30:	e7cb      	b.n	8006aca <_free_r+0x22>
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	200004e0 	.word	0x200004e0

08006b38 <sbrk_aligned>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4e0e      	ldr	r6, [pc, #56]	; (8006b74 <sbrk_aligned+0x3c>)
 8006b3c:	460c      	mov	r4, r1
 8006b3e:	6831      	ldr	r1, [r6, #0]
 8006b40:	4605      	mov	r5, r0
 8006b42:	b911      	cbnz	r1, 8006b4a <sbrk_aligned+0x12>
 8006b44:	f000 f9e8 	bl	8006f18 <_sbrk_r>
 8006b48:	6030      	str	r0, [r6, #0]
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	f000 f9e3 	bl	8006f18 <_sbrk_r>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d00a      	beq.n	8006b6c <sbrk_aligned+0x34>
 8006b56:	1cc4      	adds	r4, r0, #3
 8006b58:	f024 0403 	bic.w	r4, r4, #3
 8006b5c:	42a0      	cmp	r0, r4
 8006b5e:	d007      	beq.n	8006b70 <sbrk_aligned+0x38>
 8006b60:	1a21      	subs	r1, r4, r0
 8006b62:	4628      	mov	r0, r5
 8006b64:	f000 f9d8 	bl	8006f18 <_sbrk_r>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d101      	bne.n	8006b70 <sbrk_aligned+0x38>
 8006b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8006b70:	4620      	mov	r0, r4
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	200004e4 	.word	0x200004e4

08006b78 <_malloc_r>:
 8006b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b7c:	1ccd      	adds	r5, r1, #3
 8006b7e:	f025 0503 	bic.w	r5, r5, #3
 8006b82:	3508      	adds	r5, #8
 8006b84:	2d0c      	cmp	r5, #12
 8006b86:	bf38      	it	cc
 8006b88:	250c      	movcc	r5, #12
 8006b8a:	2d00      	cmp	r5, #0
 8006b8c:	4607      	mov	r7, r0
 8006b8e:	db01      	blt.n	8006b94 <_malloc_r+0x1c>
 8006b90:	42a9      	cmp	r1, r5
 8006b92:	d905      	bls.n	8006ba0 <_malloc_r+0x28>
 8006b94:	230c      	movs	r3, #12
 8006b96:	2600      	movs	r6, #0
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ba0:	4e2e      	ldr	r6, [pc, #184]	; (8006c5c <_malloc_r+0xe4>)
 8006ba2:	f000 fa25 	bl	8006ff0 <__malloc_lock>
 8006ba6:	6833      	ldr	r3, [r6, #0]
 8006ba8:	461c      	mov	r4, r3
 8006baa:	bb34      	cbnz	r4, 8006bfa <_malloc_r+0x82>
 8006bac:	4629      	mov	r1, r5
 8006bae:	4638      	mov	r0, r7
 8006bb0:	f7ff ffc2 	bl	8006b38 <sbrk_aligned>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	d14d      	bne.n	8006c56 <_malloc_r+0xde>
 8006bba:	6834      	ldr	r4, [r6, #0]
 8006bbc:	4626      	mov	r6, r4
 8006bbe:	2e00      	cmp	r6, #0
 8006bc0:	d140      	bne.n	8006c44 <_malloc_r+0xcc>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	eb04 0803 	add.w	r8, r4, r3
 8006bcc:	f000 f9a4 	bl	8006f18 <_sbrk_r>
 8006bd0:	4580      	cmp	r8, r0
 8006bd2:	d13a      	bne.n	8006c4a <_malloc_r+0xd2>
 8006bd4:	6821      	ldr	r1, [r4, #0]
 8006bd6:	3503      	adds	r5, #3
 8006bd8:	1a6d      	subs	r5, r5, r1
 8006bda:	f025 0503 	bic.w	r5, r5, #3
 8006bde:	3508      	adds	r5, #8
 8006be0:	2d0c      	cmp	r5, #12
 8006be2:	bf38      	it	cc
 8006be4:	250c      	movcc	r5, #12
 8006be6:	4638      	mov	r0, r7
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7ff ffa5 	bl	8006b38 <sbrk_aligned>
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d02b      	beq.n	8006c4a <_malloc_r+0xd2>
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	442b      	add	r3, r5
 8006bf6:	6023      	str	r3, [r4, #0]
 8006bf8:	e00e      	b.n	8006c18 <_malloc_r+0xa0>
 8006bfa:	6822      	ldr	r2, [r4, #0]
 8006bfc:	1b52      	subs	r2, r2, r5
 8006bfe:	d41e      	bmi.n	8006c3e <_malloc_r+0xc6>
 8006c00:	2a0b      	cmp	r2, #11
 8006c02:	d916      	bls.n	8006c32 <_malloc_r+0xba>
 8006c04:	1961      	adds	r1, r4, r5
 8006c06:	42a3      	cmp	r3, r4
 8006c08:	6025      	str	r5, [r4, #0]
 8006c0a:	bf18      	it	ne
 8006c0c:	6059      	strne	r1, [r3, #4]
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	bf08      	it	eq
 8006c12:	6031      	streq	r1, [r6, #0]
 8006c14:	5162      	str	r2, [r4, r5]
 8006c16:	604b      	str	r3, [r1, #4]
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f104 060b 	add.w	r6, r4, #11
 8006c1e:	f000 f9ed 	bl	8006ffc <__malloc_unlock>
 8006c22:	f026 0607 	bic.w	r6, r6, #7
 8006c26:	1d23      	adds	r3, r4, #4
 8006c28:	1af2      	subs	r2, r6, r3
 8006c2a:	d0b6      	beq.n	8006b9a <_malloc_r+0x22>
 8006c2c:	1b9b      	subs	r3, r3, r6
 8006c2e:	50a3      	str	r3, [r4, r2]
 8006c30:	e7b3      	b.n	8006b9a <_malloc_r+0x22>
 8006c32:	6862      	ldr	r2, [r4, #4]
 8006c34:	42a3      	cmp	r3, r4
 8006c36:	bf0c      	ite	eq
 8006c38:	6032      	streq	r2, [r6, #0]
 8006c3a:	605a      	strne	r2, [r3, #4]
 8006c3c:	e7ec      	b.n	8006c18 <_malloc_r+0xa0>
 8006c3e:	4623      	mov	r3, r4
 8006c40:	6864      	ldr	r4, [r4, #4]
 8006c42:	e7b2      	b.n	8006baa <_malloc_r+0x32>
 8006c44:	4634      	mov	r4, r6
 8006c46:	6876      	ldr	r6, [r6, #4]
 8006c48:	e7b9      	b.n	8006bbe <_malloc_r+0x46>
 8006c4a:	230c      	movs	r3, #12
 8006c4c:	4638      	mov	r0, r7
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	f000 f9d4 	bl	8006ffc <__malloc_unlock>
 8006c54:	e7a1      	b.n	8006b9a <_malloc_r+0x22>
 8006c56:	6025      	str	r5, [r4, #0]
 8006c58:	e7de      	b.n	8006c18 <_malloc_r+0xa0>
 8006c5a:	bf00      	nop
 8006c5c:	200004e0 	.word	0x200004e0

08006c60 <__ssputs_r>:
 8006c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c64:	688e      	ldr	r6, [r1, #8]
 8006c66:	4682      	mov	sl, r0
 8006c68:	429e      	cmp	r6, r3
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	4690      	mov	r8, r2
 8006c6e:	461f      	mov	r7, r3
 8006c70:	d838      	bhi.n	8006ce4 <__ssputs_r+0x84>
 8006c72:	898a      	ldrh	r2, [r1, #12]
 8006c74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c78:	d032      	beq.n	8006ce0 <__ssputs_r+0x80>
 8006c7a:	6825      	ldr	r5, [r4, #0]
 8006c7c:	6909      	ldr	r1, [r1, #16]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	eba5 0901 	sub.w	r9, r5, r1
 8006c84:	6965      	ldr	r5, [r4, #20]
 8006c86:	444b      	add	r3, r9
 8006c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c90:	106d      	asrs	r5, r5, #1
 8006c92:	429d      	cmp	r5, r3
 8006c94:	bf38      	it	cc
 8006c96:	461d      	movcc	r5, r3
 8006c98:	0553      	lsls	r3, r2, #21
 8006c9a:	d531      	bpl.n	8006d00 <__ssputs_r+0xa0>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7ff ff6b 	bl	8006b78 <_malloc_r>
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	b950      	cbnz	r0, 8006cbc <__ssputs_r+0x5c>
 8006ca6:	230c      	movs	r3, #12
 8006ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cac:	f8ca 3000 	str.w	r3, [sl]
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cbc:	464a      	mov	r2, r9
 8006cbe:	6921      	ldr	r1, [r4, #16]
 8006cc0:	f7ff fb4e 	bl	8006360 <memcpy>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	6126      	str	r6, [r4, #16]
 8006cd2:	444e      	add	r6, r9
 8006cd4:	6026      	str	r6, [r4, #0]
 8006cd6:	463e      	mov	r6, r7
 8006cd8:	6165      	str	r5, [r4, #20]
 8006cda:	eba5 0509 	sub.w	r5, r5, r9
 8006cde:	60a5      	str	r5, [r4, #8]
 8006ce0:	42be      	cmp	r6, r7
 8006ce2:	d900      	bls.n	8006ce6 <__ssputs_r+0x86>
 8006ce4:	463e      	mov	r6, r7
 8006ce6:	4632      	mov	r2, r6
 8006ce8:	4641      	mov	r1, r8
 8006cea:	6820      	ldr	r0, [r4, #0]
 8006cec:	f000 f966 	bl	8006fbc <memmove>
 8006cf0:	68a3      	ldr	r3, [r4, #8]
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	1b9b      	subs	r3, r3, r6
 8006cf6:	60a3      	str	r3, [r4, #8]
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	4433      	add	r3, r6
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	e7db      	b.n	8006cb8 <__ssputs_r+0x58>
 8006d00:	462a      	mov	r2, r5
 8006d02:	f000 f981 	bl	8007008 <_realloc_r>
 8006d06:	4606      	mov	r6, r0
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d1e1      	bne.n	8006cd0 <__ssputs_r+0x70>
 8006d0c:	4650      	mov	r0, sl
 8006d0e:	6921      	ldr	r1, [r4, #16]
 8006d10:	f7ff feca 	bl	8006aa8 <_free_r>
 8006d14:	e7c7      	b.n	8006ca6 <__ssputs_r+0x46>
	...

08006d18 <_svfiprintf_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	4698      	mov	r8, r3
 8006d1e:	898b      	ldrh	r3, [r1, #12]
 8006d20:	4607      	mov	r7, r0
 8006d22:	061b      	lsls	r3, r3, #24
 8006d24:	460d      	mov	r5, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	b09d      	sub	sp, #116	; 0x74
 8006d2a:	d50e      	bpl.n	8006d4a <_svfiprintf_r+0x32>
 8006d2c:	690b      	ldr	r3, [r1, #16]
 8006d2e:	b963      	cbnz	r3, 8006d4a <_svfiprintf_r+0x32>
 8006d30:	2140      	movs	r1, #64	; 0x40
 8006d32:	f7ff ff21 	bl	8006b78 <_malloc_r>
 8006d36:	6028      	str	r0, [r5, #0]
 8006d38:	6128      	str	r0, [r5, #16]
 8006d3a:	b920      	cbnz	r0, 8006d46 <_svfiprintf_r+0x2e>
 8006d3c:	230c      	movs	r3, #12
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	e0d1      	b.n	8006eea <_svfiprintf_r+0x1d2>
 8006d46:	2340      	movs	r3, #64	; 0x40
 8006d48:	616b      	str	r3, [r5, #20]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d4e:	2320      	movs	r3, #32
 8006d50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d54:	2330      	movs	r3, #48	; 0x30
 8006d56:	f04f 0901 	mov.w	r9, #1
 8006d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f04 <_svfiprintf_r+0x1ec>
 8006d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d66:	4623      	mov	r3, r4
 8006d68:	469a      	mov	sl, r3
 8006d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d6e:	b10a      	cbz	r2, 8006d74 <_svfiprintf_r+0x5c>
 8006d70:	2a25      	cmp	r2, #37	; 0x25
 8006d72:	d1f9      	bne.n	8006d68 <_svfiprintf_r+0x50>
 8006d74:	ebba 0b04 	subs.w	fp, sl, r4
 8006d78:	d00b      	beq.n	8006d92 <_svfiprintf_r+0x7a>
 8006d7a:	465b      	mov	r3, fp
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4638      	mov	r0, r7
 8006d82:	f7ff ff6d 	bl	8006c60 <__ssputs_r>
 8006d86:	3001      	adds	r0, #1
 8006d88:	f000 80aa 	beq.w	8006ee0 <_svfiprintf_r+0x1c8>
 8006d8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d8e:	445a      	add	r2, fp
 8006d90:	9209      	str	r2, [sp, #36]	; 0x24
 8006d92:	f89a 3000 	ldrb.w	r3, [sl]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80a2 	beq.w	8006ee0 <_svfiprintf_r+0x1c8>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da6:	f10a 0a01 	add.w	sl, sl, #1
 8006daa:	9304      	str	r3, [sp, #16]
 8006dac:	9307      	str	r3, [sp, #28]
 8006dae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db2:	931a      	str	r3, [sp, #104]	; 0x68
 8006db4:	4654      	mov	r4, sl
 8006db6:	2205      	movs	r2, #5
 8006db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbc:	4851      	ldr	r0, [pc, #324]	; (8006f04 <_svfiprintf_r+0x1ec>)
 8006dbe:	f7ff fac1 	bl	8006344 <memchr>
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	b9d8      	cbnz	r0, 8006dfe <_svfiprintf_r+0xe6>
 8006dc6:	06d0      	lsls	r0, r2, #27
 8006dc8:	bf44      	itt	mi
 8006dca:	2320      	movmi	r3, #32
 8006dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd0:	0711      	lsls	r1, r2, #28
 8006dd2:	bf44      	itt	mi
 8006dd4:	232b      	movmi	r3, #43	; 0x2b
 8006dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dda:	f89a 3000 	ldrb.w	r3, [sl]
 8006dde:	2b2a      	cmp	r3, #42	; 0x2a
 8006de0:	d015      	beq.n	8006e0e <_svfiprintf_r+0xf6>
 8006de2:	4654      	mov	r4, sl
 8006de4:	2000      	movs	r0, #0
 8006de6:	f04f 0c0a 	mov.w	ip, #10
 8006dea:	9a07      	ldr	r2, [sp, #28]
 8006dec:	4621      	mov	r1, r4
 8006dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df2:	3b30      	subs	r3, #48	; 0x30
 8006df4:	2b09      	cmp	r3, #9
 8006df6:	d94e      	bls.n	8006e96 <_svfiprintf_r+0x17e>
 8006df8:	b1b0      	cbz	r0, 8006e28 <_svfiprintf_r+0x110>
 8006dfa:	9207      	str	r2, [sp, #28]
 8006dfc:	e014      	b.n	8006e28 <_svfiprintf_r+0x110>
 8006dfe:	eba0 0308 	sub.w	r3, r0, r8
 8006e02:	fa09 f303 	lsl.w	r3, r9, r3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	46a2      	mov	sl, r4
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	e7d2      	b.n	8006db4 <_svfiprintf_r+0x9c>
 8006e0e:	9b03      	ldr	r3, [sp, #12]
 8006e10:	1d19      	adds	r1, r3, #4
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	9103      	str	r1, [sp, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfbb      	ittet	lt
 8006e1a:	425b      	neglt	r3, r3
 8006e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e20:	9307      	strge	r3, [sp, #28]
 8006e22:	9307      	strlt	r3, [sp, #28]
 8006e24:	bfb8      	it	lt
 8006e26:	9204      	strlt	r2, [sp, #16]
 8006e28:	7823      	ldrb	r3, [r4, #0]
 8006e2a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2c:	d10c      	bne.n	8006e48 <_svfiprintf_r+0x130>
 8006e2e:	7863      	ldrb	r3, [r4, #1]
 8006e30:	2b2a      	cmp	r3, #42	; 0x2a
 8006e32:	d135      	bne.n	8006ea0 <_svfiprintf_r+0x188>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	3402      	adds	r4, #2
 8006e38:	1d1a      	adds	r2, r3, #4
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	9203      	str	r2, [sp, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	bfb8      	it	lt
 8006e42:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e46:	9305      	str	r3, [sp, #20]
 8006e48:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006f08 <_svfiprintf_r+0x1f0>
 8006e4c:	2203      	movs	r2, #3
 8006e4e:	4650      	mov	r0, sl
 8006e50:	7821      	ldrb	r1, [r4, #0]
 8006e52:	f7ff fa77 	bl	8006344 <memchr>
 8006e56:	b140      	cbz	r0, 8006e6a <_svfiprintf_r+0x152>
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	eba0 000a 	sub.w	r0, r0, sl
 8006e5e:	fa03 f000 	lsl.w	r0, r3, r0
 8006e62:	9b04      	ldr	r3, [sp, #16]
 8006e64:	3401      	adds	r4, #1
 8006e66:	4303      	orrs	r3, r0
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e6e:	2206      	movs	r2, #6
 8006e70:	4826      	ldr	r0, [pc, #152]	; (8006f0c <_svfiprintf_r+0x1f4>)
 8006e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e76:	f7ff fa65 	bl	8006344 <memchr>
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d038      	beq.n	8006ef0 <_svfiprintf_r+0x1d8>
 8006e7e:	4b24      	ldr	r3, [pc, #144]	; (8006f10 <_svfiprintf_r+0x1f8>)
 8006e80:	bb1b      	cbnz	r3, 8006eca <_svfiprintf_r+0x1b2>
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	3307      	adds	r3, #7
 8006e86:	f023 0307 	bic.w	r3, r3, #7
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	9303      	str	r3, [sp, #12]
 8006e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e90:	4433      	add	r3, r6
 8006e92:	9309      	str	r3, [sp, #36]	; 0x24
 8006e94:	e767      	b.n	8006d66 <_svfiprintf_r+0x4e>
 8006e96:	460c      	mov	r4, r1
 8006e98:	2001      	movs	r0, #1
 8006e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e9e:	e7a5      	b.n	8006dec <_svfiprintf_r+0xd4>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f04f 0c0a 	mov.w	ip, #10
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	3401      	adds	r4, #1
 8006eaa:	9305      	str	r3, [sp, #20]
 8006eac:	4620      	mov	r0, r4
 8006eae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb2:	3a30      	subs	r2, #48	; 0x30
 8006eb4:	2a09      	cmp	r2, #9
 8006eb6:	d903      	bls.n	8006ec0 <_svfiprintf_r+0x1a8>
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d0c5      	beq.n	8006e48 <_svfiprintf_r+0x130>
 8006ebc:	9105      	str	r1, [sp, #20]
 8006ebe:	e7c3      	b.n	8006e48 <_svfiprintf_r+0x130>
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec8:	e7f0      	b.n	8006eac <_svfiprintf_r+0x194>
 8006eca:	ab03      	add	r3, sp, #12
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	462a      	mov	r2, r5
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	4b10      	ldr	r3, [pc, #64]	; (8006f14 <_svfiprintf_r+0x1fc>)
 8006ed4:	a904      	add	r1, sp, #16
 8006ed6:	f7fd ffcd 	bl	8004e74 <_printf_float>
 8006eda:	1c42      	adds	r2, r0, #1
 8006edc:	4606      	mov	r6, r0
 8006ede:	d1d6      	bne.n	8006e8e <_svfiprintf_r+0x176>
 8006ee0:	89ab      	ldrh	r3, [r5, #12]
 8006ee2:	065b      	lsls	r3, r3, #25
 8006ee4:	f53f af2c 	bmi.w	8006d40 <_svfiprintf_r+0x28>
 8006ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eea:	b01d      	add	sp, #116	; 0x74
 8006eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef0:	ab03      	add	r3, sp, #12
 8006ef2:	9300      	str	r3, [sp, #0]
 8006ef4:	462a      	mov	r2, r5
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <_svfiprintf_r+0x1fc>)
 8006efa:	a904      	add	r1, sp, #16
 8006efc:	f7fe fa56 	bl	80053ac <_printf_i>
 8006f00:	e7eb      	b.n	8006eda <_svfiprintf_r+0x1c2>
 8006f02:	bf00      	nop
 8006f04:	08007dfc 	.word	0x08007dfc
 8006f08:	08007e02 	.word	0x08007e02
 8006f0c:	08007e06 	.word	0x08007e06
 8006f10:	08004e75 	.word	0x08004e75
 8006f14:	08006c61 	.word	0x08006c61

08006f18 <_sbrk_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4d05      	ldr	r5, [pc, #20]	; (8006f34 <_sbrk_r+0x1c>)
 8006f1e:	4604      	mov	r4, r0
 8006f20:	4608      	mov	r0, r1
 8006f22:	602b      	str	r3, [r5, #0]
 8006f24:	f7fa ff6e 	bl	8001e04 <_sbrk>
 8006f28:	1c43      	adds	r3, r0, #1
 8006f2a:	d102      	bne.n	8006f32 <_sbrk_r+0x1a>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	b103      	cbz	r3, 8006f32 <_sbrk_r+0x1a>
 8006f30:	6023      	str	r3, [r4, #0]
 8006f32:	bd38      	pop	{r3, r4, r5, pc}
 8006f34:	200004e8 	.word	0x200004e8

08006f38 <__assert_func>:
 8006f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <__assert_func+0x2c>)
 8006f40:	4605      	mov	r5, r0
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68d8      	ldr	r0, [r3, #12]
 8006f46:	b14c      	cbz	r4, 8006f5c <__assert_func+0x24>
 8006f48:	4b07      	ldr	r3, [pc, #28]	; (8006f68 <__assert_func+0x30>)
 8006f4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f4e:	9100      	str	r1, [sp, #0]
 8006f50:	462b      	mov	r3, r5
 8006f52:	4906      	ldr	r1, [pc, #24]	; (8006f6c <__assert_func+0x34>)
 8006f54:	f000 f80e 	bl	8006f74 <fiprintf>
 8006f58:	f000 faaa 	bl	80074b0 <abort>
 8006f5c:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <__assert_func+0x38>)
 8006f5e:	461c      	mov	r4, r3
 8006f60:	e7f3      	b.n	8006f4a <__assert_func+0x12>
 8006f62:	bf00      	nop
 8006f64:	20000010 	.word	0x20000010
 8006f68:	08007e0d 	.word	0x08007e0d
 8006f6c:	08007e1a 	.word	0x08007e1a
 8006f70:	08007e48 	.word	0x08007e48

08006f74 <fiprintf>:
 8006f74:	b40e      	push	{r1, r2, r3}
 8006f76:	b503      	push	{r0, r1, lr}
 8006f78:	4601      	mov	r1, r0
 8006f7a:	ab03      	add	r3, sp, #12
 8006f7c:	4805      	ldr	r0, [pc, #20]	; (8006f94 <fiprintf+0x20>)
 8006f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f82:	6800      	ldr	r0, [r0, #0]
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	f000 f895 	bl	80070b4 <_vfiprintf_r>
 8006f8a:	b002      	add	sp, #8
 8006f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f90:	b003      	add	sp, #12
 8006f92:	4770      	bx	lr
 8006f94:	20000010 	.word	0x20000010

08006f98 <__ascii_mbtowc>:
 8006f98:	b082      	sub	sp, #8
 8006f9a:	b901      	cbnz	r1, 8006f9e <__ascii_mbtowc+0x6>
 8006f9c:	a901      	add	r1, sp, #4
 8006f9e:	b142      	cbz	r2, 8006fb2 <__ascii_mbtowc+0x1a>
 8006fa0:	b14b      	cbz	r3, 8006fb6 <__ascii_mbtowc+0x1e>
 8006fa2:	7813      	ldrb	r3, [r2, #0]
 8006fa4:	600b      	str	r3, [r1, #0]
 8006fa6:	7812      	ldrb	r2, [r2, #0]
 8006fa8:	1e10      	subs	r0, r2, #0
 8006faa:	bf18      	it	ne
 8006fac:	2001      	movne	r0, #1
 8006fae:	b002      	add	sp, #8
 8006fb0:	4770      	bx	lr
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	e7fb      	b.n	8006fae <__ascii_mbtowc+0x16>
 8006fb6:	f06f 0001 	mvn.w	r0, #1
 8006fba:	e7f8      	b.n	8006fae <__ascii_mbtowc+0x16>

08006fbc <memmove>:
 8006fbc:	4288      	cmp	r0, r1
 8006fbe:	b510      	push	{r4, lr}
 8006fc0:	eb01 0402 	add.w	r4, r1, r2
 8006fc4:	d902      	bls.n	8006fcc <memmove+0x10>
 8006fc6:	4284      	cmp	r4, r0
 8006fc8:	4623      	mov	r3, r4
 8006fca:	d807      	bhi.n	8006fdc <memmove+0x20>
 8006fcc:	1e43      	subs	r3, r0, #1
 8006fce:	42a1      	cmp	r1, r4
 8006fd0:	d008      	beq.n	8006fe4 <memmove+0x28>
 8006fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fda:	e7f8      	b.n	8006fce <memmove+0x12>
 8006fdc:	4601      	mov	r1, r0
 8006fde:	4402      	add	r2, r0
 8006fe0:	428a      	cmp	r2, r1
 8006fe2:	d100      	bne.n	8006fe6 <memmove+0x2a>
 8006fe4:	bd10      	pop	{r4, pc}
 8006fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fee:	e7f7      	b.n	8006fe0 <memmove+0x24>

08006ff0 <__malloc_lock>:
 8006ff0:	4801      	ldr	r0, [pc, #4]	; (8006ff8 <__malloc_lock+0x8>)
 8006ff2:	f000 bc19 	b.w	8007828 <__retarget_lock_acquire_recursive>
 8006ff6:	bf00      	nop
 8006ff8:	200004ec 	.word	0x200004ec

08006ffc <__malloc_unlock>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__malloc_unlock+0x8>)
 8006ffe:	f000 bc14 	b.w	800782a <__retarget_lock_release_recursive>
 8007002:	bf00      	nop
 8007004:	200004ec 	.word	0x200004ec

08007008 <_realloc_r>:
 8007008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700c:	4680      	mov	r8, r0
 800700e:	4614      	mov	r4, r2
 8007010:	460e      	mov	r6, r1
 8007012:	b921      	cbnz	r1, 800701e <_realloc_r+0x16>
 8007014:	4611      	mov	r1, r2
 8007016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800701a:	f7ff bdad 	b.w	8006b78 <_malloc_r>
 800701e:	b92a      	cbnz	r2, 800702c <_realloc_r+0x24>
 8007020:	f7ff fd42 	bl	8006aa8 <_free_r>
 8007024:	4625      	mov	r5, r4
 8007026:	4628      	mov	r0, r5
 8007028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702c:	f000 fc64 	bl	80078f8 <_malloc_usable_size_r>
 8007030:	4284      	cmp	r4, r0
 8007032:	4607      	mov	r7, r0
 8007034:	d802      	bhi.n	800703c <_realloc_r+0x34>
 8007036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800703a:	d812      	bhi.n	8007062 <_realloc_r+0x5a>
 800703c:	4621      	mov	r1, r4
 800703e:	4640      	mov	r0, r8
 8007040:	f7ff fd9a 	bl	8006b78 <_malloc_r>
 8007044:	4605      	mov	r5, r0
 8007046:	2800      	cmp	r0, #0
 8007048:	d0ed      	beq.n	8007026 <_realloc_r+0x1e>
 800704a:	42bc      	cmp	r4, r7
 800704c:	4622      	mov	r2, r4
 800704e:	4631      	mov	r1, r6
 8007050:	bf28      	it	cs
 8007052:	463a      	movcs	r2, r7
 8007054:	f7ff f984 	bl	8006360 <memcpy>
 8007058:	4631      	mov	r1, r6
 800705a:	4640      	mov	r0, r8
 800705c:	f7ff fd24 	bl	8006aa8 <_free_r>
 8007060:	e7e1      	b.n	8007026 <_realloc_r+0x1e>
 8007062:	4635      	mov	r5, r6
 8007064:	e7df      	b.n	8007026 <_realloc_r+0x1e>

08007066 <__sfputc_r>:
 8007066:	6893      	ldr	r3, [r2, #8]
 8007068:	b410      	push	{r4}
 800706a:	3b01      	subs	r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	6093      	str	r3, [r2, #8]
 8007070:	da07      	bge.n	8007082 <__sfputc_r+0x1c>
 8007072:	6994      	ldr	r4, [r2, #24]
 8007074:	42a3      	cmp	r3, r4
 8007076:	db01      	blt.n	800707c <__sfputc_r+0x16>
 8007078:	290a      	cmp	r1, #10
 800707a:	d102      	bne.n	8007082 <__sfputc_r+0x1c>
 800707c:	bc10      	pop	{r4}
 800707e:	f000 b949 	b.w	8007314 <__swbuf_r>
 8007082:	6813      	ldr	r3, [r2, #0]
 8007084:	1c58      	adds	r0, r3, #1
 8007086:	6010      	str	r0, [r2, #0]
 8007088:	7019      	strb	r1, [r3, #0]
 800708a:	4608      	mov	r0, r1
 800708c:	bc10      	pop	{r4}
 800708e:	4770      	bx	lr

08007090 <__sfputs_r>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	4606      	mov	r6, r0
 8007094:	460f      	mov	r7, r1
 8007096:	4614      	mov	r4, r2
 8007098:	18d5      	adds	r5, r2, r3
 800709a:	42ac      	cmp	r4, r5
 800709c:	d101      	bne.n	80070a2 <__sfputs_r+0x12>
 800709e:	2000      	movs	r0, #0
 80070a0:	e007      	b.n	80070b2 <__sfputs_r+0x22>
 80070a2:	463a      	mov	r2, r7
 80070a4:	4630      	mov	r0, r6
 80070a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070aa:	f7ff ffdc 	bl	8007066 <__sfputc_r>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	d1f3      	bne.n	800709a <__sfputs_r+0xa>
 80070b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080070b4 <_vfiprintf_r>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	460d      	mov	r5, r1
 80070ba:	4614      	mov	r4, r2
 80070bc:	4698      	mov	r8, r3
 80070be:	4606      	mov	r6, r0
 80070c0:	b09d      	sub	sp, #116	; 0x74
 80070c2:	b118      	cbz	r0, 80070cc <_vfiprintf_r+0x18>
 80070c4:	6983      	ldr	r3, [r0, #24]
 80070c6:	b90b      	cbnz	r3, 80070cc <_vfiprintf_r+0x18>
 80070c8:	f000 fb10 	bl	80076ec <__sinit>
 80070cc:	4b89      	ldr	r3, [pc, #548]	; (80072f4 <_vfiprintf_r+0x240>)
 80070ce:	429d      	cmp	r5, r3
 80070d0:	d11b      	bne.n	800710a <_vfiprintf_r+0x56>
 80070d2:	6875      	ldr	r5, [r6, #4]
 80070d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d6:	07d9      	lsls	r1, r3, #31
 80070d8:	d405      	bmi.n	80070e6 <_vfiprintf_r+0x32>
 80070da:	89ab      	ldrh	r3, [r5, #12]
 80070dc:	059a      	lsls	r2, r3, #22
 80070de:	d402      	bmi.n	80070e6 <_vfiprintf_r+0x32>
 80070e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e2:	f000 fba1 	bl	8007828 <__retarget_lock_acquire_recursive>
 80070e6:	89ab      	ldrh	r3, [r5, #12]
 80070e8:	071b      	lsls	r3, r3, #28
 80070ea:	d501      	bpl.n	80070f0 <_vfiprintf_r+0x3c>
 80070ec:	692b      	ldr	r3, [r5, #16]
 80070ee:	b9eb      	cbnz	r3, 800712c <_vfiprintf_r+0x78>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4630      	mov	r0, r6
 80070f4:	f000 f96e 	bl	80073d4 <__swsetup_r>
 80070f8:	b1c0      	cbz	r0, 800712c <_vfiprintf_r+0x78>
 80070fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070fc:	07dc      	lsls	r4, r3, #31
 80070fe:	d50e      	bpl.n	800711e <_vfiprintf_r+0x6a>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	b01d      	add	sp, #116	; 0x74
 8007106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710a:	4b7b      	ldr	r3, [pc, #492]	; (80072f8 <_vfiprintf_r+0x244>)
 800710c:	429d      	cmp	r5, r3
 800710e:	d101      	bne.n	8007114 <_vfiprintf_r+0x60>
 8007110:	68b5      	ldr	r5, [r6, #8]
 8007112:	e7df      	b.n	80070d4 <_vfiprintf_r+0x20>
 8007114:	4b79      	ldr	r3, [pc, #484]	; (80072fc <_vfiprintf_r+0x248>)
 8007116:	429d      	cmp	r5, r3
 8007118:	bf08      	it	eq
 800711a:	68f5      	ldreq	r5, [r6, #12]
 800711c:	e7da      	b.n	80070d4 <_vfiprintf_r+0x20>
 800711e:	89ab      	ldrh	r3, [r5, #12]
 8007120:	0598      	lsls	r0, r3, #22
 8007122:	d4ed      	bmi.n	8007100 <_vfiprintf_r+0x4c>
 8007124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007126:	f000 fb80 	bl	800782a <__retarget_lock_release_recursive>
 800712a:	e7e9      	b.n	8007100 <_vfiprintf_r+0x4c>
 800712c:	2300      	movs	r3, #0
 800712e:	9309      	str	r3, [sp, #36]	; 0x24
 8007130:	2320      	movs	r3, #32
 8007132:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007136:	2330      	movs	r3, #48	; 0x30
 8007138:	f04f 0901 	mov.w	r9, #1
 800713c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007140:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007300 <_vfiprintf_r+0x24c>
 8007144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007148:	4623      	mov	r3, r4
 800714a:	469a      	mov	sl, r3
 800714c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007150:	b10a      	cbz	r2, 8007156 <_vfiprintf_r+0xa2>
 8007152:	2a25      	cmp	r2, #37	; 0x25
 8007154:	d1f9      	bne.n	800714a <_vfiprintf_r+0x96>
 8007156:	ebba 0b04 	subs.w	fp, sl, r4
 800715a:	d00b      	beq.n	8007174 <_vfiprintf_r+0xc0>
 800715c:	465b      	mov	r3, fp
 800715e:	4622      	mov	r2, r4
 8007160:	4629      	mov	r1, r5
 8007162:	4630      	mov	r0, r6
 8007164:	f7ff ff94 	bl	8007090 <__sfputs_r>
 8007168:	3001      	adds	r0, #1
 800716a:	f000 80aa 	beq.w	80072c2 <_vfiprintf_r+0x20e>
 800716e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007170:	445a      	add	r2, fp
 8007172:	9209      	str	r2, [sp, #36]	; 0x24
 8007174:	f89a 3000 	ldrb.w	r3, [sl]
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 80a2 	beq.w	80072c2 <_vfiprintf_r+0x20e>
 800717e:	2300      	movs	r3, #0
 8007180:	f04f 32ff 	mov.w	r2, #4294967295
 8007184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007188:	f10a 0a01 	add.w	sl, sl, #1
 800718c:	9304      	str	r3, [sp, #16]
 800718e:	9307      	str	r3, [sp, #28]
 8007190:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007194:	931a      	str	r3, [sp, #104]	; 0x68
 8007196:	4654      	mov	r4, sl
 8007198:	2205      	movs	r2, #5
 800719a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719e:	4858      	ldr	r0, [pc, #352]	; (8007300 <_vfiprintf_r+0x24c>)
 80071a0:	f7ff f8d0 	bl	8006344 <memchr>
 80071a4:	9a04      	ldr	r2, [sp, #16]
 80071a6:	b9d8      	cbnz	r0, 80071e0 <_vfiprintf_r+0x12c>
 80071a8:	06d1      	lsls	r1, r2, #27
 80071aa:	bf44      	itt	mi
 80071ac:	2320      	movmi	r3, #32
 80071ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b2:	0713      	lsls	r3, r2, #28
 80071b4:	bf44      	itt	mi
 80071b6:	232b      	movmi	r3, #43	; 0x2b
 80071b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071bc:	f89a 3000 	ldrb.w	r3, [sl]
 80071c0:	2b2a      	cmp	r3, #42	; 0x2a
 80071c2:	d015      	beq.n	80071f0 <_vfiprintf_r+0x13c>
 80071c4:	4654      	mov	r4, sl
 80071c6:	2000      	movs	r0, #0
 80071c8:	f04f 0c0a 	mov.w	ip, #10
 80071cc:	9a07      	ldr	r2, [sp, #28]
 80071ce:	4621      	mov	r1, r4
 80071d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071d4:	3b30      	subs	r3, #48	; 0x30
 80071d6:	2b09      	cmp	r3, #9
 80071d8:	d94e      	bls.n	8007278 <_vfiprintf_r+0x1c4>
 80071da:	b1b0      	cbz	r0, 800720a <_vfiprintf_r+0x156>
 80071dc:	9207      	str	r2, [sp, #28]
 80071de:	e014      	b.n	800720a <_vfiprintf_r+0x156>
 80071e0:	eba0 0308 	sub.w	r3, r0, r8
 80071e4:	fa09 f303 	lsl.w	r3, r9, r3
 80071e8:	4313      	orrs	r3, r2
 80071ea:	46a2      	mov	sl, r4
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	e7d2      	b.n	8007196 <_vfiprintf_r+0xe2>
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	1d19      	adds	r1, r3, #4
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	9103      	str	r1, [sp, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfbb      	ittet	lt
 80071fc:	425b      	neglt	r3, r3
 80071fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007202:	9307      	strge	r3, [sp, #28]
 8007204:	9307      	strlt	r3, [sp, #28]
 8007206:	bfb8      	it	lt
 8007208:	9204      	strlt	r2, [sp, #16]
 800720a:	7823      	ldrb	r3, [r4, #0]
 800720c:	2b2e      	cmp	r3, #46	; 0x2e
 800720e:	d10c      	bne.n	800722a <_vfiprintf_r+0x176>
 8007210:	7863      	ldrb	r3, [r4, #1]
 8007212:	2b2a      	cmp	r3, #42	; 0x2a
 8007214:	d135      	bne.n	8007282 <_vfiprintf_r+0x1ce>
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	3402      	adds	r4, #2
 800721a:	1d1a      	adds	r2, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	9203      	str	r2, [sp, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	bfb8      	it	lt
 8007224:	f04f 33ff 	movlt.w	r3, #4294967295
 8007228:	9305      	str	r3, [sp, #20]
 800722a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007304 <_vfiprintf_r+0x250>
 800722e:	2203      	movs	r2, #3
 8007230:	4650      	mov	r0, sl
 8007232:	7821      	ldrb	r1, [r4, #0]
 8007234:	f7ff f886 	bl	8006344 <memchr>
 8007238:	b140      	cbz	r0, 800724c <_vfiprintf_r+0x198>
 800723a:	2340      	movs	r3, #64	; 0x40
 800723c:	eba0 000a 	sub.w	r0, r0, sl
 8007240:	fa03 f000 	lsl.w	r0, r3, r0
 8007244:	9b04      	ldr	r3, [sp, #16]
 8007246:	3401      	adds	r4, #1
 8007248:	4303      	orrs	r3, r0
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007250:	2206      	movs	r2, #6
 8007252:	482d      	ldr	r0, [pc, #180]	; (8007308 <_vfiprintf_r+0x254>)
 8007254:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007258:	f7ff f874 	bl	8006344 <memchr>
 800725c:	2800      	cmp	r0, #0
 800725e:	d03f      	beq.n	80072e0 <_vfiprintf_r+0x22c>
 8007260:	4b2a      	ldr	r3, [pc, #168]	; (800730c <_vfiprintf_r+0x258>)
 8007262:	bb1b      	cbnz	r3, 80072ac <_vfiprintf_r+0x1f8>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	3307      	adds	r3, #7
 8007268:	f023 0307 	bic.w	r3, r3, #7
 800726c:	3308      	adds	r3, #8
 800726e:	9303      	str	r3, [sp, #12]
 8007270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007272:	443b      	add	r3, r7
 8007274:	9309      	str	r3, [sp, #36]	; 0x24
 8007276:	e767      	b.n	8007148 <_vfiprintf_r+0x94>
 8007278:	460c      	mov	r4, r1
 800727a:	2001      	movs	r0, #1
 800727c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007280:	e7a5      	b.n	80071ce <_vfiprintf_r+0x11a>
 8007282:	2300      	movs	r3, #0
 8007284:	f04f 0c0a 	mov.w	ip, #10
 8007288:	4619      	mov	r1, r3
 800728a:	3401      	adds	r4, #1
 800728c:	9305      	str	r3, [sp, #20]
 800728e:	4620      	mov	r0, r4
 8007290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007294:	3a30      	subs	r2, #48	; 0x30
 8007296:	2a09      	cmp	r2, #9
 8007298:	d903      	bls.n	80072a2 <_vfiprintf_r+0x1ee>
 800729a:	2b00      	cmp	r3, #0
 800729c:	d0c5      	beq.n	800722a <_vfiprintf_r+0x176>
 800729e:	9105      	str	r1, [sp, #20]
 80072a0:	e7c3      	b.n	800722a <_vfiprintf_r+0x176>
 80072a2:	4604      	mov	r4, r0
 80072a4:	2301      	movs	r3, #1
 80072a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80072aa:	e7f0      	b.n	800728e <_vfiprintf_r+0x1da>
 80072ac:	ab03      	add	r3, sp, #12
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	462a      	mov	r2, r5
 80072b2:	4630      	mov	r0, r6
 80072b4:	4b16      	ldr	r3, [pc, #88]	; (8007310 <_vfiprintf_r+0x25c>)
 80072b6:	a904      	add	r1, sp, #16
 80072b8:	f7fd fddc 	bl	8004e74 <_printf_float>
 80072bc:	4607      	mov	r7, r0
 80072be:	1c78      	adds	r0, r7, #1
 80072c0:	d1d6      	bne.n	8007270 <_vfiprintf_r+0x1bc>
 80072c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072c4:	07d9      	lsls	r1, r3, #31
 80072c6:	d405      	bmi.n	80072d4 <_vfiprintf_r+0x220>
 80072c8:	89ab      	ldrh	r3, [r5, #12]
 80072ca:	059a      	lsls	r2, r3, #22
 80072cc:	d402      	bmi.n	80072d4 <_vfiprintf_r+0x220>
 80072ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072d0:	f000 faab 	bl	800782a <__retarget_lock_release_recursive>
 80072d4:	89ab      	ldrh	r3, [r5, #12]
 80072d6:	065b      	lsls	r3, r3, #25
 80072d8:	f53f af12 	bmi.w	8007100 <_vfiprintf_r+0x4c>
 80072dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072de:	e711      	b.n	8007104 <_vfiprintf_r+0x50>
 80072e0:	ab03      	add	r3, sp, #12
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	462a      	mov	r2, r5
 80072e6:	4630      	mov	r0, r6
 80072e8:	4b09      	ldr	r3, [pc, #36]	; (8007310 <_vfiprintf_r+0x25c>)
 80072ea:	a904      	add	r1, sp, #16
 80072ec:	f7fe f85e 	bl	80053ac <_printf_i>
 80072f0:	e7e4      	b.n	80072bc <_vfiprintf_r+0x208>
 80072f2:	bf00      	nop
 80072f4:	08007f74 	.word	0x08007f74
 80072f8:	08007f94 	.word	0x08007f94
 80072fc:	08007f54 	.word	0x08007f54
 8007300:	08007dfc 	.word	0x08007dfc
 8007304:	08007e02 	.word	0x08007e02
 8007308:	08007e06 	.word	0x08007e06
 800730c:	08004e75 	.word	0x08004e75
 8007310:	08007091 	.word	0x08007091

08007314 <__swbuf_r>:
 8007314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007316:	460e      	mov	r6, r1
 8007318:	4614      	mov	r4, r2
 800731a:	4605      	mov	r5, r0
 800731c:	b118      	cbz	r0, 8007326 <__swbuf_r+0x12>
 800731e:	6983      	ldr	r3, [r0, #24]
 8007320:	b90b      	cbnz	r3, 8007326 <__swbuf_r+0x12>
 8007322:	f000 f9e3 	bl	80076ec <__sinit>
 8007326:	4b21      	ldr	r3, [pc, #132]	; (80073ac <__swbuf_r+0x98>)
 8007328:	429c      	cmp	r4, r3
 800732a:	d12b      	bne.n	8007384 <__swbuf_r+0x70>
 800732c:	686c      	ldr	r4, [r5, #4]
 800732e:	69a3      	ldr	r3, [r4, #24]
 8007330:	60a3      	str	r3, [r4, #8]
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	071a      	lsls	r2, r3, #28
 8007336:	d52f      	bpl.n	8007398 <__swbuf_r+0x84>
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	b36b      	cbz	r3, 8007398 <__swbuf_r+0x84>
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	6820      	ldr	r0, [r4, #0]
 8007340:	b2f6      	uxtb	r6, r6
 8007342:	1ac0      	subs	r0, r0, r3
 8007344:	6963      	ldr	r3, [r4, #20]
 8007346:	4637      	mov	r7, r6
 8007348:	4283      	cmp	r3, r0
 800734a:	dc04      	bgt.n	8007356 <__swbuf_r+0x42>
 800734c:	4621      	mov	r1, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f000 f938 	bl	80075c4 <_fflush_r>
 8007354:	bb30      	cbnz	r0, 80073a4 <__swbuf_r+0x90>
 8007356:	68a3      	ldr	r3, [r4, #8]
 8007358:	3001      	adds	r0, #1
 800735a:	3b01      	subs	r3, #1
 800735c:	60a3      	str	r3, [r4, #8]
 800735e:	6823      	ldr	r3, [r4, #0]
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	6022      	str	r2, [r4, #0]
 8007364:	701e      	strb	r6, [r3, #0]
 8007366:	6963      	ldr	r3, [r4, #20]
 8007368:	4283      	cmp	r3, r0
 800736a:	d004      	beq.n	8007376 <__swbuf_r+0x62>
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	07db      	lsls	r3, r3, #31
 8007370:	d506      	bpl.n	8007380 <__swbuf_r+0x6c>
 8007372:	2e0a      	cmp	r6, #10
 8007374:	d104      	bne.n	8007380 <__swbuf_r+0x6c>
 8007376:	4621      	mov	r1, r4
 8007378:	4628      	mov	r0, r5
 800737a:	f000 f923 	bl	80075c4 <_fflush_r>
 800737e:	b988      	cbnz	r0, 80073a4 <__swbuf_r+0x90>
 8007380:	4638      	mov	r0, r7
 8007382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007384:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <__swbuf_r+0x9c>)
 8007386:	429c      	cmp	r4, r3
 8007388:	d101      	bne.n	800738e <__swbuf_r+0x7a>
 800738a:	68ac      	ldr	r4, [r5, #8]
 800738c:	e7cf      	b.n	800732e <__swbuf_r+0x1a>
 800738e:	4b09      	ldr	r3, [pc, #36]	; (80073b4 <__swbuf_r+0xa0>)
 8007390:	429c      	cmp	r4, r3
 8007392:	bf08      	it	eq
 8007394:	68ec      	ldreq	r4, [r5, #12]
 8007396:	e7ca      	b.n	800732e <__swbuf_r+0x1a>
 8007398:	4621      	mov	r1, r4
 800739a:	4628      	mov	r0, r5
 800739c:	f000 f81a 	bl	80073d4 <__swsetup_r>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d0cb      	beq.n	800733c <__swbuf_r+0x28>
 80073a4:	f04f 37ff 	mov.w	r7, #4294967295
 80073a8:	e7ea      	b.n	8007380 <__swbuf_r+0x6c>
 80073aa:	bf00      	nop
 80073ac:	08007f74 	.word	0x08007f74
 80073b0:	08007f94 	.word	0x08007f94
 80073b4:	08007f54 	.word	0x08007f54

080073b8 <__ascii_wctomb>:
 80073b8:	4603      	mov	r3, r0
 80073ba:	4608      	mov	r0, r1
 80073bc:	b141      	cbz	r1, 80073d0 <__ascii_wctomb+0x18>
 80073be:	2aff      	cmp	r2, #255	; 0xff
 80073c0:	d904      	bls.n	80073cc <__ascii_wctomb+0x14>
 80073c2:	228a      	movs	r2, #138	; 0x8a
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	4770      	bx	lr
 80073cc:	2001      	movs	r0, #1
 80073ce:	700a      	strb	r2, [r1, #0]
 80073d0:	4770      	bx	lr
	...

080073d4 <__swsetup_r>:
 80073d4:	4b32      	ldr	r3, [pc, #200]	; (80074a0 <__swsetup_r+0xcc>)
 80073d6:	b570      	push	{r4, r5, r6, lr}
 80073d8:	681d      	ldr	r5, [r3, #0]
 80073da:	4606      	mov	r6, r0
 80073dc:	460c      	mov	r4, r1
 80073de:	b125      	cbz	r5, 80073ea <__swsetup_r+0x16>
 80073e0:	69ab      	ldr	r3, [r5, #24]
 80073e2:	b913      	cbnz	r3, 80073ea <__swsetup_r+0x16>
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 f981 	bl	80076ec <__sinit>
 80073ea:	4b2e      	ldr	r3, [pc, #184]	; (80074a4 <__swsetup_r+0xd0>)
 80073ec:	429c      	cmp	r4, r3
 80073ee:	d10f      	bne.n	8007410 <__swsetup_r+0x3c>
 80073f0:	686c      	ldr	r4, [r5, #4]
 80073f2:	89a3      	ldrh	r3, [r4, #12]
 80073f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f8:	0719      	lsls	r1, r3, #28
 80073fa:	d42c      	bmi.n	8007456 <__swsetup_r+0x82>
 80073fc:	06dd      	lsls	r5, r3, #27
 80073fe:	d411      	bmi.n	8007424 <__swsetup_r+0x50>
 8007400:	2309      	movs	r3, #9
 8007402:	6033      	str	r3, [r6, #0]
 8007404:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007408:	f04f 30ff 	mov.w	r0, #4294967295
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	e03e      	b.n	800748e <__swsetup_r+0xba>
 8007410:	4b25      	ldr	r3, [pc, #148]	; (80074a8 <__swsetup_r+0xd4>)
 8007412:	429c      	cmp	r4, r3
 8007414:	d101      	bne.n	800741a <__swsetup_r+0x46>
 8007416:	68ac      	ldr	r4, [r5, #8]
 8007418:	e7eb      	b.n	80073f2 <__swsetup_r+0x1e>
 800741a:	4b24      	ldr	r3, [pc, #144]	; (80074ac <__swsetup_r+0xd8>)
 800741c:	429c      	cmp	r4, r3
 800741e:	bf08      	it	eq
 8007420:	68ec      	ldreq	r4, [r5, #12]
 8007422:	e7e6      	b.n	80073f2 <__swsetup_r+0x1e>
 8007424:	0758      	lsls	r0, r3, #29
 8007426:	d512      	bpl.n	800744e <__swsetup_r+0x7a>
 8007428:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800742a:	b141      	cbz	r1, 800743e <__swsetup_r+0x6a>
 800742c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007430:	4299      	cmp	r1, r3
 8007432:	d002      	beq.n	800743a <__swsetup_r+0x66>
 8007434:	4630      	mov	r0, r6
 8007436:	f7ff fb37 	bl	8006aa8 <_free_r>
 800743a:	2300      	movs	r3, #0
 800743c:	6363      	str	r3, [r4, #52]	; 0x34
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007444:	81a3      	strh	r3, [r4, #12]
 8007446:	2300      	movs	r3, #0
 8007448:	6063      	str	r3, [r4, #4]
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	f043 0308 	orr.w	r3, r3, #8
 8007454:	81a3      	strh	r3, [r4, #12]
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	b94b      	cbnz	r3, 800746e <__swsetup_r+0x9a>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007464:	d003      	beq.n	800746e <__swsetup_r+0x9a>
 8007466:	4621      	mov	r1, r4
 8007468:	4630      	mov	r0, r6
 800746a:	f000 fa05 	bl	8007878 <__smakebuf_r>
 800746e:	89a0      	ldrh	r0, [r4, #12]
 8007470:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007474:	f010 0301 	ands.w	r3, r0, #1
 8007478:	d00a      	beq.n	8007490 <__swsetup_r+0xbc>
 800747a:	2300      	movs	r3, #0
 800747c:	60a3      	str	r3, [r4, #8]
 800747e:	6963      	ldr	r3, [r4, #20]
 8007480:	425b      	negs	r3, r3
 8007482:	61a3      	str	r3, [r4, #24]
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	b943      	cbnz	r3, 800749a <__swsetup_r+0xc6>
 8007488:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800748c:	d1ba      	bne.n	8007404 <__swsetup_r+0x30>
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	0781      	lsls	r1, r0, #30
 8007492:	bf58      	it	pl
 8007494:	6963      	ldrpl	r3, [r4, #20]
 8007496:	60a3      	str	r3, [r4, #8]
 8007498:	e7f4      	b.n	8007484 <__swsetup_r+0xb0>
 800749a:	2000      	movs	r0, #0
 800749c:	e7f7      	b.n	800748e <__swsetup_r+0xba>
 800749e:	bf00      	nop
 80074a0:	20000010 	.word	0x20000010
 80074a4:	08007f74 	.word	0x08007f74
 80074a8:	08007f94 	.word	0x08007f94
 80074ac:	08007f54 	.word	0x08007f54

080074b0 <abort>:
 80074b0:	2006      	movs	r0, #6
 80074b2:	b508      	push	{r3, lr}
 80074b4:	f000 fa50 	bl	8007958 <raise>
 80074b8:	2001      	movs	r0, #1
 80074ba:	f7fa fc30 	bl	8001d1e <_exit>
	...

080074c0 <__sflush_r>:
 80074c0:	898a      	ldrh	r2, [r1, #12]
 80074c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c4:	4605      	mov	r5, r0
 80074c6:	0710      	lsls	r0, r2, #28
 80074c8:	460c      	mov	r4, r1
 80074ca:	d457      	bmi.n	800757c <__sflush_r+0xbc>
 80074cc:	684b      	ldr	r3, [r1, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dc04      	bgt.n	80074dc <__sflush_r+0x1c>
 80074d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dc01      	bgt.n	80074dc <__sflush_r+0x1c>
 80074d8:	2000      	movs	r0, #0
 80074da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074de:	2e00      	cmp	r6, #0
 80074e0:	d0fa      	beq.n	80074d8 <__sflush_r+0x18>
 80074e2:	2300      	movs	r3, #0
 80074e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074e8:	682f      	ldr	r7, [r5, #0]
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	d032      	beq.n	8007554 <__sflush_r+0x94>
 80074ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	075a      	lsls	r2, r3, #29
 80074f4:	d505      	bpl.n	8007502 <__sflush_r+0x42>
 80074f6:	6863      	ldr	r3, [r4, #4]
 80074f8:	1ac0      	subs	r0, r0, r3
 80074fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074fc:	b10b      	cbz	r3, 8007502 <__sflush_r+0x42>
 80074fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007500:	1ac0      	subs	r0, r0, r3
 8007502:	2300      	movs	r3, #0
 8007504:	4602      	mov	r2, r0
 8007506:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007508:	4628      	mov	r0, r5
 800750a:	6a21      	ldr	r1, [r4, #32]
 800750c:	47b0      	blx	r6
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	d106      	bne.n	8007522 <__sflush_r+0x62>
 8007514:	6829      	ldr	r1, [r5, #0]
 8007516:	291d      	cmp	r1, #29
 8007518:	d82c      	bhi.n	8007574 <__sflush_r+0xb4>
 800751a:	4a29      	ldr	r2, [pc, #164]	; (80075c0 <__sflush_r+0x100>)
 800751c:	40ca      	lsrs	r2, r1
 800751e:	07d6      	lsls	r6, r2, #31
 8007520:	d528      	bpl.n	8007574 <__sflush_r+0xb4>
 8007522:	2200      	movs	r2, #0
 8007524:	6062      	str	r2, [r4, #4]
 8007526:	6922      	ldr	r2, [r4, #16]
 8007528:	04d9      	lsls	r1, r3, #19
 800752a:	6022      	str	r2, [r4, #0]
 800752c:	d504      	bpl.n	8007538 <__sflush_r+0x78>
 800752e:	1c42      	adds	r2, r0, #1
 8007530:	d101      	bne.n	8007536 <__sflush_r+0x76>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	b903      	cbnz	r3, 8007538 <__sflush_r+0x78>
 8007536:	6560      	str	r0, [r4, #84]	; 0x54
 8007538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800753a:	602f      	str	r7, [r5, #0]
 800753c:	2900      	cmp	r1, #0
 800753e:	d0cb      	beq.n	80074d8 <__sflush_r+0x18>
 8007540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007544:	4299      	cmp	r1, r3
 8007546:	d002      	beq.n	800754e <__sflush_r+0x8e>
 8007548:	4628      	mov	r0, r5
 800754a:	f7ff faad 	bl	8006aa8 <_free_r>
 800754e:	2000      	movs	r0, #0
 8007550:	6360      	str	r0, [r4, #52]	; 0x34
 8007552:	e7c2      	b.n	80074da <__sflush_r+0x1a>
 8007554:	6a21      	ldr	r1, [r4, #32]
 8007556:	2301      	movs	r3, #1
 8007558:	4628      	mov	r0, r5
 800755a:	47b0      	blx	r6
 800755c:	1c41      	adds	r1, r0, #1
 800755e:	d1c7      	bne.n	80074f0 <__sflush_r+0x30>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d0c4      	beq.n	80074f0 <__sflush_r+0x30>
 8007566:	2b1d      	cmp	r3, #29
 8007568:	d001      	beq.n	800756e <__sflush_r+0xae>
 800756a:	2b16      	cmp	r3, #22
 800756c:	d101      	bne.n	8007572 <__sflush_r+0xb2>
 800756e:	602f      	str	r7, [r5, #0]
 8007570:	e7b2      	b.n	80074d8 <__sflush_r+0x18>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007578:	81a3      	strh	r3, [r4, #12]
 800757a:	e7ae      	b.n	80074da <__sflush_r+0x1a>
 800757c:	690f      	ldr	r7, [r1, #16]
 800757e:	2f00      	cmp	r7, #0
 8007580:	d0aa      	beq.n	80074d8 <__sflush_r+0x18>
 8007582:	0793      	lsls	r3, r2, #30
 8007584:	bf18      	it	ne
 8007586:	2300      	movne	r3, #0
 8007588:	680e      	ldr	r6, [r1, #0]
 800758a:	bf08      	it	eq
 800758c:	694b      	ldreq	r3, [r1, #20]
 800758e:	1bf6      	subs	r6, r6, r7
 8007590:	600f      	str	r7, [r1, #0]
 8007592:	608b      	str	r3, [r1, #8]
 8007594:	2e00      	cmp	r6, #0
 8007596:	dd9f      	ble.n	80074d8 <__sflush_r+0x18>
 8007598:	4633      	mov	r3, r6
 800759a:	463a      	mov	r2, r7
 800759c:	4628      	mov	r0, r5
 800759e:	6a21      	ldr	r1, [r4, #32]
 80075a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80075a4:	47e0      	blx	ip
 80075a6:	2800      	cmp	r0, #0
 80075a8:	dc06      	bgt.n	80075b8 <__sflush_r+0xf8>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f04f 30ff 	mov.w	r0, #4294967295
 80075b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	e790      	b.n	80074da <__sflush_r+0x1a>
 80075b8:	4407      	add	r7, r0
 80075ba:	1a36      	subs	r6, r6, r0
 80075bc:	e7ea      	b.n	8007594 <__sflush_r+0xd4>
 80075be:	bf00      	nop
 80075c0:	20400001 	.word	0x20400001

080075c4 <_fflush_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	690b      	ldr	r3, [r1, #16]
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b913      	cbnz	r3, 80075d4 <_fflush_r+0x10>
 80075ce:	2500      	movs	r5, #0
 80075d0:	4628      	mov	r0, r5
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	b118      	cbz	r0, 80075de <_fflush_r+0x1a>
 80075d6:	6983      	ldr	r3, [r0, #24]
 80075d8:	b90b      	cbnz	r3, 80075de <_fflush_r+0x1a>
 80075da:	f000 f887 	bl	80076ec <__sinit>
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <_fflush_r+0x6c>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	d11b      	bne.n	800761c <_fflush_r+0x58>
 80075e4:	686c      	ldr	r4, [r5, #4]
 80075e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0ef      	beq.n	80075ce <_fflush_r+0xa>
 80075ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075f0:	07d0      	lsls	r0, r2, #31
 80075f2:	d404      	bmi.n	80075fe <_fflush_r+0x3a>
 80075f4:	0599      	lsls	r1, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_fflush_r+0x3a>
 80075f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075fa:	f000 f915 	bl	8007828 <__retarget_lock_acquire_recursive>
 80075fe:	4628      	mov	r0, r5
 8007600:	4621      	mov	r1, r4
 8007602:	f7ff ff5d 	bl	80074c0 <__sflush_r>
 8007606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007608:	4605      	mov	r5, r0
 800760a:	07da      	lsls	r2, r3, #31
 800760c:	d4e0      	bmi.n	80075d0 <_fflush_r+0xc>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	059b      	lsls	r3, r3, #22
 8007612:	d4dd      	bmi.n	80075d0 <_fflush_r+0xc>
 8007614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007616:	f000 f908 	bl	800782a <__retarget_lock_release_recursive>
 800761a:	e7d9      	b.n	80075d0 <_fflush_r+0xc>
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <_fflush_r+0x70>)
 800761e:	429c      	cmp	r4, r3
 8007620:	d101      	bne.n	8007626 <_fflush_r+0x62>
 8007622:	68ac      	ldr	r4, [r5, #8]
 8007624:	e7df      	b.n	80075e6 <_fflush_r+0x22>
 8007626:	4b04      	ldr	r3, [pc, #16]	; (8007638 <_fflush_r+0x74>)
 8007628:	429c      	cmp	r4, r3
 800762a:	bf08      	it	eq
 800762c:	68ec      	ldreq	r4, [r5, #12]
 800762e:	e7da      	b.n	80075e6 <_fflush_r+0x22>
 8007630:	08007f74 	.word	0x08007f74
 8007634:	08007f94 	.word	0x08007f94
 8007638:	08007f54 	.word	0x08007f54

0800763c <std>:
 800763c:	2300      	movs	r3, #0
 800763e:	b510      	push	{r4, lr}
 8007640:	4604      	mov	r4, r0
 8007642:	e9c0 3300 	strd	r3, r3, [r0]
 8007646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800764a:	6083      	str	r3, [r0, #8]
 800764c:	8181      	strh	r1, [r0, #12]
 800764e:	6643      	str	r3, [r0, #100]	; 0x64
 8007650:	81c2      	strh	r2, [r0, #14]
 8007652:	6183      	str	r3, [r0, #24]
 8007654:	4619      	mov	r1, r3
 8007656:	2208      	movs	r2, #8
 8007658:	305c      	adds	r0, #92	; 0x5c
 800765a:	f7fd fb65 	bl	8004d28 <memset>
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <std+0x38>)
 8007660:	6224      	str	r4, [r4, #32]
 8007662:	6263      	str	r3, [r4, #36]	; 0x24
 8007664:	4b04      	ldr	r3, [pc, #16]	; (8007678 <std+0x3c>)
 8007666:	62a3      	str	r3, [r4, #40]	; 0x28
 8007668:	4b04      	ldr	r3, [pc, #16]	; (800767c <std+0x40>)
 800766a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800766c:	4b04      	ldr	r3, [pc, #16]	; (8007680 <std+0x44>)
 800766e:	6323      	str	r3, [r4, #48]	; 0x30
 8007670:	bd10      	pop	{r4, pc}
 8007672:	bf00      	nop
 8007674:	08007991 	.word	0x08007991
 8007678:	080079b3 	.word	0x080079b3
 800767c:	080079eb 	.word	0x080079eb
 8007680:	08007a0f 	.word	0x08007a0f

08007684 <_cleanup_r>:
 8007684:	4901      	ldr	r1, [pc, #4]	; (800768c <_cleanup_r+0x8>)
 8007686:	f000 b8af 	b.w	80077e8 <_fwalk_reent>
 800768a:	bf00      	nop
 800768c:	080075c5 	.word	0x080075c5

08007690 <__sfmoreglue>:
 8007690:	2268      	movs	r2, #104	; 0x68
 8007692:	b570      	push	{r4, r5, r6, lr}
 8007694:	1e4d      	subs	r5, r1, #1
 8007696:	4355      	muls	r5, r2
 8007698:	460e      	mov	r6, r1
 800769a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800769e:	f7ff fa6b 	bl	8006b78 <_malloc_r>
 80076a2:	4604      	mov	r4, r0
 80076a4:	b140      	cbz	r0, 80076b8 <__sfmoreglue+0x28>
 80076a6:	2100      	movs	r1, #0
 80076a8:	e9c0 1600 	strd	r1, r6, [r0]
 80076ac:	300c      	adds	r0, #12
 80076ae:	60a0      	str	r0, [r4, #8]
 80076b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076b4:	f7fd fb38 	bl	8004d28 <memset>
 80076b8:	4620      	mov	r0, r4
 80076ba:	bd70      	pop	{r4, r5, r6, pc}

080076bc <__sfp_lock_acquire>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__sfp_lock_acquire+0x8>)
 80076be:	f000 b8b3 	b.w	8007828 <__retarget_lock_acquire_recursive>
 80076c2:	bf00      	nop
 80076c4:	200004ed 	.word	0x200004ed

080076c8 <__sfp_lock_release>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__sfp_lock_release+0x8>)
 80076ca:	f000 b8ae 	b.w	800782a <__retarget_lock_release_recursive>
 80076ce:	bf00      	nop
 80076d0:	200004ed 	.word	0x200004ed

080076d4 <__sinit_lock_acquire>:
 80076d4:	4801      	ldr	r0, [pc, #4]	; (80076dc <__sinit_lock_acquire+0x8>)
 80076d6:	f000 b8a7 	b.w	8007828 <__retarget_lock_acquire_recursive>
 80076da:	bf00      	nop
 80076dc:	200004ee 	.word	0x200004ee

080076e0 <__sinit_lock_release>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__sinit_lock_release+0x8>)
 80076e2:	f000 b8a2 	b.w	800782a <__retarget_lock_release_recursive>
 80076e6:	bf00      	nop
 80076e8:	200004ee 	.word	0x200004ee

080076ec <__sinit>:
 80076ec:	b510      	push	{r4, lr}
 80076ee:	4604      	mov	r4, r0
 80076f0:	f7ff fff0 	bl	80076d4 <__sinit_lock_acquire>
 80076f4:	69a3      	ldr	r3, [r4, #24]
 80076f6:	b11b      	cbz	r3, 8007700 <__sinit+0x14>
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fc:	f7ff bff0 	b.w	80076e0 <__sinit_lock_release>
 8007700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007704:	6523      	str	r3, [r4, #80]	; 0x50
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <__sinit+0x68>)
 8007708:	4a13      	ldr	r2, [pc, #76]	; (8007758 <__sinit+0x6c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	62a2      	str	r2, [r4, #40]	; 0x28
 800770e:	42a3      	cmp	r3, r4
 8007710:	bf08      	it	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	4620      	mov	r0, r4
 8007716:	bf08      	it	eq
 8007718:	61a3      	streq	r3, [r4, #24]
 800771a:	f000 f81f 	bl	800775c <__sfp>
 800771e:	6060      	str	r0, [r4, #4]
 8007720:	4620      	mov	r0, r4
 8007722:	f000 f81b 	bl	800775c <__sfp>
 8007726:	60a0      	str	r0, [r4, #8]
 8007728:	4620      	mov	r0, r4
 800772a:	f000 f817 	bl	800775c <__sfp>
 800772e:	2200      	movs	r2, #0
 8007730:	2104      	movs	r1, #4
 8007732:	60e0      	str	r0, [r4, #12]
 8007734:	6860      	ldr	r0, [r4, #4]
 8007736:	f7ff ff81 	bl	800763c <std>
 800773a:	2201      	movs	r2, #1
 800773c:	2109      	movs	r1, #9
 800773e:	68a0      	ldr	r0, [r4, #8]
 8007740:	f7ff ff7c 	bl	800763c <std>
 8007744:	2202      	movs	r2, #2
 8007746:	2112      	movs	r1, #18
 8007748:	68e0      	ldr	r0, [r4, #12]
 800774a:	f7ff ff77 	bl	800763c <std>
 800774e:	2301      	movs	r3, #1
 8007750:	61a3      	str	r3, [r4, #24]
 8007752:	e7d1      	b.n	80076f8 <__sinit+0xc>
 8007754:	08007bdc 	.word	0x08007bdc
 8007758:	08007685 	.word	0x08007685

0800775c <__sfp>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	4607      	mov	r7, r0
 8007760:	f7ff ffac 	bl	80076bc <__sfp_lock_acquire>
 8007764:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <__sfp+0x84>)
 8007766:	681e      	ldr	r6, [r3, #0]
 8007768:	69b3      	ldr	r3, [r6, #24]
 800776a:	b913      	cbnz	r3, 8007772 <__sfp+0x16>
 800776c:	4630      	mov	r0, r6
 800776e:	f7ff ffbd 	bl	80076ec <__sinit>
 8007772:	3648      	adds	r6, #72	; 0x48
 8007774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007778:	3b01      	subs	r3, #1
 800777a:	d503      	bpl.n	8007784 <__sfp+0x28>
 800777c:	6833      	ldr	r3, [r6, #0]
 800777e:	b30b      	cbz	r3, 80077c4 <__sfp+0x68>
 8007780:	6836      	ldr	r6, [r6, #0]
 8007782:	e7f7      	b.n	8007774 <__sfp+0x18>
 8007784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007788:	b9d5      	cbnz	r5, 80077c0 <__sfp+0x64>
 800778a:	4b16      	ldr	r3, [pc, #88]	; (80077e4 <__sfp+0x88>)
 800778c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007790:	60e3      	str	r3, [r4, #12]
 8007792:	6665      	str	r5, [r4, #100]	; 0x64
 8007794:	f000 f847 	bl	8007826 <__retarget_lock_init_recursive>
 8007798:	f7ff ff96 	bl	80076c8 <__sfp_lock_release>
 800779c:	2208      	movs	r2, #8
 800779e:	4629      	mov	r1, r5
 80077a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077a8:	6025      	str	r5, [r4, #0]
 80077aa:	61a5      	str	r5, [r4, #24]
 80077ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077b0:	f7fd faba 	bl	8004d28 <memset>
 80077b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077bc:	4620      	mov	r0, r4
 80077be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c0:	3468      	adds	r4, #104	; 0x68
 80077c2:	e7d9      	b.n	8007778 <__sfp+0x1c>
 80077c4:	2104      	movs	r1, #4
 80077c6:	4638      	mov	r0, r7
 80077c8:	f7ff ff62 	bl	8007690 <__sfmoreglue>
 80077cc:	4604      	mov	r4, r0
 80077ce:	6030      	str	r0, [r6, #0]
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d1d5      	bne.n	8007780 <__sfp+0x24>
 80077d4:	f7ff ff78 	bl	80076c8 <__sfp_lock_release>
 80077d8:	230c      	movs	r3, #12
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	e7ee      	b.n	80077bc <__sfp+0x60>
 80077de:	bf00      	nop
 80077e0:	08007bdc 	.word	0x08007bdc
 80077e4:	ffff0001 	.word	0xffff0001

080077e8 <_fwalk_reent>:
 80077e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ec:	4606      	mov	r6, r0
 80077ee:	4688      	mov	r8, r1
 80077f0:	2700      	movs	r7, #0
 80077f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077fa:	f1b9 0901 	subs.w	r9, r9, #1
 80077fe:	d505      	bpl.n	800780c <_fwalk_reent+0x24>
 8007800:	6824      	ldr	r4, [r4, #0]
 8007802:	2c00      	cmp	r4, #0
 8007804:	d1f7      	bne.n	80077f6 <_fwalk_reent+0xe>
 8007806:	4638      	mov	r0, r7
 8007808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780c:	89ab      	ldrh	r3, [r5, #12]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d907      	bls.n	8007822 <_fwalk_reent+0x3a>
 8007812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007816:	3301      	adds	r3, #1
 8007818:	d003      	beq.n	8007822 <_fwalk_reent+0x3a>
 800781a:	4629      	mov	r1, r5
 800781c:	4630      	mov	r0, r6
 800781e:	47c0      	blx	r8
 8007820:	4307      	orrs	r7, r0
 8007822:	3568      	adds	r5, #104	; 0x68
 8007824:	e7e9      	b.n	80077fa <_fwalk_reent+0x12>

08007826 <__retarget_lock_init_recursive>:
 8007826:	4770      	bx	lr

08007828 <__retarget_lock_acquire_recursive>:
 8007828:	4770      	bx	lr

0800782a <__retarget_lock_release_recursive>:
 800782a:	4770      	bx	lr

0800782c <__swhatbuf_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	460e      	mov	r6, r1
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	4614      	mov	r4, r2
 8007836:	2900      	cmp	r1, #0
 8007838:	461d      	mov	r5, r3
 800783a:	b096      	sub	sp, #88	; 0x58
 800783c:	da08      	bge.n	8007850 <__swhatbuf_r+0x24>
 800783e:	2200      	movs	r2, #0
 8007840:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007844:	602a      	str	r2, [r5, #0]
 8007846:	061a      	lsls	r2, r3, #24
 8007848:	d410      	bmi.n	800786c <__swhatbuf_r+0x40>
 800784a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800784e:	e00e      	b.n	800786e <__swhatbuf_r+0x42>
 8007850:	466a      	mov	r2, sp
 8007852:	f000 f903 	bl	8007a5c <_fstat_r>
 8007856:	2800      	cmp	r0, #0
 8007858:	dbf1      	blt.n	800783e <__swhatbuf_r+0x12>
 800785a:	9a01      	ldr	r2, [sp, #4]
 800785c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007860:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007864:	425a      	negs	r2, r3
 8007866:	415a      	adcs	r2, r3
 8007868:	602a      	str	r2, [r5, #0]
 800786a:	e7ee      	b.n	800784a <__swhatbuf_r+0x1e>
 800786c:	2340      	movs	r3, #64	; 0x40
 800786e:	2000      	movs	r0, #0
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	b016      	add	sp, #88	; 0x58
 8007874:	bd70      	pop	{r4, r5, r6, pc}
	...

08007878 <__smakebuf_r>:
 8007878:	898b      	ldrh	r3, [r1, #12]
 800787a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800787c:	079d      	lsls	r5, r3, #30
 800787e:	4606      	mov	r6, r0
 8007880:	460c      	mov	r4, r1
 8007882:	d507      	bpl.n	8007894 <__smakebuf_r+0x1c>
 8007884:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	2301      	movs	r3, #1
 800788e:	6163      	str	r3, [r4, #20]
 8007890:	b002      	add	sp, #8
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	466a      	mov	r2, sp
 8007896:	ab01      	add	r3, sp, #4
 8007898:	f7ff ffc8 	bl	800782c <__swhatbuf_r>
 800789c:	9900      	ldr	r1, [sp, #0]
 800789e:	4605      	mov	r5, r0
 80078a0:	4630      	mov	r0, r6
 80078a2:	f7ff f969 	bl	8006b78 <_malloc_r>
 80078a6:	b948      	cbnz	r0, 80078bc <__smakebuf_r+0x44>
 80078a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ac:	059a      	lsls	r2, r3, #22
 80078ae:	d4ef      	bmi.n	8007890 <__smakebuf_r+0x18>
 80078b0:	f023 0303 	bic.w	r3, r3, #3
 80078b4:	f043 0302 	orr.w	r3, r3, #2
 80078b8:	81a3      	strh	r3, [r4, #12]
 80078ba:	e7e3      	b.n	8007884 <__smakebuf_r+0xc>
 80078bc:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <__smakebuf_r+0x7c>)
 80078be:	62b3      	str	r3, [r6, #40]	; 0x28
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	6020      	str	r0, [r4, #0]
 80078c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c8:	81a3      	strh	r3, [r4, #12]
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	6120      	str	r0, [r4, #16]
 80078ce:	6163      	str	r3, [r4, #20]
 80078d0:	9b01      	ldr	r3, [sp, #4]
 80078d2:	b15b      	cbz	r3, 80078ec <__smakebuf_r+0x74>
 80078d4:	4630      	mov	r0, r6
 80078d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078da:	f000 f8d1 	bl	8007a80 <_isatty_r>
 80078de:	b128      	cbz	r0, 80078ec <__smakebuf_r+0x74>
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	f023 0303 	bic.w	r3, r3, #3
 80078e6:	f043 0301 	orr.w	r3, r3, #1
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	89a0      	ldrh	r0, [r4, #12]
 80078ee:	4305      	orrs	r5, r0
 80078f0:	81a5      	strh	r5, [r4, #12]
 80078f2:	e7cd      	b.n	8007890 <__smakebuf_r+0x18>
 80078f4:	08007685 	.word	0x08007685

080078f8 <_malloc_usable_size_r>:
 80078f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078fc:	1f18      	subs	r0, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	bfbc      	itt	lt
 8007902:	580b      	ldrlt	r3, [r1, r0]
 8007904:	18c0      	addlt	r0, r0, r3
 8007906:	4770      	bx	lr

08007908 <_raise_r>:
 8007908:	291f      	cmp	r1, #31
 800790a:	b538      	push	{r3, r4, r5, lr}
 800790c:	4604      	mov	r4, r0
 800790e:	460d      	mov	r5, r1
 8007910:	d904      	bls.n	800791c <_raise_r+0x14>
 8007912:	2316      	movs	r3, #22
 8007914:	6003      	str	r3, [r0, #0]
 8007916:	f04f 30ff 	mov.w	r0, #4294967295
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800791e:	b112      	cbz	r2, 8007926 <_raise_r+0x1e>
 8007920:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007924:	b94b      	cbnz	r3, 800793a <_raise_r+0x32>
 8007926:	4620      	mov	r0, r4
 8007928:	f000 f830 	bl	800798c <_getpid_r>
 800792c:	462a      	mov	r2, r5
 800792e:	4601      	mov	r1, r0
 8007930:	4620      	mov	r0, r4
 8007932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007936:	f000 b817 	b.w	8007968 <_kill_r>
 800793a:	2b01      	cmp	r3, #1
 800793c:	d00a      	beq.n	8007954 <_raise_r+0x4c>
 800793e:	1c59      	adds	r1, r3, #1
 8007940:	d103      	bne.n	800794a <_raise_r+0x42>
 8007942:	2316      	movs	r3, #22
 8007944:	6003      	str	r3, [r0, #0]
 8007946:	2001      	movs	r0, #1
 8007948:	e7e7      	b.n	800791a <_raise_r+0x12>
 800794a:	2400      	movs	r4, #0
 800794c:	4628      	mov	r0, r5
 800794e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007952:	4798      	blx	r3
 8007954:	2000      	movs	r0, #0
 8007956:	e7e0      	b.n	800791a <_raise_r+0x12>

08007958 <raise>:
 8007958:	4b02      	ldr	r3, [pc, #8]	; (8007964 <raise+0xc>)
 800795a:	4601      	mov	r1, r0
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	f7ff bfd3 	b.w	8007908 <_raise_r>
 8007962:	bf00      	nop
 8007964:	20000010 	.word	0x20000010

08007968 <_kill_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	2300      	movs	r3, #0
 800796c:	4d06      	ldr	r5, [pc, #24]	; (8007988 <_kill_r+0x20>)
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	4611      	mov	r1, r2
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	f7fa f9c2 	bl	8001cfe <_kill>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	d102      	bne.n	8007984 <_kill_r+0x1c>
 800797e:	682b      	ldr	r3, [r5, #0]
 8007980:	b103      	cbz	r3, 8007984 <_kill_r+0x1c>
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	bd38      	pop	{r3, r4, r5, pc}
 8007986:	bf00      	nop
 8007988:	200004e8 	.word	0x200004e8

0800798c <_getpid_r>:
 800798c:	f7fa b9b0 	b.w	8001cf0 <_getpid>

08007990 <__sread>:
 8007990:	b510      	push	{r4, lr}
 8007992:	460c      	mov	r4, r1
 8007994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007998:	f000 f894 	bl	8007ac4 <_read_r>
 800799c:	2800      	cmp	r0, #0
 800799e:	bfab      	itete	ge
 80079a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079a2:	89a3      	ldrhlt	r3, [r4, #12]
 80079a4:	181b      	addge	r3, r3, r0
 80079a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079aa:	bfac      	ite	ge
 80079ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80079ae:	81a3      	strhlt	r3, [r4, #12]
 80079b0:	bd10      	pop	{r4, pc}

080079b2 <__swrite>:
 80079b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b6:	461f      	mov	r7, r3
 80079b8:	898b      	ldrh	r3, [r1, #12]
 80079ba:	4605      	mov	r5, r0
 80079bc:	05db      	lsls	r3, r3, #23
 80079be:	460c      	mov	r4, r1
 80079c0:	4616      	mov	r6, r2
 80079c2:	d505      	bpl.n	80079d0 <__swrite+0x1e>
 80079c4:	2302      	movs	r3, #2
 80079c6:	2200      	movs	r2, #0
 80079c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079cc:	f000 f868 	bl	8007aa0 <_lseek_r>
 80079d0:	89a3      	ldrh	r3, [r4, #12]
 80079d2:	4632      	mov	r2, r6
 80079d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d8:	81a3      	strh	r3, [r4, #12]
 80079da:	4628      	mov	r0, r5
 80079dc:	463b      	mov	r3, r7
 80079de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079e6:	f000 b817 	b.w	8007a18 <_write_r>

080079ea <__sseek>:
 80079ea:	b510      	push	{r4, lr}
 80079ec:	460c      	mov	r4, r1
 80079ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f2:	f000 f855 	bl	8007aa0 <_lseek_r>
 80079f6:	1c43      	adds	r3, r0, #1
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	bf15      	itete	ne
 80079fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80079fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a06:	81a3      	strheq	r3, [r4, #12]
 8007a08:	bf18      	it	ne
 8007a0a:	81a3      	strhne	r3, [r4, #12]
 8007a0c:	bd10      	pop	{r4, pc}

08007a0e <__sclose>:
 8007a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a12:	f000 b813 	b.w	8007a3c <_close_r>
	...

08007a18 <_write_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	4608      	mov	r0, r1
 8007a1e:	4611      	mov	r1, r2
 8007a20:	2200      	movs	r2, #0
 8007a22:	4d05      	ldr	r5, [pc, #20]	; (8007a38 <_write_r+0x20>)
 8007a24:	602a      	str	r2, [r5, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f7fa f9a0 	bl	8001d6c <_write>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d102      	bne.n	8007a36 <_write_r+0x1e>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	b103      	cbz	r3, 8007a36 <_write_r+0x1e>
 8007a34:	6023      	str	r3, [r4, #0]
 8007a36:	bd38      	pop	{r3, r4, r5, pc}
 8007a38:	200004e8 	.word	0x200004e8

08007a3c <_close_r>:
 8007a3c:	b538      	push	{r3, r4, r5, lr}
 8007a3e:	2300      	movs	r3, #0
 8007a40:	4d05      	ldr	r5, [pc, #20]	; (8007a58 <_close_r+0x1c>)
 8007a42:	4604      	mov	r4, r0
 8007a44:	4608      	mov	r0, r1
 8007a46:	602b      	str	r3, [r5, #0]
 8007a48:	f7fa f9ac 	bl	8001da4 <_close>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_close_r+0x1a>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_close_r+0x1a>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	200004e8 	.word	0x200004e8

08007a5c <_fstat_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4d06      	ldr	r5, [pc, #24]	; (8007a7c <_fstat_r+0x20>)
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	4611      	mov	r1, r2
 8007a68:	602b      	str	r3, [r5, #0]
 8007a6a:	f7fa f9a6 	bl	8001dba <_fstat>
 8007a6e:	1c43      	adds	r3, r0, #1
 8007a70:	d102      	bne.n	8007a78 <_fstat_r+0x1c>
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	b103      	cbz	r3, 8007a78 <_fstat_r+0x1c>
 8007a76:	6023      	str	r3, [r4, #0]
 8007a78:	bd38      	pop	{r3, r4, r5, pc}
 8007a7a:	bf00      	nop
 8007a7c:	200004e8 	.word	0x200004e8

08007a80 <_isatty_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	2300      	movs	r3, #0
 8007a84:	4d05      	ldr	r5, [pc, #20]	; (8007a9c <_isatty_r+0x1c>)
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	602b      	str	r3, [r5, #0]
 8007a8c:	f7fa f9a4 	bl	8001dd8 <_isatty>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_isatty_r+0x1a>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_isatty_r+0x1a>
 8007a98:	6023      	str	r3, [r4, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	200004e8 	.word	0x200004e8

08007aa0 <_lseek_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	4611      	mov	r1, r2
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	4d05      	ldr	r5, [pc, #20]	; (8007ac0 <_lseek_r+0x20>)
 8007aac:	602a      	str	r2, [r5, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f7fa f99c 	bl	8001dec <_lseek>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d102      	bne.n	8007abe <_lseek_r+0x1e>
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	b103      	cbz	r3, 8007abe <_lseek_r+0x1e>
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	bd38      	pop	{r3, r4, r5, pc}
 8007ac0:	200004e8 	.word	0x200004e8

08007ac4 <_read_r>:
 8007ac4:	b538      	push	{r3, r4, r5, lr}
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	2200      	movs	r2, #0
 8007ace:	4d05      	ldr	r5, [pc, #20]	; (8007ae4 <_read_r+0x20>)
 8007ad0:	602a      	str	r2, [r5, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f7fa f92d 	bl	8001d32 <_read>
 8007ad8:	1c43      	adds	r3, r0, #1
 8007ada:	d102      	bne.n	8007ae2 <_read_r+0x1e>
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	b103      	cbz	r3, 8007ae2 <_read_r+0x1e>
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	bd38      	pop	{r3, r4, r5, pc}
 8007ae4:	200004e8 	.word	0x200004e8

08007ae8 <_init>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	bf00      	nop
 8007aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aee:	bc08      	pop	{r3}
 8007af0:	469e      	mov	lr, r3
 8007af2:	4770      	bx	lr

08007af4 <_fini>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	bf00      	nop
 8007af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007afa:	bc08      	pop	{r3}
 8007afc:	469e      	mov	lr, r3
 8007afe:	4770      	bx	lr
